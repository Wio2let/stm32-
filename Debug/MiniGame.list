
MiniGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000648c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006624  08006624  00007624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080067e8  080067e8  000077e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f0  080067f0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067f4  080067f4  000077f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080067f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000068  08006860  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006860  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010165  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d8f  00000000  00000000  000181fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  0001af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b50  00000000  00000000  0001be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195bc  00000000  00000000  0001c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014958  00000000  00000000  00035f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009128b  00000000  00000000  0004a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbb3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000443c  00000000  00000000  000dbb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000dffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800660c 	.word	0x0800660c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	0800660c 	.word	0x0800660c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96a 	b.w	8000ddc <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	460c      	mov	r4, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14e      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	458c      	cmp	ip, r1
 8000b30:	4686      	mov	lr, r0
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	d962      	bls.n	8000bfe <__udivmoddi4+0xde>
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0320 	rsb	r3, r2, #32
 8000b3e:	4091      	lsls	r1, r2
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f f68c 	uxth.w	r6, ip
 8000b56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb04 f106 	mul.w	r1, r4, r6
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b76:	f080 8112 	bcs.w	8000d9e <__udivmoddi4+0x27e>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 810f 	bls.w	8000d9e <__udivmoddi4+0x27e>
 8000b80:	3c02      	subs	r4, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a59      	subs	r1, r3, r1
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f606 	mul.w	r6, r0, r6
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x94>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba6:	f080 80fc 	bcs.w	8000da2 <__udivmoddi4+0x282>
 8000baa:	429e      	cmp	r6, r3
 8000bac:	f240 80f9 	bls.w	8000da2 <__udivmoddi4+0x282>
 8000bb0:	4463      	add	r3, ip
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b11d      	cbz	r5, 8000bc6 <__udivmoddi4+0xa6>
 8000bbe:	40d3      	lsrs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d905      	bls.n	8000bda <__udivmoddi4+0xba>
 8000bce:	b10d      	cbz	r5, 8000bd4 <__udivmoddi4+0xb4>
 8000bd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e7f5      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bda:	fab3 f183 	clz	r1, r3
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d146      	bne.n	8000c70 <__udivmoddi4+0x150>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xcc>
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f0c0 80f0 	bcc.w	8000dcc <__udivmoddi4+0x2ac>
 8000bec:	1a86      	subs	r6, r0, r2
 8000bee:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d0e6      	beq.n	8000bc6 <__udivmoddi4+0xa6>
 8000bf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfc:	e7e3      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x204>
 8000c04:	eba1 040c 	sub.w	r4, r1, ip
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb07 f006 	mul.w	r0, r7, r6
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x11c>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x11a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	1a1c      	subs	r4, r3, r0
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c46:	fb08 4410 	mls	r4, r8, r0, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb00 f707 	mul.w	r7, r0, r7
 8000c52:	429f      	cmp	r7, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x148>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x146>
 8000c60:	429f      	cmp	r7, r3
 8000c62:	f200 80b0 	bhi.w	8000dc6 <__udivmoddi4+0x2a6>
 8000c66:	4620      	mov	r0, r4
 8000c68:	1bdb      	subs	r3, r3, r7
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0x9c>
 8000c70:	f1c1 0620 	rsb	r6, r1, #32
 8000c74:	408b      	lsls	r3, r1
 8000c76:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c80:	fa04 f301 	lsl.w	r3, r4, r1
 8000c84:	ea43 030c 	orr.w	r3, r3, ip
 8000c88:	40f4      	lsrs	r4, r6
 8000c8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8e:	0c38      	lsrs	r0, r7, #16
 8000c90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c94:	fbb4 fef0 	udiv	lr, r4, r0
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ca0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca8:	45a1      	cmp	r9, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x1a6>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb6:	f080 8084 	bcs.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cba:	45a1      	cmp	r9, r4
 8000cbc:	f240 8081 	bls.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	eba4 0409 	sub.w	r4, r4, r9
 8000cca:	fa1f f983 	uxth.w	r9, r3
 8000cce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1d2>
 8000ce2:	193c      	adds	r4, r7, r4
 8000ce4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce8:	d267      	bcs.n	8000dba <__udivmoddi4+0x29a>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0x29a>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	46ce      	mov	lr, r9
 8000d02:	469c      	mov	ip, r3
 8000d04:	d351      	bcc.n	8000daa <__udivmoddi4+0x28a>
 8000d06:	d04e      	beq.n	8000da6 <__udivmoddi4+0x286>
 8000d08:	b155      	cbz	r5, 8000d20 <__udivmoddi4+0x200>
 8000d0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d12:	fa04 f606 	lsl.w	r6, r4, r6
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431e      	orrs	r6, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e750      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f103 	lsr.w	r1, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa24 f303 	lsr.w	r3, r4, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3110 	mls	r1, r8, r0, r3
 8000d4c:	0c23      	lsrs	r3, r4, #16
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f107 	mul.w	r1, r0, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x24c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d62:	d22c      	bcs.n	8000dbe <__udivmoddi4+0x29e>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d92a      	bls.n	8000dbe <__udivmoddi4+0x29e>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d74:	fb08 3311 	mls	r3, r8, r1, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb01 f307 	mul.w	r3, r1, r7
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x276>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d8c:	d213      	bcs.n	8000db6 <__udivmoddi4+0x296>
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	d911      	bls.n	8000db6 <__udivmoddi4+0x296>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	1ae4      	subs	r4, r4, r3
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e739      	b.n	8000c12 <__udivmoddi4+0xf2>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	e6f0      	b.n	8000b84 <__udivmoddi4+0x64>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e706      	b.n	8000bb4 <__udivmoddi4+0x94>
 8000da6:	45c8      	cmp	r8, r9
 8000da8:	d2ae      	bcs.n	8000d08 <__udivmoddi4+0x1e8>
 8000daa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7a8      	b.n	8000d08 <__udivmoddi4+0x1e8>
 8000db6:	4631      	mov	r1, r6
 8000db8:	e7ed      	b.n	8000d96 <__udivmoddi4+0x276>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e799      	b.n	8000cf2 <__udivmoddi4+0x1d2>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e7d4      	b.n	8000d6c <__udivmoddi4+0x24c>
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1a6>
 8000dc6:	4463      	add	r3, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e74d      	b.n	8000c68 <__udivmoddi4+0x148>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e70f      	b.n	8000bf4 <__udivmoddi4+0xd4>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	e730      	b.n	8000c3c <__udivmoddi4+0x11c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000df0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	203a      	movs	r0, #58	@ 0x3a
 8000e08:	f000 ff09 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e0c:	203a      	movs	r0, #58	@ 0x3a
 8000e0e:	f000 ff22 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2046      	movs	r0, #70	@ 0x46
 8000e18:	f000 ff01 	bl	8001c1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e1c:	2046      	movs	r0, #70	@ 0x46
 8000e1e:	f000 ff1a 	bl	8001c56 <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b4a      	ldr	r3, [pc, #296]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPO_LED_0_Pin|GPO_LED_1_Pin|GPO_LED_2_Pin|GPO_LED_3_Pin
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	21ff      	movs	r1, #255	@ 0xff
 8000ed6:	482b      	ldr	r0, [pc, #172]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ed8:	f001 fc76 	bl	80027c8 <HAL_GPIO_WritePin>
                          |GPO_LED_4_Pin|GPO_LED_5_Pin|GPO_LED_6_Pin|GPO_LED_7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPO_HC183_PA0_Pin|GPO_HC183_PA1_Pin|GPO_HC183_PA2_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000ee2:	4828      	ldr	r0, [pc, #160]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ee4:	f001 fc70 	bl	80027c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_HC595_PB3_Pin|GPO_HC595_PB4_Pin|GPO_HC595_PB5_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2138      	movs	r1, #56	@ 0x38
 8000eec:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000eee:	f001 fc6b 	bl	80027c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPO_LED_0_Pin|GPO_LED_1_Pin|GPO_LED_2_Pin|GPO_LED_3_Pin
 8000ef2:	f641 43ff 	movw	r3, #7423	@ 0x1cff
 8000ef6:	617b      	str	r3, [r7, #20]
                          |GPO_LED_4_Pin|GPO_LED_5_Pin|GPO_LED_6_Pin|GPO_LED_7_Pin
                          |GPO_HC183_PA0_Pin|GPO_HC183_PA1_Pin|GPO_HC183_PA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481e      	ldr	r0, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000f0c:	f001 fac0 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPI_KEY_UP_Pin;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPI_KEY_UP_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <MX_GPIO_Init+0x15c>)
 8000f24:	f001 fab4 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPI_KEY_LEFT_Pin|GPI_KEY_DOWN_Pin;
 8000f28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000f3e:	f001 faa7 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPI_KEY_RIGHT_Pin;
 8000f42:	2304      	movs	r3, #4
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPI_KEY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480e      	ldr	r0, [pc, #56]	@ (8000f90 <MX_GPIO_Init+0x160>)
 8000f56:	f001 fa9b 	bl	8002490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPO_HC595_PB3_Pin|GPO_HC595_PB4_Pin|GPO_HC595_PB5_Pin;
 8000f5a:	2338      	movs	r3, #56	@ 0x38
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000f72:	f001 fa8d 	bl	8002490 <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <__io_putchar>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f9c:	1d39      	adds	r1, r7, #4
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <__io_putchar+0x20>)
 8000fa6:	f002 fd6f 	bl	8003a88 <HAL_UART_Transmit>
	return ch;
 8000faa:	687b      	ldr	r3, [r7, #4]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000014c 	.word	0x2000014c

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fcbd 	bl	800193c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f877 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f7ff ff33 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fca:	f7ff ff09 	bl	8000de0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000fce:	f000 fa45 	bl	800145c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000fd2:	f000 fa91 	bl	80014f8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000fd6:	f000 fb67 	bl	80016a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  snakeInit();
 8000fda:	f004 f9dd 	bl	8005398 <snakeInit>

  keyInit();
 8000fde:	f004 f87b 	bl	80050d8 <keyInit>
  HAL_TIM_Base_Start_IT(&htim5);
 8000fe2:	482e      	ldr	r0, [pc, #184]	@ (800109c <main+0xe4>)
 8000fe4:	f002 f90c 	bl	8003200 <HAL_TIM_Base_Start_IT>
  uint8_t mode = RUNNING;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	71fb      	strb	r3, [r7, #7]

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxData, sizeof(rxData));
 8000fec:	2232      	movs	r2, #50	@ 0x32
 8000fee:	492c      	ldr	r1, [pc, #176]	@ (80010a0 <main+0xe8>)
 8000ff0:	482c      	ldr	r0, [pc, #176]	@ (80010a4 <main+0xec>)
 8000ff2:	f002 fe45 	bl	8003c80 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);		//关闭传输过半触发的中断
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <main+0xf0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <main+0xf0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0208 	bic.w	r2, r2, #8
 8001004:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(mode){
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d845      	bhi.n	8001098 <main+0xe0>
 800100c:	a201      	add	r2, pc, #4	@ (adr r2, 8001014 <main+0x5c>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001099 	.word	0x08001099
 8001018:	0800104f 	.word	0x0800104f
 800101c:	08001025 	.word	0x08001025
 8001020:	08001077 	.word	0x08001077
	 case START:

		 break;
	 case PAUSE:
		 displayToken(2, 0x73);
 8001024:	2173      	movs	r1, #115	@ 0x73
 8001026:	2002      	movs	r0, #2
 8001028:	f004 f83c 	bl	80050a4 <displayToken>
		 displayToken(3, 0x77);
 800102c:	2177      	movs	r1, #119	@ 0x77
 800102e:	2003      	movs	r0, #3
 8001030:	f004 f838 	bl	80050a4 <displayToken>
		 displayToken(4, 0x3E);
 8001034:	213e      	movs	r1, #62	@ 0x3e
 8001036:	2004      	movs	r0, #4
 8001038:	f004 f834 	bl	80050a4 <displayToken>
		 displayToken(5, 0x6D);
 800103c:	216d      	movs	r1, #109	@ 0x6d
 800103e:	2005      	movs	r0, #5
 8001040:	f004 f830 	bl	80050a4 <displayToken>
		 displayToken(6, 0x79);
 8001044:	2179      	movs	r1, #121	@ 0x79
 8001046:	2006      	movs	r0, #6
 8001048:	f004 f82c 	bl	80050a4 <displayToken>
		 break;
 800104c:	e025      	b.n	800109a <main+0xe2>
	 case RUNNING:
		 HAL_Delay(0.5);
 800104e:	2000      	movs	r0, #0
 8001050:	f000 fce6 	bl	8001a20 <HAL_Delay>
		 snakeBlockUpdate(mainSnake);
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <main+0xf4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f004 f9bb 	bl	80053d4 <snakeBlockUpdate>
		 if(!foodGenFlag){
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <main+0xf8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d104      	bne.n	8001070 <main+0xb8>
				foodGen(mainSnake);
 8001066:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <main+0xf4>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f004 fb22 	bl	80056b4 <foodGen>
			 }
		 foodDisplay();
 8001070:	f004 fb78 	bl	8005764 <foodDisplay>
		 break;
 8001074:	e011      	b.n	800109a <main+0xe2>
	 case END:
		 displayToken(2, 0x38);
 8001076:	2138      	movs	r1, #56	@ 0x38
 8001078:	2002      	movs	r0, #2
 800107a:	f004 f813 	bl	80050a4 <displayToken>
		 displayToken(3, 0x3f);
 800107e:	213f      	movs	r1, #63	@ 0x3f
 8001080:	2003      	movs	r0, #3
 8001082:	f004 f80f 	bl	80050a4 <displayToken>
		 displayToken(4, 0x6D);
 8001086:	216d      	movs	r1, #109	@ 0x6d
 8001088:	2004      	movs	r0, #4
 800108a:	f004 f80b 	bl	80050a4 <displayToken>
		 displayToken(5, 0x79);
 800108e:	2179      	movs	r1, #121	@ 0x79
 8001090:	2005      	movs	r0, #5
 8001092:	f004 f807 	bl	80050a4 <displayToken>
		 break;
 8001096:	e000      	b.n	800109a <main+0xe2>
	 default:
		 break;
 8001098:	bf00      	nop
	 switch(mode){
 800109a:	e7b4      	b.n	8001006 <main+0x4e>
 800109c:	200000d0 	.word	0x200000d0
 80010a0:	20000118 	.word	0x20000118
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	20000194 	.word	0x20000194
 80010ac:	20000268 	.word	0x20000268
 80010b0:	20000272 	.word	0x20000272

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	@ 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 fe9c 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a26      	ldr	r2, [pc, #152]	@ (800117c <SystemClock_Config+0xc8>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <SystemClock_Config+0xc8>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a20      	ldr	r2, [pc, #128]	@ (8001180 <SystemClock_Config+0xcc>)
 80010fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <SystemClock_Config+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001110:	2301      	movs	r3, #1
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001124:	2304      	movs	r3, #4
 8001126:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001128:	2364      	movs	r3, #100	@ 0x64
 800112a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001130:	2304      	movs	r3, #4
 8001132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fb79 	bl	8002830 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001144:	f000 f81e 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001154:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2103      	movs	r1, #3
 8001164:	4618      	mov	r0, r3
 8001166:	f001 fddb 	bl	8002d20 <HAL_RCC_ClockConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001170:	f000 f808 	bl	8001184 <Error_Handler>
  }
}
 8001174:	bf00      	nop
 8001176:	3750      	adds	r7, #80	@ 0x50
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119e:	4a0f      	ldr	r2, [pc, #60]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <HAL_MspInit+0x4c>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001236:	f000 fbd3 	bl	80019e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  keyResponse();
 8001244:	f003 ff6a 	bl	800511c <keyResponse>
  snakeDirectionUpdated(mainSnake);
 8001248:	4b04      	ldr	r3, [pc, #16]	@ (800125c <TIM2_IRQHandler+0x1c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f8ef 	bl	8005430 <snakeDirectionUpdated>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001252:	4803      	ldr	r0, [pc, #12]	@ (8001260 <TIM2_IRQHandler+0x20>)
 8001254:	f002 f836 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000268 	.word	0x20000268
 8001260:	20000088 	.word	0x20000088

08001264 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <USART1_IRQHandler+0x10>)
 800126a:	f002 fd67 	bl	8003d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000014c 	.word	0x2000014c

08001278 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  snakePositionUpdated(mainSnake, copySnake);
 800127c:	4b0f      	ldr	r3, [pc, #60]	@ (80012bc <TIM5_IRQHandler+0x44>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0f      	ldr	r2, [pc, #60]	@ (80012c0 <TIM5_IRQHandler+0x48>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f004 f952 	bl	8005530 <snakePositionUpdated>
  ifAteFood(mainSnake, copySnake);
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <TIM5_IRQHandler+0x44>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0b      	ldr	r2, [pc, #44]	@ (80012c0 <TIM5_IRQHandler+0x48>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f004 fa7e 	bl	8005798 <ifAteFood>
  recordStep();
 800129c:	f004 f868 	bl	8005370 <recordStep>
  copySnakeReset(mainSnake, copySnake);
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <TIM5_IRQHandler+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <TIM5_IRQHandler+0x48>)
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f004 f9c4 	bl	8005638 <copySnakeReset>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012b0:	4804      	ldr	r0, [pc, #16]	@ (80012c4 <TIM5_IRQHandler+0x4c>)
 80012b2:	f002 f807 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000268 	.word	0x20000268
 80012c0:	2000026c 	.word	0x2000026c
 80012c4:	200000d0 	.word	0x200000d0

080012c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <DMA2_Stream2_IRQHandler+0x10>)
 80012ce:	f000 fe75 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000194 	.word	0x20000194

080012dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <DMA2_Stream7_IRQHandler+0x10>)
 80012e2:	f000 fe6b 	bl	8001fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200001f4 	.word	0x200001f4

080012f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e009      	b.n	8001350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe25 	bl	8000f94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf1      	blt.n	800133c <_write+0x12>
  }
  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_close>:

int _close(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800138a:	605a      	str	r2, [r3, #4]
  return 0;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	@ (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	@ (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f004 fd5e 	bl	8005ebc <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20020000 	.word	0x20020000
 800142c:	00000400 	.word	0x00000400
 8001430:	20000084 	.word	0x20000084
 8001434:	20000428 	.word	0x20000428

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001478:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800147a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800147e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 8001480:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001482:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001486:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001490:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001494:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <MX_TIM2_Init+0x98>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <MX_TIM2_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014a4:	f001 fe5c 	bl	8003160 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ae:	f7ff fe69 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014c0:	f001 fff0 	bl	80034a4 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014ca:	f7ff fe5b 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	@ (80014f4 <MX_TIM2_Init+0x98>)
 80014dc:	f002 fa02 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80014e6:	f7ff fe4d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000088 	.word	0x20000088

080014f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001514:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_TIM5_Init+0x94>)
 8001516:	4a1e      	ldr	r2, [pc, #120]	@ (8001590 <MX_TIM5_Init+0x98>)
 8001518:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000-1;
 800151a:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <MX_TIM5_Init+0x94>)
 800151c:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001520:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_TIM5_Init+0x94>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_TIM5_Init+0x94>)
 800152a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800152e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001530:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_TIM5_Init+0x94>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001536:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_TIM5_Init+0x94>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800153c:	4813      	ldr	r0, [pc, #76]	@ (800158c <MX_TIM5_Init+0x94>)
 800153e:	f001 fe0f 	bl	8003160 <HAL_TIM_Base_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001548:	f7ff fe1c 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001550:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_TIM5_Init+0x94>)
 800155a:	f001 ffa3 	bl	80034a4 <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001564:	f7ff fe0e 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_TIM5_Init+0x94>)
 8001576:	f002 f9b5 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001580:	f7ff fe00 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200000d0 	.word	0x200000d0
 8001590:	40000c00 	.word	0x40000c00

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015b4:	d134      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
 80015ba:	4b38      	ldr	r3, [pc, #224]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a37      	ldr	r2, [pc, #220]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b35      	ldr	r3, [pc, #212]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a30      	ldr	r2, [pc, #192]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b2e      	ldr	r3, [pc, #184]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ee:	2302      	movs	r3, #2
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fe:	2301      	movs	r3, #1
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 031c 	add.w	r3, r7, #28
 8001606:	4619      	mov	r1, r3
 8001608:	4825      	ldr	r0, [pc, #148]	@ (80016a0 <HAL_TIM_Base_MspInit+0x10c>)
 800160a:	f000 ff41 	bl	8002490 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2102      	movs	r1, #2
 8001612:	201c      	movs	r0, #28
 8001614:	f000 fb03 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001618:	201c      	movs	r0, #28
 800161a:	f000 fb1c 	bl	8001c56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800161e:	e038      	b.n	8001692 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM5)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a1f      	ldr	r2, [pc, #124]	@ (80016a4 <HAL_TIM_Base_MspInit+0x110>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d133      	bne.n	8001692 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a1a      	ldr	r2, [pc, #104]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	4a13      	ldr	r2, [pc, #76]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	@ 0x30
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_TIM_Base_MspInit+0x108>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001662:	2304      	movs	r3, #4
 8001664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001672:	2302      	movs	r3, #2
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4808      	ldr	r0, [pc, #32]	@ (80016a0 <HAL_TIM_Base_MspInit+0x10c>)
 800167e:	f000 ff07 	bl	8002490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2101      	movs	r1, #1
 8001686:	2032      	movs	r0, #50	@ 0x32
 8001688:	f000 fac9 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800168c:	2032      	movs	r0, #50	@ 0x32
 800168e:	f000 fae2 	bl	8001c56 <HAL_NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	@ 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40000c00 	.word	0x40000c00

080016a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <MX_USART1_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	@ (80016f4 <MX_USART1_UART_Init+0x4c>)
 80016e0:	f002 f982 	bl	80039e8 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f7ff fd4b 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000014c 	.word	0x2000014c
 80016f8:	40011000 	.word	0x40011000

080016fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a4c      	ldr	r2, [pc, #304]	@ (800184c <HAL_UART_MspInit+0x150>)
 800171a:	4293      	cmp	r3, r2
 800171c:	f040 8091 	bne.w	8001842 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	4b4a      	ldr	r3, [pc, #296]	@ (8001850 <HAL_UART_MspInit+0x154>)
 8001726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001728:	4a49      	ldr	r2, [pc, #292]	@ (8001850 <HAL_UART_MspInit+0x154>)
 800172a:	f043 0310 	orr.w	r3, r3, #16
 800172e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001730:	4b47      	ldr	r3, [pc, #284]	@ (8001850 <HAL_UART_MspInit+0x154>)
 8001732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	4b43      	ldr	r3, [pc, #268]	@ (8001850 <HAL_UART_MspInit+0x154>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	4a42      	ldr	r2, [pc, #264]	@ (8001850 <HAL_UART_MspInit+0x154>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6313      	str	r3, [r2, #48]	@ 0x30
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <HAL_UART_MspInit+0x154>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001758:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800175c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176a:	2307      	movs	r3, #7
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	f107 0314 	add.w	r3, r7, #20
 8001772:	4619      	mov	r1, r3
 8001774:	4837      	ldr	r0, [pc, #220]	@ (8001854 <HAL_UART_MspInit+0x158>)
 8001776:	f000 fe8b 	bl	8002490 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 800177c:	4a37      	ldr	r2, [pc, #220]	@ (800185c <HAL_UART_MspInit+0x160>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001780:	4b35      	ldr	r3, [pc, #212]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001786:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001788:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800178e:	4b32      	ldr	r3, [pc, #200]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001794:	4b30      	ldr	r3, [pc, #192]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 8001796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800179a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800179c:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017b4:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ba:	4827      	ldr	r0, [pc, #156]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017bc:	f000 fa66 	bl	8001c8c <HAL_DMA_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017c6:	f7ff fcdd 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a22      	ldr	r2, [pc, #136]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017d0:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <HAL_UART_MspInit+0x15c>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017d8:	4a22      	ldr	r2, [pc, #136]	@ (8001864 <HAL_UART_MspInit+0x168>)
 80017da:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017de:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017e6:	2240      	movs	r2, #64	@ 0x40
 80017e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <HAL_UART_MspInit+0x164>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <HAL_UART_MspInit+0x164>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001804:	4b16      	ldr	r3, [pc, #88]	@ (8001860 <HAL_UART_MspInit+0x164>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800180a:	4b15      	ldr	r3, [pc, #84]	@ (8001860 <HAL_UART_MspInit+0x164>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <HAL_UART_MspInit+0x164>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001816:	4812      	ldr	r0, [pc, #72]	@ (8001860 <HAL_UART_MspInit+0x164>)
 8001818:	f000 fa38 	bl	8001c8c <HAL_DMA_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001822:	f7ff fcaf 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0d      	ldr	r2, [pc, #52]	@ (8001860 <HAL_UART_MspInit+0x164>)
 800182a:	639a      	str	r2, [r3, #56]	@ 0x38
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_UART_MspInit+0x164>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8001832:	2200      	movs	r2, #0
 8001834:	210a      	movs	r1, #10
 8001836:	2025      	movs	r0, #37	@ 0x25
 8001838:	f000 f9f1 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800183c:	2025      	movs	r0, #37	@ 0x25
 800183e:	f000 fa0a 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	@ 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40011000 	.word	0x40011000
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	20000194 	.word	0x20000194
 800185c:	40026440 	.word	0x40026440
 8001860:	200001f4 	.word	0x200001f4
 8001864:	400264b8 	.word	0x400264b8

08001868 <HAL_UART_TxCpltCallback>:


/*串口结束传输中断*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(rxData[0]=='['){
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_UART_TxCpltCallback+0x24>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b5b      	cmp	r3, #91	@ 0x5b
 8001876:	d102      	bne.n	800187e <HAL_UART_TxCpltCallback+0x16>
	    	 ledToggle(LED_ALL);
 8001878:	20ff      	movs	r0, #255	@ 0xff
 800187a:	f003 fd0f 	bl	800529c <ledToggle>
	    	}
    printf("Transmit Successes!\r\n");
 800187e:	4804      	ldr	r0, [pc, #16]	@ (8001890 <HAL_UART_TxCpltCallback+0x28>)
 8001880:	f004 f9de 	bl	8005c40 <puts>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000118 	.word	0x20000118
 8001890:	08006624 	.word	0x08006624

08001894 <HAL_UARTEx_RxEventCallback>:



/*串口接收完成中断*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]

    if (huart->Instance == USART1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x44>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d112      	bne.n	80018d0 <HAL_UARTEx_RxEventCallback+0x3c>
    {

    	HAL_UART_Transmit_DMA(&huart1, rxData, size);
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	461a      	mov	r2, r3
 80018ae:	490b      	ldr	r1, [pc, #44]	@ (80018dc <HAL_UARTEx_RxEventCallback+0x48>)
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80018b2:	f002 f975 	bl	8003ba0 <HAL_UART_Transmit_DMA>
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxData, sizeof(rxData));
 80018b6:	2232      	movs	r2, #50	@ 0x32
 80018b8:	4908      	ldr	r1, [pc, #32]	@ (80018dc <HAL_UARTEx_RxEventCallback+0x48>)
 80018ba:	4809      	ldr	r0, [pc, #36]	@ (80018e0 <HAL_UARTEx_RxEventCallback+0x4c>)
 80018bc:	f002 f9e0 	bl	8003c80 <HAL_UARTEx_ReceiveToIdle_DMA>
    	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_UARTEx_RxEventCallback+0x50>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <HAL_UARTEx_RxEventCallback+0x50>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]


    }

}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40011000 	.word	0x40011000
 80018dc:	20000118 	.word	0x20000118
 80018e0:	2000014c 	.word	0x2000014c
 80018e4:	20000194 	.word	0x20000194

080018e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001920 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018ec:	f7ff fda4 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018f2:	490d      	ldr	r1, [pc, #52]	@ (8001928 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f4:	4a0d      	ldr	r2, [pc, #52]	@ (800192c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001908:	4c0a      	ldr	r4, [pc, #40]	@ (8001934 <LoopFillZerobss+0x22>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f004 fad7 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191a:	f7ff fb4d 	bl	8000fb8 <main>
  bx  lr    
 800191e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001920:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001928:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800192c:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8001930:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001934:	20000424 	.word	0x20000424

08001938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001938:	e7fe      	b.n	8001938 <ADC_IRQHandler>
	...

0800193c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001940:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0d      	ldr	r2, [pc, #52]	@ (800197c <HAL_Init+0x40>)
 8001946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800194c:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0a      	ldr	r2, [pc, #40]	@ (800197c <HAL_Init+0x40>)
 8001952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001956:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a07      	ldr	r2, [pc, #28]	@ (800197c <HAL_Init+0x40>)
 800195e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001962:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001964:	2003      	movs	r0, #3
 8001966:	f000 f94f 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196a:	200f      	movs	r0, #15
 800196c:	f000 f808 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001970:	f7ff fc0e 	bl	8001190 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023c00 	.word	0x40023c00

08001980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001988:	4b12      	ldr	r3, [pc, #72]	@ (80019d4 <HAL_InitTick+0x54>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <HAL_InitTick+0x58>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001996:	fbb3 f3f1 	udiv	r3, r3, r1
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f967 	bl	8001c72 <HAL_SYSTICK_Config>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e00e      	b.n	80019cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b0f      	cmp	r3, #15
 80019b2:	d80a      	bhi.n	80019ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b4:	2200      	movs	r2, #0
 80019b6:	6879      	ldr	r1, [r7, #4]
 80019b8:	f04f 30ff 	mov.w	r0, #4294967295
 80019bc:	f000 f92f 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <HAL_InitTick+0x5c>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000000 	.word	0x20000000
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000004 	.word	0x20000004

080019e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x20>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_IncTick+0x24>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4413      	add	r3, r2
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <HAL_IncTick+0x24>)
 80019f2:	6013      	str	r3, [r2, #0]
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000254 	.word	0x20000254

08001a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a0c:	4b03      	ldr	r3, [pc, #12]	@ (8001a1c <HAL_GetTick+0x14>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000254 	.word	0x20000254

08001a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff ffee 	bl	8001a08 <HAL_GetTick>
 8001a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a38:	d005      	beq.n	8001a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <HAL_Delay+0x44>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a46:	bf00      	nop
 8001a48:	f7ff ffde 	bl	8001a08 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d8f7      	bhi.n	8001a48 <HAL_Delay+0x28>
  {
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000008 	.word	0x20000008

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	@ (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	@ (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	@ (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	@ 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	@ (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	@ (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff feb6 	bl	8001a08 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e099      	b.n	8001ddc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2202      	movs	r2, #2
 8001cac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 0201 	bic.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc8:	e00f      	b.n	8001cea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cca:	f7ff fe9d 	bl	8001a08 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	d908      	bls.n	8001cea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e078      	b.n	8001ddc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e8      	bne.n	8001cca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4b38      	ldr	r3, [pc, #224]	@ (8001de4 <HAL_DMA_Init+0x158>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d107      	bne.n	8001d54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f023 0307 	bic.w	r3, r3, #7
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d117      	bne.n	8001dae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fb01 	bl	8002398 <DMA_CheckFifoParam>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2240      	movs	r2, #64	@ 0x40
 8001da0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001daa:	2301      	movs	r3, #1
 8001dac:	e016      	b.n	8001ddc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fab8 	bl	800232c <DMA_CalcBaseAndBitshift>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	f010803f 	.word	0xf010803f

08001de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_DMA_Start_IT+0x26>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e040      	b.n	8001e90 <HAL_DMA_Start_IT+0xa8>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d12f      	bne.n	8001e82 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa4a 	bl	80022d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e40:	223f      	movs	r2, #63	@ 0x3f
 8001e42:	409a      	lsls	r2, r3
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0216 	orr.w	r2, r2, #22
 8001e56:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e005      	b.n	8001e8e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea6:	f7ff fdaf 	bl	8001a08 <HAL_GetTick>
 8001eaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d008      	beq.n	8001eca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2280      	movs	r2, #128	@ 0x80
 8001ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e052      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0216 	bic.w	r2, r2, #22
 8001ed8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ee8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d103      	bne.n	8001efa <HAL_DMA_Abort+0x62>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d007      	beq.n	8001f0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0208 	bic.w	r2, r2, #8
 8001f08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1a:	e013      	b.n	8001f44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1c:	f7ff fd74 	bl	8001a08 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d90c      	bls.n	8001f44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e015      	b.n	8001f70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1e4      	bne.n	8001f1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	223f      	movs	r2, #63	@ 0x3f
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d004      	beq.n	8001f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2280      	movs	r2, #128	@ 0x80
 8001f90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00c      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2205      	movs	r2, #5
 8001f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc8:	4b8e      	ldr	r3, [pc, #568]	@ (8002204 <HAL_DMA_IRQHandler+0x248>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8002208 <HAL_DMA_IRQHandler+0x24c>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0a9b      	lsrs	r3, r3, #10
 8001fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2208      	movs	r2, #8
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01a      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0204 	bic.w	r2, r2, #4
 800200e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002014:	2208      	movs	r2, #8
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4013      	ands	r3, r2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d012      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	2204      	movs	r2, #4
 8002064:	409a      	lsls	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4013      	ands	r3, r2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d012      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00b      	beq.n	8002094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002080:	2204      	movs	r2, #4
 8002082:	409a      	lsls	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800208c:	f043 0204 	orr.w	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002098:	2210      	movs	r2, #16
 800209a:	409a      	lsls	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4013      	ands	r3, r2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d043      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d03c      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b6:	2210      	movs	r2, #16
 80020b8:	409a      	lsls	r2, r3
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d024      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
 80020ea:	e01f      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	4798      	blx	r3
 80020fc:	e016      	b.n	800212c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0208 	bic.w	r2, r2, #8
 800211a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002130:	2220      	movs	r2, #32
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 808f 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8087 	beq.w	800225c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	2220      	movs	r2, #32
 8002154:	409a      	lsls	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d136      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0216 	bic.w	r2, r2, #22
 8002174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <HAL_DMA_IRQHandler+0x1da>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0208 	bic.w	r2, r2, #8
 80021a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021aa:	223f      	movs	r2, #63	@ 0x3f
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d07e      	beq.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
        }
        return;
 80021d2:	e079      	b.n	80022c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01d      	beq.n	800221e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10d      	bne.n	800220c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d031      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	4798      	blx	r3
 8002200:	e02c      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
 8002202:	bf00      	nop
 8002204:	20000000 	.word	0x20000000
 8002208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d023      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4798      	blx	r3
 800221c:	e01e      	b.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10f      	bne.n	800224c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0210 	bic.w	r2, r2, #16
 800223a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d032      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2205      	movs	r2, #5
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3301      	adds	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	429a      	cmp	r2, r3
 8002292:	d307      	bcc.n	80022a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f2      	bne.n	8002288 <HAL_DMA_IRQHandler+0x2cc>
 80022a2:	e000      	b.n	80022a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e000      	b.n	80022ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80022c8:	bf00      	nop
    }
  }
}
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60f8      	str	r0, [r7, #12]
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80022ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b40      	cmp	r3, #64	@ 0x40
 80022fc:	d108      	bne.n	8002310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800230e:	e007      	b.n	8002320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	60da      	str	r2, [r3, #12]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	3b10      	subs	r3, #16
 800233c:	4a14      	ldr	r2, [pc, #80]	@ (8002390 <DMA_CalcBaseAndBitshift+0x64>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <DMA_CalcBaseAndBitshift+0x68>)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4413      	add	r3, r2
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b03      	cmp	r3, #3
 8002358:	d909      	bls.n	800236e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	1d1a      	adds	r2, r3, #4
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	659a      	str	r2, [r3, #88]	@ 0x58
 800236c:	e007      	b.n	800237e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002376:	f023 0303 	bic.w	r3, r3, #3
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002382:	4618      	mov	r0, r3
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	aaaaaaab 	.word	0xaaaaaaab
 8002394:	08006658 	.word	0x08006658

08002398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d11f      	bne.n	80023f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d856      	bhi.n	8002466 <DMA_CheckFifoParam+0xce>
 80023b8:	a201      	add	r2, pc, #4	@ (adr r2, 80023c0 <DMA_CheckFifoParam+0x28>)
 80023ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023be:	bf00      	nop
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023e3 	.word	0x080023e3
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	08002467 	.word	0x08002467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d046      	beq.n	800246a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e0:	e043      	b.n	800246a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023ea:	d140      	bne.n	800246e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e03d      	b.n	800246e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fa:	d121      	bne.n	8002440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d837      	bhi.n	8002472 <DMA_CheckFifoParam+0xda>
 8002402:	a201      	add	r2, pc, #4	@ (adr r2, 8002408 <DMA_CheckFifoParam+0x70>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	0800241f 	.word	0x0800241f
 8002410:	08002419 	.word	0x08002419
 8002414:	08002431 	.word	0x08002431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e030      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002422:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d025      	beq.n	8002476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800242e:	e022      	b.n	8002476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002434:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800243e:	e01c      	b.n	800247a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d903      	bls.n	800244e <DMA_CheckFifoParam+0xb6>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b03      	cmp	r3, #3
 800244a:	d003      	beq.n	8002454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800244c:	e018      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
      break;
 8002452:	e015      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00e      	beq.n	800247e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e00b      	b.n	800247e <DMA_CheckFifoParam+0xe6>
      break;
 8002466:	bf00      	nop
 8002468:	e00a      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246a:	bf00      	nop
 800246c:	e008      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800246e:	bf00      	nop
 8002470:	e006      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002472:	bf00      	nop
 8002474:	e004      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 8002476:	bf00      	nop
 8002478:	e002      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;   
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <DMA_CheckFifoParam+0xe8>
      break;
 800247e:	bf00      	nop
    }
  } 
  
  return status; 
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e159      	b.n	8002760 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024ac:	2201      	movs	r2, #1
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	f040 8148 	bne.w	800275a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d005      	beq.n	80024e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d130      	bne.n	8002544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002518:	2201      	movs	r2, #1
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 0201 	and.w	r2, r3, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b03      	cmp	r3, #3
 800254e:	d017      	beq.n	8002580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d123      	bne.n	80025d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	08da      	lsrs	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	08da      	lsrs	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3208      	adds	r2, #8
 80025ce:	69b9      	ldr	r1, [r7, #24]
 80025d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	2203      	movs	r2, #3
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0203 	and.w	r2, r3, #3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002610:	2b00      	cmp	r3, #0
 8002612:	f000 80a2 	beq.w	800275a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	4b57      	ldr	r3, [pc, #348]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a56      	ldr	r2, [pc, #344]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b54      	ldr	r3, [pc, #336]	@ (8002778 <HAL_GPIO_Init+0x2e8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002632:	4a52      	ldr	r2, [pc, #328]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a49      	ldr	r2, [pc, #292]	@ (8002780 <HAL_GPIO_Init+0x2f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d019      	beq.n	8002692 <HAL_GPIO_Init+0x202>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a48      	ldr	r2, [pc, #288]	@ (8002784 <HAL_GPIO_Init+0x2f4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d013      	beq.n	800268e <HAL_GPIO_Init+0x1fe>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a47      	ldr	r2, [pc, #284]	@ (8002788 <HAL_GPIO_Init+0x2f8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d00d      	beq.n	800268a <HAL_GPIO_Init+0x1fa>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a46      	ldr	r2, [pc, #280]	@ (800278c <HAL_GPIO_Init+0x2fc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d007      	beq.n	8002686 <HAL_GPIO_Init+0x1f6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a45      	ldr	r2, [pc, #276]	@ (8002790 <HAL_GPIO_Init+0x300>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d101      	bne.n	8002682 <HAL_GPIO_Init+0x1f2>
 800267e:	2304      	movs	r3, #4
 8002680:	e008      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002682:	2307      	movs	r3, #7
 8002684:	e006      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002686:	2303      	movs	r3, #3
 8002688:	e004      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268a:	2302      	movs	r3, #2
 800268c:	e002      	b.n	8002694 <HAL_GPIO_Init+0x204>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_GPIO_Init+0x204>
 8002692:	2300      	movs	r3, #0
 8002694:	69fa      	ldr	r2, [r7, #28]
 8002696:	f002 0203 	and.w	r2, r2, #3
 800269a:	0092      	lsls	r2, r2, #2
 800269c:	4093      	lsls	r3, r2
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a4:	4935      	ldr	r1, [pc, #212]	@ (800277c <HAL_GPIO_Init+0x2ec>)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b2:	4b38      	ldr	r3, [pc, #224]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	43db      	mvns	r3, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4013      	ands	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_GPIO_Init+0x304>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002700:	4a24      	ldr	r2, [pc, #144]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272a:	4a1a      	ldr	r2, [pc, #104]	@ (8002794 <HAL_GPIO_Init+0x304>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002754:	4a0f      	ldr	r2, [pc, #60]	@ (8002794 <HAL_GPIO_Init+0x304>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3301      	adds	r3, #1
 800275e:	61fb      	str	r3, [r7, #28]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0f      	cmp	r3, #15
 8002764:	f67f aea2 	bls.w	80024ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	3724      	adds	r7, #36	@ 0x24
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
 800277c:	40013800 	.word	0x40013800
 8002780:	40020000 	.word	0x40020000
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
 8002794:	40013c00 	.word	0x40013c00

08002798 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691a      	ldr	r2, [r3, #16]
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027b0:	2301      	movs	r3, #1
 80027b2:	73fb      	strb	r3, [r7, #15]
 80027b4:	e001      	b.n	80027ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
 80027d4:	4613      	mov	r3, r2
 80027d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d8:	787b      	ldrb	r3, [r7, #1]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027de:	887a      	ldrh	r2, [r7, #2]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e4:	e003      	b.n	80027ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e6:	887b      	ldrh	r3, [r7, #2]
 80027e8:	041a      	lsls	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	619a      	str	r2, [r3, #24]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b085      	sub	sp, #20
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
 8002802:	460b      	mov	r3, r1
 8002804:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4013      	ands	r3, r2
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43d9      	mvns	r1, r3
 8002818:	887b      	ldrh	r3, [r7, #2]
 800281a:	400b      	ands	r3, r1
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	619a      	str	r2, [r3, #24]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e267      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d075      	beq.n	800293a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800284e:	4b88      	ldr	r3, [pc, #544]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d00c      	beq.n	8002874 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285a:	4b85      	ldr	r3, [pc, #532]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002862:	2b08      	cmp	r3, #8
 8002864:	d112      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002866:	4b82      	ldr	r3, [pc, #520]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002872:	d10b      	bne.n	800288c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	4b7e      	ldr	r3, [pc, #504]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d05b      	beq.n	8002938 <HAL_RCC_OscConfig+0x108>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d157      	bne.n	8002938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e242      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d106      	bne.n	80028a4 <HAL_RCC_OscConfig+0x74>
 8002896:	4b76      	ldr	r3, [pc, #472]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a75      	ldr	r2, [pc, #468]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800289c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a0:	6013      	str	r3, [r2, #0]
 80028a2:	e01d      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028ac:	d10c      	bne.n	80028c8 <HAL_RCC_OscConfig+0x98>
 80028ae:	4b70      	ldr	r3, [pc, #448]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a6c      	ldr	r2, [pc, #432]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e00b      	b.n	80028e0 <HAL_RCC_OscConfig+0xb0>
 80028c8:	4b69      	ldr	r3, [pc, #420]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a68      	ldr	r2, [pc, #416]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b66      	ldr	r3, [pc, #408]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a65      	ldr	r2, [pc, #404]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80028da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d013      	beq.n	8002910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7ff f88e 	bl	8001a08 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7ff f88a 	bl	8001a08 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	@ 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e207      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0xc0>
 800290e:	e014      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7ff f87a 	bl	8001a08 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002918:	f7ff f876 	bl	8001a08 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	@ 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e1f3      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	4b51      	ldr	r3, [pc, #324]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0xe8>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d063      	beq.n	8002a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00b      	beq.n	800296a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002952:	4b47      	ldr	r3, [pc, #284]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800295a:	2b08      	cmp	r3, #8
 800295c:	d11c      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295e:	4b44      	ldr	r3, [pc, #272]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d116      	bne.n	8002998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296a:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d001      	beq.n	8002982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e1c7      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002982:	4b3b      	ldr	r3, [pc, #236]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4937      	ldr	r1, [pc, #220]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002992:	4313      	orrs	r3, r2
 8002994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002996:	e03a      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a0:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <HAL_RCC_OscConfig+0x244>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7ff f82f 	bl	8001a08 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ae:	f7ff f82b 	bl	8001a08 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1a8      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029cc:	4b28      	ldr	r3, [pc, #160]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4925      	ldr	r1, [pc, #148]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
 80029e0:	e015      	b.n	8002a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e2:	4b24      	ldr	r3, [pc, #144]	@ (8002a74 <HAL_RCC_OscConfig+0x244>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7ff f80e 	bl	8001a08 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f0:	f7ff f80a 	bl	8001a08 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e187      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	4b1b      	ldr	r3, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d036      	beq.n	8002a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d016      	beq.n	8002a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <HAL_RCC_OscConfig+0x248>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe ffee 	bl	8001a08 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a30:	f7fe ffea 	bl	8001a08 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e167      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	@ (8002a70 <HAL_RCC_OscConfig+0x240>)
 8002a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x200>
 8002a4e:	e01b      	b.n	8002a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a50:	4b09      	ldr	r3, [pc, #36]	@ (8002a78 <HAL_RCC_OscConfig+0x248>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a56:	f7fe ffd7 	bl	8001a08 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	e00e      	b.n	8002a7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a5e:	f7fe ffd3 	bl	8001a08 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d907      	bls.n	8002a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e150      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
 8002a78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7c:	4b88      	ldr	r3, [pc, #544]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ea      	bne.n	8002a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8097 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9a:	4b81      	ldr	r3, [pc, #516]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b77      	ldr	r3, [pc, #476]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b74      	ldr	r3, [pc, #464]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a73      	ldr	r2, [pc, #460]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe ff93 	bl	8001a08 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe ff8f 	bl	8001a08 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e10c      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af8:	4b6a      	ldr	r3, [pc, #424]	@ (8002ca4 <HAL_RCC_OscConfig+0x474>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2ea>
 8002b0c:	4b64      	ldr	r3, [pc, #400]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b10:	4a63      	ldr	r2, [pc, #396]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b18:	e01c      	b.n	8002b54 <HAL_RCC_OscConfig+0x324>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x30c>
 8002b22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3a:	e00b      	b.n	8002b54 <HAL_RCC_OscConfig+0x324>
 8002b3c:	4b58      	ldr	r3, [pc, #352]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b40:	4a57      	ldr	r2, [pc, #348]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b42:	f023 0301 	bic.w	r3, r3, #1
 8002b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b48:	4b55      	ldr	r3, [pc, #340]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	f023 0304 	bic.w	r3, r3, #4
 8002b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d015      	beq.n	8002b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5c:	f7fe ff54 	bl	8001a08 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe ff50 	bl	8001a08 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e0cb      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7a:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ee      	beq.n	8002b64 <HAL_RCC_OscConfig+0x334>
 8002b86:	e014      	b.n	8002bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b88:	f7fe ff3e 	bl	8001a08 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8e:	e00a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fe ff3a 	bl	8001a08 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e0b5      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ee      	bne.n	8002b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d105      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb8:	4b39      	ldr	r3, [pc, #228]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a38      	ldr	r2, [pc, #224]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 80a1 	beq.w	8002d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bce:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d05c      	beq.n	8002c94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d141      	bne.n	8002c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe ff0e 	bl	8001a08 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe ff0a 	bl	8001a08 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e087      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69da      	ldr	r2, [r3, #28]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	041b      	lsls	r3, r3, #16
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	061b      	lsls	r3, r3, #24
 8002c32:	491b      	ldr	r1, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fe fee3 	bl	8001a08 <HAL_GetTick>
 8002c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c46:	f7fe fedf 	bl	8001a08 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e05c      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0f0      	beq.n	8002c46 <HAL_RCC_OscConfig+0x416>
 8002c64:	e054      	b.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCC_OscConfig+0x478>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fecc 	bl	8001a08 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c74:	f7fe fec8 	bl	8001a08 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e045      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <HAL_RCC_OscConfig+0x470>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x444>
 8002c92:	e03d      	b.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e038      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_RCC_OscConfig+0x4ec>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d028      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d121      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d11a      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cdc:	4013      	ands	r3, r2
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d111      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	085b      	lsrs	r3, r3, #1
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d107      	bne.n	8002d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e0cc      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d34:	4b68      	ldr	r3, [pc, #416]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d90c      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d42:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4a52      	ldr	r2, [pc, #328]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d044      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d119      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d107      	bne.n	8002dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dde:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e06f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dee:	4b3b      	ldr	r3, [pc, #236]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e067      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 0203 	bic.w	r2, r3, #3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4934      	ldr	r1, [pc, #208]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e10:	f7fe fdfa 	bl	8001a08 <HAL_GetTick>
 8002e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	e00a      	b.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e18:	f7fe fdf6 	bl	8001a08 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e04f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 020c 	and.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d1eb      	bne.n	8002e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e40:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d20c      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4e:	4b22      	ldr	r3, [pc, #136]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fd5a 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023c00 	.word	0x40023c00
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	08006640 	.word	0x08006640
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ef0:	b094      	sub	sp, #80	@ 0x50
 8002ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002efc:	2300      	movs	r3, #0
 8002efe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f04:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d00d      	beq.n	8002f2c <HAL_RCC_GetSysClockFreq+0x40>
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	f200 80e1 	bhi.w	80030d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x34>
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f1e:	e0db      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4b73      	ldr	r3, [pc, #460]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f24:	e0db      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f26:	4b73      	ldr	r3, [pc, #460]	@ (80030f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f2a:	e0d8      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f36:	4b6d      	ldr	r3, [pc, #436]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d063      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	4b6a      	ldr	r3, [pc, #424]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	2200      	movs	r2, #0
 8002f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f5e:	4622      	mov	r2, r4
 8002f60:	462b      	mov	r3, r5
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f04f 0100 	mov.w	r1, #0
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f70:	0150      	lsls	r0, r2, #5
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	4621      	mov	r1, r4
 8002f78:	1a51      	subs	r1, r2, r1
 8002f7a:	6139      	str	r1, [r7, #16]
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f90:	4659      	mov	r1, fp
 8002f92:	018b      	lsls	r3, r1, #6
 8002f94:	4651      	mov	r1, sl
 8002f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f9a:	4651      	mov	r1, sl
 8002f9c:	018a      	lsls	r2, r1, #6
 8002f9e:	4651      	mov	r1, sl
 8002fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fbe:	4690      	mov	r8, r2
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	eb18 0303 	adds.w	r3, r8, r3
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	462b      	mov	r3, r5
 8002fcc:	eb49 0303 	adc.w	r3, r9, r3
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fde:	4629      	mov	r1, r5
 8002fe0:	024b      	lsls	r3, r1, #9
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe8:	4621      	mov	r1, r4
 8002fea:	024a      	lsls	r2, r1, #9
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ffc:	f7fd fd78 	bl	8000af0 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003008:	e058      	b.n	80030bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800300a:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	2200      	movs	r2, #0
 8003012:	4618      	mov	r0, r3
 8003014:	4611      	mov	r1, r2
 8003016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800301a:	623b      	str	r3, [r7, #32]
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003024:	4642      	mov	r2, r8
 8003026:	464b      	mov	r3, r9
 8003028:	f04f 0000 	mov.w	r0, #0
 800302c:	f04f 0100 	mov.w	r1, #0
 8003030:	0159      	lsls	r1, r3, #5
 8003032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003036:	0150      	lsls	r0, r2, #5
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4641      	mov	r1, r8
 800303e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb63 0b01 	sbc.w	fp, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800305c:	ebb2 040a 	subs.w	r4, r2, sl
 8003060:	eb63 050b 	sbc.w	r5, r3, fp
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4643      	mov	r3, r8
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	464b      	mov	r3, r9
 8003080:	eb45 0303 	adc.w	r3, r5, r3
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800309c:	4621      	mov	r1, r4
 800309e:	028a      	lsls	r2, r1, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030a6:	2200      	movs	r2, #0
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	61fa      	str	r2, [r7, #28]
 80030ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030b0:	f7fd fd1e 	bl	8000af0 <__aeabi_uldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4613      	mov	r3, r2
 80030ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x200>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80030cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030d6:	e002      	b.n	80030de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80030da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3750      	adds	r7, #80	@ 0x50
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800
 80030f0:	00f42400 	.word	0x00f42400
 80030f4:	007a1200 	.word	0x007a1200

080030f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030fc:	4b03      	ldr	r3, [pc, #12]	@ (800310c <HAL_RCC_GetHCLKFreq+0x14>)
 80030fe:	681b      	ldr	r3, [r3, #0]
}
 8003100:	4618      	mov	r0, r3
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000

08003110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003114:	f7ff fff0 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	0a9b      	lsrs	r3, r3, #10
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4903      	ldr	r1, [pc, #12]	@ (8003134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800312c:	4618      	mov	r0, r3
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40023800 	.word	0x40023800
 8003134:	08006650 	.word	0x08006650

08003138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800313c:	f7ff ffdc 	bl	80030f8 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	@ (8003158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0b5b      	lsrs	r3, r3, #13
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	@ (800315c <HAL_RCC_GetPCLK2Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	08006650 	.word	0x08006650

08003160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e041      	b.n	80031f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe fa04 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fa7a 	bl	8003698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
	...

08003200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b01      	cmp	r3, #1
 8003212:	d001      	beq.n	8003218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e044      	b.n	80032a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d018      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x6c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003242:	d013      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x6c>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1a      	ldr	r2, [pc, #104]	@ (80032b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d00e      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x6c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a19      	ldr	r2, [pc, #100]	@ (80032b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d009      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x6c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <HAL_TIM_Base_Start_IT+0xbc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d004      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x6c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a16      	ldr	r2, [pc, #88]	@ (80032c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d111      	bne.n	8003290 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b06      	cmp	r3, #6
 800327c:	d010      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800328e:	e007      	b.n	80032a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40010000 	.word	0x40010000
 80032b4:	40000400 	.word	0x40000400
 80032b8:	40000800 	.word	0x40000800
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40014000 	.word	0x40014000

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0202 	mvn.w	r2, #2
 80032f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f9a3 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f995 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f9a6 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f97d 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f96f 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f980 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f957 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f949 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f95a 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f931 	bl	800365a <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f923 	bl	8003646 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f934 	bl	800366e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0201 	mvn.w	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f901 	bl	8003632 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fac0 	bl	80039d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f905 	bl	8003682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0220 	mvn.w	r2, #32
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa92 	bl	80039c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0b4      	b.n	800362a <HAL_TIM_ConfigClockSource+0x186>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f8:	d03e      	beq.n	8003578 <HAL_TIM_ConfigClockSource+0xd4>
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fe:	f200 8087 	bhi.w	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003506:	f000 8086 	beq.w	8003616 <HAL_TIM_ConfigClockSource+0x172>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350e:	d87f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b70      	cmp	r3, #112	@ 0x70
 8003512:	d01a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xa6>
 8003514:	2b70      	cmp	r3, #112	@ 0x70
 8003516:	d87b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b60      	cmp	r3, #96	@ 0x60
 800351a:	d050      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x11a>
 800351c:	2b60      	cmp	r3, #96	@ 0x60
 800351e:	d877      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b50      	cmp	r3, #80	@ 0x50
 8003522:	d03c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xfa>
 8003524:	2b50      	cmp	r3, #80	@ 0x50
 8003526:	d873      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d058      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x13a>
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d86f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b30      	cmp	r3, #48	@ 0x30
 8003532:	d064      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b30      	cmp	r3, #48	@ 0x30
 8003536:	d86b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d060      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d867      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d05a      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003548:	e062      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	f000 f9a3 	bl	80038a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800356c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	609a      	str	r2, [r3, #8]
      break;
 8003576:	e04f      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	f000 f98c 	bl	80038a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e03c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f900 	bl	80037b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2150      	movs	r1, #80	@ 0x50
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f959 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 80035bc:	e02c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 f91f 	bl	800380e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2160      	movs	r1, #96	@ 0x60
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f949 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 80035dc:	e01c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 f8e0 	bl	80037b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	@ 0x40
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f939 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 f930 	bl	800386e <TIM_ITRx_SetConfig>
      break;
 800360e:	e003      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e000      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a3a      	ldr	r2, [pc, #232]	@ (8003794 <TIM_Base_SetConfig+0xfc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00f      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b6:	d00b      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a37      	ldr	r2, [pc, #220]	@ (8003798 <TIM_Base_SetConfig+0x100>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d007      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a36      	ldr	r2, [pc, #216]	@ (800379c <TIM_Base_SetConfig+0x104>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d003      	beq.n	80036d0 <TIM_Base_SetConfig+0x38>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <TIM_Base_SetConfig+0x108>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <TIM_Base_SetConfig+0xfc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f0:	d017      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a28      	ldr	r2, [pc, #160]	@ (8003798 <TIM_Base_SetConfig+0x100>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a27      	ldr	r2, [pc, #156]	@ (800379c <TIM_Base_SetConfig+0x104>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00f      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a26      	ldr	r2, [pc, #152]	@ (80037a0 <TIM_Base_SetConfig+0x108>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00b      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a25      	ldr	r2, [pc, #148]	@ (80037a4 <TIM_Base_SetConfig+0x10c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <TIM_Base_SetConfig+0x110>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d003      	beq.n	8003722 <TIM_Base_SetConfig+0x8a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a23      	ldr	r2, [pc, #140]	@ (80037ac <TIM_Base_SetConfig+0x114>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d108      	bne.n	8003734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <TIM_Base_SetConfig+0xfc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 0201 	bic.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]
  }
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	40014800 	.word	0x40014800

080037b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f023 0201 	bic.w	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f023 030a 	bic.w	r3, r3, #10
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800380e:	b480      	push	{r7}
 8003810:	b087      	sub	sp, #28
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 0210 	bic.w	r2, r3, #16
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800384a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	bf00      	nop
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003884:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	f043 0307 	orr.w	r3, r3, #7
 8003890:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e050      	b.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a1c      	ldr	r2, [pc, #112]	@ (80039ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d018      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003948:	d013      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00e      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d009      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a15      	ldr	r2, [pc, #84]	@ (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d004      	beq.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d10c      	bne.n	800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400
 80039b4:	40000800 	.word	0x40000800
 80039b8:	40000c00 	.word	0x40000c00
 80039bc:	40014000 	.word	0x40014000

080039c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fe74 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	@ 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 f851 	bl	8004ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	@ 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d175      	bne.n	8003b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Transmit+0x2c>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	@ 0x21
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd ff9f 	bl	8001a08 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e02e      	b.n	8003b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	@ 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fd2a 	bl	8004562 <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e03a      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cb      	bne.n	8003afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	@ 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fcf6 	bl	8004562 <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	@ 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d156      	bne.n	8003c68 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <HAL_UART_Transmit_DMA+0x26>
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e04f      	b.n	8003c6a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2221      	movs	r2, #33	@ 0x21
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	4a21      	ldr	r2, [pc, #132]	@ (8003c74 <HAL_UART_Transmit_DMA+0xd4>)
 8003bf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	4a20      	ldr	r2, [pc, #128]	@ (8003c78 <HAL_UART_Transmit_DMA+0xd8>)
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <HAL_UART_Transmit_DMA+0xdc>)
 8003c00:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c06:	2200      	movs	r2, #0
 8003c08:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	6819      	ldr	r1, [r3, #0]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	461a      	mov	r2, r3
 8003c20:	88fb      	ldrh	r3, [r7, #6]
 8003c22:	f7fe f8e1 	bl	8001de8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	e853 3f00 	ldrex	r3, [r3]
 8003c3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3314      	adds	r3, #20
 8003c4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6a39      	ldr	r1, [r7, #32]
 8003c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e5      	bne.n	8003c30 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3730      	adds	r7, #48	@ 0x30
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	080042b1 	.word	0x080042b1
 8003c78:	0800434b 	.word	0x0800434b
 8003c7c:	080044cf 	.word	0x080044cf

08003c80 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	@ 0x30
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	d14a      	bne.n	8003d30 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e043      	b.n	8003d32 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68b9      	ldr	r1, [r7, #8]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fca9 	bl	8004614 <UART_Start_Receive_DMA>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d12c      	bne.n	8003d2a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d125      	bne.n	8003d24 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f043 0310 	orr.w	r3, r3, #16
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6a39      	ldr	r1, [r7, #32]
 8003d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e5      	bne.n	8003cee <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8003d22:	e002      	b.n	8003d2a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8003d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003d2e:	e000      	b.n	8003d32 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3730      	adds	r7, #48	@ 0x30
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_UART_IRQHandler+0x66>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d92:	f003 0320 	and.w	r3, r3, #32
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 fddb 	bl	8004956 <UART_Receive_IT>
      return;
 8003da0:	e25b      	b.n	800425a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003da2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80de 	beq.w	8003f68 <HAL_UART_IRQHandler+0x22c>
 8003dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80d1 	beq.w	8003f68 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_UART_IRQHandler+0xae>
 8003dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	f043 0201 	orr.w	r2, r3, #1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_UART_IRQHandler+0xd2>
 8003df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf6>
 8003e1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f043 0204 	orr.w	r2, r3, #4
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e36:	f003 0308 	and.w	r3, r3, #8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d011      	beq.n	8003e62 <HAL_UART_IRQHandler+0x126>
 8003e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d105      	bne.n	8003e56 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5a:	f043 0208 	orr.w	r2, r3, #8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 81f2 	beq.w	8004250 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_UART_IRQHandler+0x14e>
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fd66 	bl	8004956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e94:	2b40      	cmp	r3, #64	@ 0x40
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x17a>
 8003eae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d04f      	beq.n	8003f56 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fc6e 	bl	8004798 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d141      	bne.n	8003f4e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3314      	adds	r3, #20
 8003ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ee0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ee4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	3314      	adds	r3, #20
 8003ef2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ef6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003efa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1d9      	bne.n	8003eca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d013      	beq.n	8003f46 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	4a7e      	ldr	r2, [pc, #504]	@ (800411c <HAL_UART_IRQHandler+0x3e0>)
 8003f24:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7fe f824 	bl	8001f78 <HAL_DMA_Abort_IT>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d016      	beq.n	8003f64 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f40:	4610      	mov	r0, r2
 8003f42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f44:	e00e      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f9a8 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4c:	e00a      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f9a4 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f54:	e006      	b.n	8003f64 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f9a0 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f62:	e175      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	bf00      	nop
    return;
 8003f66:	e173      	b.n	8004250 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f040 814f 	bne.w	8004210 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8148 	beq.w	8004210 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8141 	beq.w	8004210 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fae:	2b40      	cmp	r3, #64	@ 0x40
 8003fb0:	f040 80b6 	bne.w	8004120 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8145 	beq.w	8004254 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	f080 813e 	bcs.w	8004254 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fde:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fea:	f000 8088 	beq.w	80040fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	330c      	adds	r3, #12
 8003ff4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004004:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800400c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	330c      	adds	r3, #12
 8004016:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800401a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800401e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004026:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004032:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1d9      	bne.n	8003fee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3314      	adds	r3, #20
 8004040:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800404a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3314      	adds	r3, #20
 800405a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800405e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004062:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004066:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004070:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e1      	bne.n	800403a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004086:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004088:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800408c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800409a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800409c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e3      	bne.n	8004076 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	330c      	adds	r3, #12
 80040c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040ce:	f023 0310 	bic.w	r3, r3, #16
 80040d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fd fecd 	bl	8001e98 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800410c:	b29b      	uxth	r3, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	b29b      	uxth	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fd fbbd 	bl	8001894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800411a:	e09b      	b.n	8004254 <HAL_UART_IRQHandler+0x518>
 800411c:	0800485f 	.word	0x0800485f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004128:	b29b      	uxth	r3, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 808e 	beq.w	8004258 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800413c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 8089 	beq.w	8004258 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800415c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800416a:	647a      	str	r2, [r7, #68]	@ 0x44
 800416c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e3      	bne.n	8004146 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3314      	adds	r3, #20
 8004184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	623b      	str	r3, [r7, #32]
   return(result);
 800418e:	6a3b      	ldr	r3, [r7, #32]
 8004190:	f023 0301 	bic.w	r3, r3, #1
 8004194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3314      	adds	r3, #20
 800419e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80041a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e3      	bne.n	800417e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	330c      	adds	r3, #12
 80041ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	e853 3f00 	ldrex	r3, [r3]
 80041d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0310 	bic.w	r3, r3, #16
 80041da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80041e8:	61fa      	str	r2, [r7, #28]
 80041ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	617b      	str	r3, [r7, #20]
   return(result);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e3      	bne.n	80041c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004202:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004206:	4619      	mov	r1, r3
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fd fb43 	bl	8001894 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800420e:	e023      	b.n	8004258 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d009      	beq.n	8004230 <HAL_UART_IRQHandler+0x4f4>
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb2c 	bl	8004886 <UART_Transmit_IT>
    return;
 800422e:	e014      	b.n	800425a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <HAL_UART_IRQHandler+0x51e>
 800423c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004244:	2b00      	cmp	r3, #0
 8004246:	d008      	beq.n	800425a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fb6c 	bl	8004926 <UART_EndTransmit_IT>
    return;
 800424e:	e004      	b.n	800425a <HAL_UART_IRQHandler+0x51e>
    return;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <HAL_UART_IRQHandler+0x51e>
      return;
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_UART_IRQHandler+0x51e>
      return;
 8004258:	bf00      	nop
  }
}
 800425a:	37e8      	adds	r7, #232	@ 0xe8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b090      	sub	sp, #64	@ 0x40
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d137      	bne.n	800433c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80042cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ce:	2200      	movs	r2, #0
 80042d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	623b      	str	r3, [r7, #32]
   return(result);
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80042ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e5      	bne.n	80042d2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	60fb      	str	r3, [r7, #12]
   return(result);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800431c:	637b      	str	r3, [r7, #52]	@ 0x34
 800431e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	330c      	adds	r3, #12
 8004324:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004326:	61fa      	str	r2, [r7, #28]
 8004328:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	617b      	str	r3, [r7, #20]
   return(result);
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e5      	bne.n	8004306 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433a:	e002      	b.n	8004342 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800433c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800433e:	f7fd fa93 	bl	8001868 <HAL_UART_TxCpltCallback>
}
 8004342:	bf00      	nop
 8004344:	3740      	adds	r7, #64	@ 0x40
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff ff81 	bl	8004260 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b09c      	sub	sp, #112	@ 0x70
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004372:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d172      	bne.n	8004468 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004384:	2200      	movs	r2, #0
 8004386:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	330c      	adds	r3, #12
 800438e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800439a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800439e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	330c      	adds	r3, #12
 80043a6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80043a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e5      	bne.n	8004388 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3314      	adds	r3, #20
 80043c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80043d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3314      	adds	r3, #20
 80043da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80043dc:	647a      	str	r2, [r7, #68]	@ 0x44
 80043de:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004406:	663b      	str	r3, [r7, #96]	@ 0x60
 8004408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004410:	633a      	str	r2, [r7, #48]	@ 0x30
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800441e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	2b01      	cmp	r3, #1
 8004432:	d119      	bne.n	8004468 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	60fb      	str	r3, [r7, #12]
   return(result);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0310 	bic.w	r3, r3, #16
 800444a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800444c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004454:	61fa      	str	r2, [r7, #28]
 8004456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	69b9      	ldr	r1, [r7, #24]
 800445a:	69fa      	ldr	r2, [r7, #28]
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	617b      	str	r3, [r7, #20]
   return(result);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e5      	bne.n	8004434 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446a:	2200      	movs	r2, #0
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800446e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	2b01      	cmp	r3, #1
 8004474:	d106      	bne.n	8004484 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800447a:	4619      	mov	r1, r3
 800447c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800447e:	f7fd fa09 	bl	8001894 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004482:	e002      	b.n	800448a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004484:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004486:	f7ff fef5 	bl	8004274 <HAL_UART_RxCpltCallback>
}
 800448a:	bf00      	nop
 800448c:	3770      	adds	r7, #112	@ 0x70
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d108      	bne.n	80044c0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	4619      	mov	r1, r3
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f7fd f9eb 	bl	8001894 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044be:	e002      	b.n	80044c6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f7ff fee1 	bl	8004288 <HAL_UART_RxHalfCpltCallback>
}
 80044c6:	bf00      	nop
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	bf0c      	ite	eq
 80044ee:	2301      	moveq	r3, #1
 80044f0:	2300      	movne	r3, #0
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b21      	cmp	r3, #33	@ 0x21
 8004500:	d108      	bne.n	8004514 <UART_DMAError+0x46>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f000 f91a 	bl	8004748 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451e:	2b40      	cmp	r3, #64	@ 0x40
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b22      	cmp	r3, #34	@ 0x22
 8004534:	d108      	bne.n	8004548 <UART_DMAError+0x7a>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004542:	68b8      	ldr	r0, [r7, #8]
 8004544:	f000 f928 	bl	8004798 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f7ff fea1 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004572:	e03b      	b.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d037      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800457c:	f7fd fa44 	bl	8001a08 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	6a3a      	ldr	r2, [r7, #32]
 8004588:	429a      	cmp	r2, r3
 800458a:	d302      	bcc.n	8004592 <UART_WaitOnFlagUntilTimeout+0x30>
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e03a      	b.n	800460c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d023      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b80      	cmp	r3, #128	@ 0x80
 80045a8:	d020      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b40      	cmp	r3, #64	@ 0x40
 80045ae:	d01d      	beq.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d116      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f8df 	bl	8004798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2208      	movs	r2, #8
 80045de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e00f      	b.n	800460c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d0b4      	beq.n	8004574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b098      	sub	sp, #96	@ 0x60
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004622:	68ba      	ldr	r2, [r7, #8]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2222      	movs	r2, #34	@ 0x22
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004640:	4a3e      	ldr	r2, [pc, #248]	@ (800473c <UART_Start_Receive_DMA+0x128>)
 8004642:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	4a3d      	ldr	r2, [pc, #244]	@ (8004740 <UART_Start_Receive_DMA+0x12c>)
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004650:	4a3c      	ldr	r2, [pc, #240]	@ (8004744 <UART_Start_Receive_DMA+0x130>)
 8004652:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004658:	2200      	movs	r2, #0
 800465a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800465c:	f107 0308 	add.w	r3, r7, #8
 8004660:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f7fd fbb8 	bl	8001de8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d019      	beq.n	80046ca <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	330c      	adds	r3, #12
 80046b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80046bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046dc:	f043 0301 	orr.w	r3, r3, #1
 80046e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046ea:	63ba      	str	r2, [r7, #56]	@ 0x38
 80046ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80046f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3314      	adds	r3, #20
 8004704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	e853 3f00 	ldrex	r3, [r3]
 800470c:	617b      	str	r3, [r7, #20]
   return(result);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004714:	653b      	str	r3, [r7, #80]	@ 0x50
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800471e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004722:	6a39      	ldr	r1, [r7, #32]
 8004724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004726:	e841 2300 	strex	r3, r2, [r1]
 800472a:	61fb      	str	r3, [r7, #28]
   return(result);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1e5      	bne.n	80046fe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3760      	adds	r7, #96	@ 0x60
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08004367 	.word	0x08004367
 8004740:	08004493 	.word	0x08004493
 8004744:	080044cf 	.word	0x080044cf

08004748 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b089      	sub	sp, #36	@ 0x24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004766:	61fb      	str	r3, [r7, #28]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	61ba      	str	r2, [r7, #24]
 8004772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	613b      	str	r3, [r7, #16]
   return(result);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800478c:	bf00      	nop
 800478e:	3724      	adds	r7, #36	@ 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b095      	sub	sp, #84	@ 0x54
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047c0:	643a      	str	r2, [r7, #64]	@ 0x40
 80047c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3314      	adds	r3, #20
 80047da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	e853 3f00 	ldrex	r3, [r3]
 80047e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3314      	adds	r3, #20
 80047f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e5      	bne.n	80047d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d119      	bne.n	8004844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	330c      	adds	r3, #12
 8004816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0310 	bic.w	r3, r3, #16
 8004826:	647b      	str	r3, [r7, #68]	@ 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004830:	61ba      	str	r2, [r7, #24]
 8004832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e5      	bne.n	8004810 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004852:	bf00      	nop
 8004854:	3754      	adds	r7, #84	@ 0x54
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f7ff fd0f 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b21      	cmp	r3, #33	@ 0x21
 8004898:	d13e      	bne.n	8004918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048a2:	d114      	bne.n	80048ce <UART_Transmit_IT+0x48>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	1c9a      	adds	r2, r3, #2
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]
 80048cc:	e008      	b.n	80048e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1c59      	adds	r1, r3, #1
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6211      	str	r1, [r2, #32]
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	3b01      	subs	r3, #1
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4619      	mov	r1, r3
 80048ee:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10f      	bne.n	8004914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b082      	sub	sp, #8
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800493c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7fc ff8e 	bl	8001868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08c      	sub	sp, #48	@ 0x30
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b22      	cmp	r3, #34	@ 0x22
 8004968:	f040 80ae 	bne.w	8004ac8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004974:	d117      	bne.n	80049a6 <UART_Receive_IT+0x50>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d113      	bne.n	80049a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800497e:	2300      	movs	r3, #0
 8004980:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	b29a      	uxth	r2, r3
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	1c9a      	adds	r2, r3, #2
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80049a4:	e026      	b.n	80049f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80049ac:	2300      	movs	r3, #0
 80049ae:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b8:	d007      	beq.n	80049ca <UART_Receive_IT+0x74>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <UART_Receive_IT+0x82>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	e008      	b.n	80049ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d15d      	bne.n	8004ac4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0220 	bic.w	r2, r2, #32
 8004a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d135      	bne.n	8004aba <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	613b      	str	r3, [r7, #16]
   return(result);
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f023 0310 	bic.w	r3, r3, #16
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a74:	623a      	str	r2, [r7, #32]
 8004a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e5      	bne.n	8004a54 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d10a      	bne.n	8004aac <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc feee 	bl	8001894 <HAL_UARTEx_RxEventCallback>
 8004ab8:	e002      	b.n	8004ac0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fbda 	bl	8004274 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e002      	b.n	8004aca <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ac8:	2302      	movs	r3, #2
  }
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3730      	adds	r7, #48	@ 0x30
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b0c0      	sub	sp, #256	@ 0x100
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af0:	68d9      	ldr	r1, [r3, #12]
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	ea40 0301 	orr.w	r3, r0, r1
 8004afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b2c:	f021 010c 	bic.w	r1, r1, #12
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4e:	6999      	ldr	r1, [r3, #24]
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	ea40 0301 	orr.w	r3, r0, r1
 8004b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8f      	ldr	r3, [pc, #572]	@ (8004da0 <UART_SetConfig+0x2cc>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d005      	beq.n	8004b74 <UART_SetConfig+0xa0>
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4b8d      	ldr	r3, [pc, #564]	@ (8004da4 <UART_SetConfig+0x2d0>)
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d104      	bne.n	8004b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fe fae0 	bl	8003138 <HAL_RCC_GetPCLK2Freq>
 8004b78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b7c:	e003      	b.n	8004b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7e:	f7fe fac7 	bl	8003110 <HAL_RCC_GetPCLK1Freq>
 8004b82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b90:	f040 810c 	bne.w	8004dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ba6:	4622      	mov	r2, r4
 8004ba8:	462b      	mov	r3, r5
 8004baa:	1891      	adds	r1, r2, r2
 8004bac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004bae:	415b      	adcs	r3, r3
 8004bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	eb12 0801 	adds.w	r8, r2, r1
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	eb43 0901 	adc.w	r9, r3, r1
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	4699      	mov	r9, r3
 8004bda:	4623      	mov	r3, r4
 8004bdc:	eb18 0303 	adds.w	r3, r8, r3
 8004be0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004be4:	462b      	mov	r3, r5
 8004be6:	eb49 0303 	adc.w	r3, r9, r3
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c02:	460b      	mov	r3, r1
 8004c04:	18db      	adds	r3, r3, r3
 8004c06:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c08:	4613      	mov	r3, r2
 8004c0a:	eb42 0303 	adc.w	r3, r2, r3
 8004c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c18:	f7fb ff6a 	bl	8000af0 <__aeabi_uldivmod>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	460b      	mov	r3, r1
 8004c20:	4b61      	ldr	r3, [pc, #388]	@ (8004da8 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2302 	umull	r2, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	011c      	lsls	r4, r3, #4
 8004c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	464b      	mov	r3, r9
 8004c40:	1891      	adds	r1, r2, r2
 8004c42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c44:	415b      	adcs	r3, r3
 8004c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8004c52:	4649      	mov	r1, r9
 8004c54:	eb43 0b01 	adc.w	fp, r3, r1
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c6c:	4692      	mov	sl, r2
 8004c6e:	469b      	mov	fp, r3
 8004c70:	4643      	mov	r3, r8
 8004c72:	eb1a 0303 	adds.w	r3, sl, r3
 8004c76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	18db      	adds	r3, r3, r3
 8004c9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004cae:	f7fb ff1f 	bl	8000af0 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4b3b      	ldr	r3, [pc, #236]	@ (8004da8 <UART_SetConfig+0x2d4>)
 8004cba:	fba3 2301 	umull	r2, r3, r3, r1
 8004cbe:	095b      	lsrs	r3, r3, #5
 8004cc0:	2264      	movs	r2, #100	@ 0x64
 8004cc2:	fb02 f303 	mul.w	r3, r2, r3
 8004cc6:	1acb      	subs	r3, r1, r3
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cce:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <UART_SetConfig+0x2d4>)
 8004cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cdc:	441c      	add	r4, r3
 8004cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004cf0:	4642      	mov	r2, r8
 8004cf2:	464b      	mov	r3, r9
 8004cf4:	1891      	adds	r1, r2, r2
 8004cf6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cf8:	415b      	adcs	r3, r3
 8004cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d00:	4641      	mov	r1, r8
 8004d02:	1851      	adds	r1, r2, r1
 8004d04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d06:	4649      	mov	r1, r9
 8004d08:	414b      	adcs	r3, r1
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d0c:	f04f 0200 	mov.w	r2, #0
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d18:	4659      	mov	r1, fp
 8004d1a:	00cb      	lsls	r3, r1, #3
 8004d1c:	4651      	mov	r1, sl
 8004d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d22:	4651      	mov	r1, sl
 8004d24:	00ca      	lsls	r2, r1, #3
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d34:	464b      	mov	r3, r9
 8004d36:	460a      	mov	r2, r1
 8004d38:	eb42 0303 	adc.w	r3, r2, r3
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d54:	460b      	mov	r3, r1
 8004d56:	18db      	adds	r3, r3, r3
 8004d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d6a:	f7fb fec1 	bl	8000af0 <__aeabi_uldivmod>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4b0d      	ldr	r3, [pc, #52]	@ (8004da8 <UART_SetConfig+0x2d4>)
 8004d74:	fba3 1302 	umull	r1, r3, r3, r2
 8004d78:	095b      	lsrs	r3, r3, #5
 8004d7a:	2164      	movs	r1, #100	@ 0x64
 8004d7c:	fb01 f303 	mul.w	r3, r1, r3
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	3332      	adds	r3, #50	@ 0x32
 8004d86:	4a08      	ldr	r2, [pc, #32]	@ (8004da8 <UART_SetConfig+0x2d4>)
 8004d88:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	f003 0207 	and.w	r2, r3, #7
 8004d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4422      	add	r2, r4
 8004d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d9c:	e106      	b.n	8004fac <UART_SetConfig+0x4d8>
 8004d9e:	bf00      	nop
 8004da0:	40011000 	.word	0x40011000
 8004da4:	40011400 	.word	0x40011400
 8004da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004db6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	6239      	str	r1, [r7, #32]
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dce:	4641      	mov	r1, r8
 8004dd0:	1854      	adds	r4, r2, r1
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	eb43 0501 	adc.w	r5, r3, r1
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	00eb      	lsls	r3, r5, #3
 8004de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004de6:	00e2      	lsls	r2, r4, #3
 8004de8:	4614      	mov	r4, r2
 8004dea:	461d      	mov	r5, r3
 8004dec:	4643      	mov	r3, r8
 8004dee:	18e3      	adds	r3, r4, r3
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004df4:	464b      	mov	r3, r9
 8004df6:	eb45 0303 	adc.w	r3, r5, r3
 8004dfa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	008b      	lsls	r3, r1, #2
 8004e1e:	4621      	mov	r1, r4
 8004e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e24:	4621      	mov	r1, r4
 8004e26:	008a      	lsls	r2, r1, #2
 8004e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e2c:	f7fb fe60 	bl	8000af0 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4b60      	ldr	r3, [pc, #384]	@ (8004fb8 <UART_SetConfig+0x4e4>)
 8004e36:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	011c      	lsls	r4, r3, #4
 8004e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e50:	4642      	mov	r2, r8
 8004e52:	464b      	mov	r3, r9
 8004e54:	1891      	adds	r1, r2, r2
 8004e56:	61b9      	str	r1, [r7, #24]
 8004e58:	415b      	adcs	r3, r3
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e60:	4641      	mov	r1, r8
 8004e62:	1851      	adds	r1, r2, r1
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	4649      	mov	r1, r9
 8004e68:	414b      	adcs	r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	00cb      	lsls	r3, r1, #3
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e82:	4651      	mov	r1, sl
 8004e84:	00ca      	lsls	r2, r1, #3
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	189b      	adds	r3, r3, r2
 8004e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e94:	464b      	mov	r3, r9
 8004e96:	460a      	mov	r2, r1
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004eaa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004eac:	f04f 0200 	mov.w	r2, #0
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004eb8:	4649      	mov	r1, r9
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	008a      	lsls	r2, r1, #2
 8004ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004eca:	f7fb fe11 	bl	8000af0 <__aeabi_uldivmod>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4b38      	ldr	r3, [pc, #224]	@ (8004fb8 <UART_SetConfig+0x4e4>)
 8004ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2264      	movs	r2, #100	@ 0x64
 8004ede:	fb02 f303 	mul.w	r3, r2, r3
 8004ee2:	1acb      	subs	r3, r1, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	@ 0x32
 8004ee8:	4a33      	ldr	r2, [pc, #204]	@ (8004fb8 <UART_SetConfig+0x4e4>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004efe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f04:	4642      	mov	r2, r8
 8004f06:	464b      	mov	r3, r9
 8004f08:	1891      	adds	r1, r2, r2
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	415b      	adcs	r3, r3
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f14:	4641      	mov	r1, r8
 8004f16:	1851      	adds	r1, r2, r1
 8004f18:	6039      	str	r1, [r7, #0]
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	414b      	adcs	r3, r1
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4651      	mov	r1, sl
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4651      	mov	r1, sl
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4642      	mov	r2, r8
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f46:	464b      	mov	r3, r9
 8004f48:	460a      	mov	r2, r1
 8004f4a:	eb42 0303 	adc.w	r3, r2, r3
 8004f4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f68:	4649      	mov	r1, r9
 8004f6a:	008b      	lsls	r3, r1, #2
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f72:	4641      	mov	r1, r8
 8004f74:	008a      	lsls	r2, r1, #2
 8004f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f7a:	f7fb fdb9 	bl	8000af0 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4b0d      	ldr	r3, [pc, #52]	@ (8004fb8 <UART_SetConfig+0x4e4>)
 8004f84:	fba3 1302 	umull	r1, r3, r3, r2
 8004f88:	095b      	lsrs	r3, r3, #5
 8004f8a:	2164      	movs	r1, #100	@ 0x64
 8004f8c:	fb01 f303 	mul.w	r3, r1, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	3332      	adds	r3, #50	@ 0x32
 8004f96:	4a08      	ldr	r2, [pc, #32]	@ (8004fb8 <UART_SetConfig+0x4e4>)
 8004f98:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9c:	095b      	lsrs	r3, r3, #5
 8004f9e:	f003 020f 	and.w	r2, r3, #15
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4422      	add	r2, r4
 8004faa:	609a      	str	r2, [r3, #8]
}
 8004fac:	bf00      	nop
 8004fae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fb8:	51eb851f 	.word	0x51eb851f

08004fbc <putData>:
{
  digitron_buf[numb] = section;
}


void putData(uint8_t segments) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e013      	b.n	8004ff4 <putData+0x38>
        HAL_GPIO_WritePin(HC595[0].port, HC595[0].pin, (segments >> (7-i)) & 0x01);
 8004fcc:	480d      	ldr	r0, [pc, #52]	@ (8005004 <putData+0x48>)
 8004fce:	2108      	movs	r1, #8
 8004fd0:	79fa      	ldrb	r2, [r7, #7]
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	f1c3 0307 	rsb	r3, r3, #7
 8004fd8:	fa42 f303 	asr.w	r3, r2, r3
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	f7fd fbef 	bl	80027c8 <HAL_GPIO_WritePin>
        sftClk();
 8004fea:	f000 f80d 	bl	8005008 <sftClk>
    for(uint8_t i = 0; i < 8; i++) {
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b07      	cmp	r3, #7
 8004ff8:	d9e8      	bls.n	8004fcc <putData+0x10>
    }
}
 8004ffa:	bf00      	nop
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40020400 	.word	0x40020400

08005008 <sftClk>:

//给PB5引脚一个上升沿
void sftClk(void){
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC595[2].port, HC595[2].pin, RESET);
 800500c:	4b06      	ldr	r3, [pc, #24]	@ (8005028 <sftClk+0x20>)
 800500e:	2120      	movs	r1, #32
 8005010:	2200      	movs	r2, #0
 8005012:	4618      	mov	r0, r3
 8005014:	f7fd fbd8 	bl	80027c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC595[2].port, HC595[2].pin, SET);
 8005018:	4b03      	ldr	r3, [pc, #12]	@ (8005028 <sftClk+0x20>)
 800501a:	2120      	movs	r1, #32
 800501c:	2201      	movs	r2, #1
 800501e:	4618      	mov	r0, r3
 8005020:	f7fd fbd2 	bl	80027c8 <HAL_GPIO_WritePin>
}
 8005024:	bf00      	nop
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40020400 	.word	0x40020400

0800502c <latchClk>:

//给PB4引脚一个上升沿
void latchClk(void){
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC595[1].port, HC595[1].pin, RESET);
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <latchClk+0x20>)
 8005032:	2110      	movs	r1, #16
 8005034:	2200      	movs	r2, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fbc6 	bl	80027c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC595[1].port, HC595[1].pin, SET);
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <latchClk+0x20>)
 800503e:	2110      	movs	r1, #16
 8005040:	2201      	movs	r2, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fbc0 	bl	80027c8 <HAL_GPIO_WritePin>
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40020400 	.word	0x40020400

08005050 <chooseDigitron>:

/*----------------------实现数码管段选后显示任意一段-------------------------------*/
void chooseDigitron(uint8_t position){
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < 3; i++){
 800505a:	2300      	movs	r3, #0
 800505c:	81fb      	strh	r3, [r7, #14]
 800505e:	e016      	b.n	800508e <chooseDigitron+0x3e>
		HAL_GPIO_WritePin(HC183[i].port, HC183[i].pin, (position >> i) & 0x01);
 8005060:	89fb      	ldrh	r3, [r7, #14]
 8005062:	4a0f      	ldr	r2, [pc, #60]	@ (80050a0 <chooseDigitron+0x50>)
 8005064:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005068:	89fb      	ldrh	r3, [r7, #14]
 800506a:	4a0d      	ldr	r2, [pc, #52]	@ (80050a0 <chooseDigitron+0x50>)
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	8899      	ldrh	r1, [r3, #4]
 8005072:	79fa      	ldrb	r2, [r7, #7]
 8005074:	89fb      	ldrh	r3, [r7, #14]
 8005076:	fa42 f303 	asr.w	r3, r2, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	f7fd fba0 	bl	80027c8 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 3; i++){
 8005088:	89fb      	ldrh	r3, [r7, #14]
 800508a:	3301      	adds	r3, #1
 800508c:	81fb      	strh	r3, [r7, #14]
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d9e5      	bls.n	8005060 <chooseDigitron+0x10>
	}
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	08006660 	.word	0x08006660

080050a4 <displayToken>:



/*----------------------更新显示到缓冲区----------------------*/
void displayToken(uint8_t n, uint8_t section) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	460a      	mov	r2, r1
 80050ae:	71fb      	strb	r3, [r7, #7]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(0.5);
 80050b4:	2000      	movs	r0, #0
 80050b6:	f7fc fcb3 	bl	8001a20 <HAL_Delay>
	putData(section);
 80050ba:	79bb      	ldrb	r3, [r7, #6]
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff7d 	bl	8004fbc <putData>
	latchClk();
 80050c2:	f7ff ffb3 	bl	800502c <latchClk>
    chooseDigitron(n);
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ffc1 	bl	8005050 <chooseDigitron>

}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <keyInit>:
static enum KEY key = KEY_NULL;


/*----------初始化按键----------------*/

void keyInit(void){
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80050dc:	4802      	ldr	r0, [pc, #8]	@ (80050e8 <keyInit+0x10>)
 80050de:	f7fe f88f 	bl	8003200 <HAL_TIM_Base_Start_IT>

}
 80050e2:	bf00      	nop
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000088 	.word	0x20000088

080050ec <keyRead>:

/*---------读取按键值---------------*/
enum KEY keyRead(){
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	enum KEY k;
	if(key >= KEY_UP_SHORT)
 80050f2:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <keyRead+0x2c>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d903      	bls.n	8005102 <keyRead+0x16>
	{
		k = key;
 80050fa:	4b07      	ldr	r3, [pc, #28]	@ (8005118 <keyRead+0x2c>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	71fb      	strb	r3, [r7, #7]
 8005100:	e002      	b.n	8005108 <keyRead+0x1c>
	}
	else
		{
			k = key;
 8005102:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <keyRead+0x2c>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	71fb      	strb	r3, [r7, #7]
		}
	return k;
 8005108:	79fb      	ldrb	r3, [r7, #7]
}
 800510a:	4618      	mov	r0, r3
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	20000258 	.word	0x20000258

0800511c <keyResponse>:

/*---------按键响应函数------------*/
void keyResponse(){
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
	static uint32_t currentTic = 0;
	static uint32_t lastTic = 0;
	static uint8_t keyIndex = 0;
	currentTic++;
 8005122:	4b58      	ldr	r3, [pc, #352]	@ (8005284 <keyResponse+0x168>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3301      	adds	r3, #1
 8005128:	4a56      	ldr	r2, [pc, #344]	@ (8005284 <keyResponse+0x168>)
 800512a:	6013      	str	r3, [r2, #0]
	switch(key){
 800512c:	4b56      	ldr	r3, [pc, #344]	@ (8005288 <keyResponse+0x16c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b02      	cmp	r3, #2
 8005132:	f000 8082 	beq.w	800523a <keyResponse+0x11e>
 8005136:	2b02      	cmp	r3, #2
 8005138:	f300 8094 	bgt.w	8005264 <keyResponse+0x148>
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <keyResponse+0x2a>
 8005140:	2b01      	cmp	r3, #1
 8005142:	d03e      	beq.n	80051c2 <keyResponse+0xa6>
 8005144:	e08e      	b.n	8005264 <keyResponse+0x148>
	case KEY_NULL:
		for(uint8_t i = 0; i<NUM_KEYS; i++){
 8005146:	2300      	movs	r3, #0
 8005148:	71fb      	strb	r3, [r7, #7]
 800514a:	e035      	b.n	80051b8 <keyResponse+0x9c>
			if(i != 0)
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d017      	beq.n	8005182 <keyResponse+0x66>
				{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 0)
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	4a4d      	ldr	r2, [pc, #308]	@ (800528c <keyResponse+0x170>)
 8005156:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	494b      	ldr	r1, [pc, #300]	@ (800528c <keyResponse+0x170>)
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	440b      	add	r3, r1
 8005162:	889b      	ldrh	r3, [r3, #4]
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f7fd fb16 	bl	8002798 <HAL_GPIO_ReadPin>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11f      	bne.n	80051b2 <keyResponse+0x96>
					{
						key = KEY_DOWN;		//记录按键被按下
 8005172:	4b45      	ldr	r3, [pc, #276]	@ (8005288 <keyResponse+0x16c>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
						lastTic = currentTic;
 8005178:	4b42      	ldr	r3, [pc, #264]	@ (8005284 <keyResponse+0x168>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a44      	ldr	r2, [pc, #272]	@ (8005290 <keyResponse+0x174>)
 800517e:	6013      	str	r3, [r2, #0]
						break;
 8005180:	e01e      	b.n	80051c0 <keyResponse+0xa4>
					}
				}
			else{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 1)
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	4a41      	ldr	r2, [pc, #260]	@ (800528c <keyResponse+0x170>)
 8005186:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	493f      	ldr	r1, [pc, #252]	@ (800528c <keyResponse+0x170>)
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	889b      	ldrh	r3, [r3, #4]
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7fd fafe 	bl	8002798 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d107      	bne.n	80051b2 <keyResponse+0x96>
					{
						key = KEY_DOWN;		//按键Up按下是为1
 80051a2:	4b39      	ldr	r3, [pc, #228]	@ (8005288 <keyResponse+0x16c>)
 80051a4:	2201      	movs	r2, #1
 80051a6:	701a      	strb	r2, [r3, #0]
						lastTic = currentTic;
 80051a8:	4b36      	ldr	r3, [pc, #216]	@ (8005284 <keyResponse+0x168>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a38      	ldr	r2, [pc, #224]	@ (8005290 <keyResponse+0x174>)
 80051ae:	6013      	str	r3, [r2, #0]
						break;
 80051b0:	e006      	b.n	80051c0 <keyResponse+0xa4>
		for(uint8_t i = 0; i<NUM_KEYS; i++){
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	3301      	adds	r3, #1
 80051b6:	71fb      	strb	r3, [r7, #7]
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d9c6      	bls.n	800514c <keyResponse+0x30>
					}
			}
		}
		break;
 80051be:	e05c      	b.n	800527a <keyResponse+0x15e>
 80051c0:	e05b      	b.n	800527a <keyResponse+0x15e>
	case KEY_DOWN:
		for(uint8_t i = 0; i< NUM_KEYS; i++){
 80051c2:	2300      	movs	r3, #0
 80051c4:	71bb      	strb	r3, [r7, #6]
 80051c6:	e033      	b.n	8005230 <keyResponse+0x114>
			if(i != 0){
 80051c8:	79bb      	ldrb	r3, [r7, #6]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d013      	beq.n	80051f6 <keyResponse+0xda>
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 0)
 80051ce:	79bb      	ldrb	r3, [r7, #6]
 80051d0:	4a2e      	ldr	r2, [pc, #184]	@ (800528c <keyResponse+0x170>)
 80051d2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80051d6:	79bb      	ldrb	r3, [r7, #6]
 80051d8:	492c      	ldr	r1, [pc, #176]	@ (800528c <keyResponse+0x170>)
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	440b      	add	r3, r1
 80051de:	889b      	ldrh	r3, [r3, #4]
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fd fad8 	bl	8002798 <HAL_GPIO_ReadPin>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d117      	bne.n	800521e <keyResponse+0x102>
				{
					keyIndex = i;	//按键未抬起，记录该键值
 80051ee:	4a29      	ldr	r2, [pc, #164]	@ (8005294 <keyResponse+0x178>)
 80051f0:	79bb      	ldrb	r3, [r7, #6]
 80051f2:	7013      	strb	r3, [r2, #0]
					break;
 80051f4:	e020      	b.n	8005238 <keyResponse+0x11c>
				}
			}
			else{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 1)
 80051f6:	79bb      	ldrb	r3, [r7, #6]
 80051f8:	4a24      	ldr	r2, [pc, #144]	@ (800528c <keyResponse+0x170>)
 80051fa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80051fe:	79bb      	ldrb	r3, [r7, #6]
 8005200:	4922      	ldr	r1, [pc, #136]	@ (800528c <keyResponse+0x170>)
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	440b      	add	r3, r1
 8005206:	889b      	ldrh	r3, [r3, #4]
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fd fac4 	bl	8002798 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b01      	cmp	r3, #1
 8005214:	d103      	bne.n	800521e <keyResponse+0x102>
				{
					keyIndex = i;	//按键未抬起，记录该键值
 8005216:	4a1f      	ldr	r2, [pc, #124]	@ (8005294 <keyResponse+0x178>)
 8005218:	79bb      	ldrb	r3, [r7, #6]
 800521a:	7013      	strb	r3, [r2, #0]
					break;
 800521c:	e00c      	b.n	8005238 <keyResponse+0x11c>
				}

			}
			if(i >= NUM_KEYS-1)
 800521e:	79bb      	ldrb	r3, [r7, #6]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d902      	bls.n	800522a <keyResponse+0x10e>
			{
				key = KEY_UP;	//遍历完4个按键后发现没有按下的按键后切换状态
 8005224:	4b18      	ldr	r3, [pc, #96]	@ (8005288 <keyResponse+0x16c>)
 8005226:	2202      	movs	r2, #2
 8005228:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i< NUM_KEYS; i++){
 800522a:	79bb      	ldrb	r3, [r7, #6]
 800522c:	3301      	adds	r3, #1
 800522e:	71bb      	strb	r3, [r7, #6]
 8005230:	79bb      	ldrb	r3, [r7, #6]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d9c8      	bls.n	80051c8 <keyResponse+0xac>

			}
		}
		break;
 8005236:	e020      	b.n	800527a <keyResponse+0x15e>
 8005238:	e01f      	b.n	800527a <keyResponse+0x15e>
	case KEY_UP:
		if((currentTic - lastTic) > KEY_LONG_THRESHOLD){
 800523a:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <keyResponse+0x168>)
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	4b14      	ldr	r3, [pc, #80]	@ (8005290 <keyResponse+0x174>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b50      	cmp	r3, #80	@ 0x50
 8005246:	d906      	bls.n	8005256 <keyResponse+0x13a>
			key = (enum KEY) (keyIndex+KEY_UP_LONG);		//记录长按键状态
 8005248:	4b12      	ldr	r3, [pc, #72]	@ (8005294 <keyResponse+0x178>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	3307      	adds	r3, #7
 800524e:	b2da      	uxtb	r2, r3
 8005250:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <keyResponse+0x16c>)
 8005252:	701a      	strb	r2, [r3, #0]
		}
		else{
			key = (enum KEY) (keyIndex+KEY_UP_SHORT);		//记录短按键状态

		}
		break;
 8005254:	e011      	b.n	800527a <keyResponse+0x15e>
			key = (enum KEY) (keyIndex+KEY_UP_SHORT);		//记录短按键状态
 8005256:	4b0f      	ldr	r3, [pc, #60]	@ (8005294 <keyResponse+0x178>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	3303      	adds	r3, #3
 800525c:	b2da      	uxtb	r2, r3
 800525e:	4b0a      	ldr	r3, [pc, #40]	@ (8005288 <keyResponse+0x16c>)
 8005260:	701a      	strb	r2, [r3, #0]
		break;
 8005262:	e00a      	b.n	800527a <keyResponse+0x15e>
	default:
		if(!moveOneStep){
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <keyResponse+0x17c>)
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <keyResponse+0x15c>

			break;
		}
		recordStep();
 800526c:	f000 f880 	bl	8005370 <recordStep>
		key = KEY_NULL;
 8005270:	4b05      	ldr	r3, [pc, #20]	@ (8005288 <keyResponse+0x16c>)
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]


}
}
 8005276:	e000      	b.n	800527a <keyResponse+0x15e>
			break;
 8005278:	bf00      	nop
}
 800527a:	bf00      	nop
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	2000025c 	.word	0x2000025c
 8005288:	20000258 	.word	0x20000258
 800528c:	08006678 	.word	0x08006678
 8005290:	20000260 	.word	0x20000260
 8005294:	20000264 	.word	0x20000264
 8005298:	20000270 	.word	0x20000270

0800529c <ledToggle>:
		}

}


void ledToggle(uint8_t val){
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
 80052aa:	e017      	b.n	80052dc <ledToggle+0x40>
				if(val & (0x01 << i))
 80052ac:	79fa      	ldrb	r2, [r7, #7]
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
 80052b0:	fa42 f303 	asr.w	r3, r2, r3
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00c      	beq.n	80052d6 <ledToggle+0x3a>
					{HAL_GPIO_TogglePin(led[i].port, led[i].pin);}
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	4a0b      	ldr	r2, [pc, #44]	@ (80052ec <ledToggle+0x50>)
 80052c0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80052c4:	7bfb      	ldrb	r3, [r7, #15]
 80052c6:	4909      	ldr	r1, [pc, #36]	@ (80052ec <ledToggle+0x50>)
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	889b      	ldrh	r3, [r3, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fd fa92 	bl	80027fa <HAL_GPIO_TogglePin>
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	3301      	adds	r3, #1
 80052da:	73fb      	strb	r3, [r7, #15]
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	2b07      	cmp	r3, #7
 80052e0:	d9e4      	bls.n	80052ac <ledToggle+0x10>
			}
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	08006698 	.word	0x08006698

080052f0 <createSnakeNode>:
        }
    }
};

/*--------------创建蛇的每个块----------------*/
struct SNAKE_STATUS *createSnakeNode(Position pos, Direction dir){
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	80b8      	strh	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
	struct SNAKE_STATUS* headNode = (struct SNAKE_STATUS *)malloc(sizeof(struct SNAKE_STATUS));
 80052fc:	2008      	movs	r0, #8
 80052fe:	f000 fad1 	bl	80058a4 <malloc>
 8005302:	4603      	mov	r3, r0
 8005304:	60fb      	str	r3, [r7, #12]
	if(headNode == NULL){
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <createSnakeNode+0x20>
		return NULL;
 800530c:	2300      	movs	r3, #0
 800530e:	e00c      	b.n	800532a <createSnakeNode+0x3a>
	}
	headNode->position.n = pos.n;
 8005310:	793a      	ldrb	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	701a      	strb	r2, [r3, #0]
	headNode->position.section = pos.section;
 8005316:	797a      	ldrb	r2, [r7, #5]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	705a      	strb	r2, [r3, #1]
	headNode->towards = dir;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	709a      	strb	r2, [r3, #2]
	headNode->next = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	605a      	str	r2, [r3, #4]
	return headNode;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <addBlock>:

/*---------在蛇尾添加新的块-------------*/
struct SNAKE_STATUS *addBlock(struct SNAKE_STATUS* head, struct SNAKE_STATUS* tail){
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	6039      	str	r1, [r7, #0]

	struct SNAKE_STATUS* currentNode = head;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
	//找到最后的节点
	while(currentNode->next != NULL){
 8005340:	e002      	b.n	8005348 <addBlock+0x16>
		currentNode = currentNode->next;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	60fb      	str	r3, [r7, #12]
	while(currentNode->next != NULL){
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f8      	bne.n	8005342 <addBlock+0x10>
	}
	struct SNAKE_STATUS* bodyNode = createSnakeNode(tail->position, tail->towards);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	789a      	ldrb	r2, [r3, #2]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	4611      	mov	r1, r2
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	f7ff ffc9 	bl	80052f0 <createSnakeNode>
 800535e:	60b8      	str	r0, [r7, #8]
	currentNode->next = bodyNode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	605a      	str	r2, [r3, #4]
	return head;
 8005366:	687b      	ldr	r3, [r7, #4]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <recordStep>:


/*---------记录蛇是否动了一步---------*/
void recordStep(void){
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
	moveOneStep = !moveOneStep;
 8005374:	4b07      	ldr	r3, [pc, #28]	@ (8005394 <recordStep+0x24>)
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	4b03      	ldr	r3, [pc, #12]	@ (8005394 <recordStep+0x24>)
 8005386:	801a      	strh	r2, [r3, #0]
}
 8005388:	bf00      	nop
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000270 	.word	0x20000270

08005398 <snakeInit>:
		currentBlock = currentBlock->next;
	} while (currentBlock != NULL);

}
/*-------------------初始化蛇在左上角且长度为一-------------------*/
void snakeInit(void) {
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
    if (mainSnake == NULL) {
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <snakeInit+0x30>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <snakeInit+0x2c>
        mainSnake = createSnakeNode(startPos, RIGHT); // 仅在第一次调用时创建
 80053a4:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <snakeInit+0x34>)
 80053a6:	2103      	movs	r1, #3
 80053a8:	6818      	ldr	r0, [r3, #0]
 80053aa:	f7ff ffa1 	bl	80052f0 <createSnakeNode>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a05      	ldr	r2, [pc, #20]	@ (80053c8 <snakeInit+0x30>)
 80053b2:	6013      	str	r3, [r2, #0]
        copySnake = createSnakeNode(startPos, RIGHT);
 80053b4:	4b05      	ldr	r3, [pc, #20]	@ (80053cc <snakeInit+0x34>)
 80053b6:	2103      	movs	r1, #3
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	f7ff ff99 	bl	80052f0 <createSnakeNode>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a03      	ldr	r2, [pc, #12]	@ (80053d0 <snakeInit+0x38>)
 80053c2:	6013      	str	r3, [r2, #0]

    }
}
 80053c4:	bf00      	nop
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000268 	.word	0x20000268
 80053cc:	080066d8 	.word	0x080066d8
 80053d0:	2000026c 	.word	0x2000026c

080053d4 <snakeBlockUpdate>:


/*-------------------更新每个块的移动-----------------------------*/
void snakeBlockUpdate(struct SNAKE_STATUS* snake){
 80053d4:	b5b0      	push	{r4, r5, r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake;  // 使用一个临时指针遍历
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]
	uint16_t i = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	817b      	strh	r3, [r7, #10]
	do{


		displayToken(currentBlock->position.n, currentBlock->position.section);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	781a      	ldrb	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	785b      	ldrb	r3, [r3, #1]
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7ff fe58 	bl	80050a4 <displayToken>
		coordinate[i] = get_segment_coordinates(currentBlock->position.n, currentBlock->position.section, currentBlock->towards);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	7818      	ldrb	r0, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	7859      	ldrb	r1, [r3, #1]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	789b      	ldrb	r3, [r3, #2]
 8005400:	897c      	ldrh	r4, [r7, #10]
 8005402:	4d0a      	ldr	r5, [pc, #40]	@ (800542c <snakeBlockUpdate+0x58>)
 8005404:	461a      	mov	r2, r3
 8005406:	f000 f9fd 	bl	8005804 <get_segment_coordinates>
 800540a:	4603      	mov	r3, r0
 800540c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		currentBlock = currentBlock->next;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	60fb      	str	r3, [r7, #12]
		i++;
 8005416:	897b      	ldrh	r3, [r7, #10]
 8005418:	3301      	adds	r3, #1
 800541a:	817b      	strh	r3, [r7, #10]
		//HAL_Delay(0.1);
	} while (currentBlock != NULL);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1e0      	bne.n	80053e4 <snakeBlockUpdate+0x10>

}
 8005422:	bf00      	nop
 8005424:	bf00      	nop
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bdb0      	pop	{r4, r5, r7, pc}
 800542c:	20000278 	.word	0x20000278

08005430 <snakeDirectionUpdated>:


/*------------更改按下按键后蛇头的朝向--------------------*/
void snakeDirectionUpdated(struct SNAKE_STATUS* snake) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake;  // 使用一个临时指针遍历
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60fb      	str	r3, [r7, #12]
	enum KEY status = keyRead();
 800543c:	f7ff fe56 	bl	80050ec <keyRead>
 8005440:	4603      	mov	r3, r0
 8005442:	72fb      	strb	r3, [r7, #11]
	switch(status){
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	3b03      	subs	r3, #3
 8005448:	2b03      	cmp	r3, #3
 800544a:	d863      	bhi.n	8005514 <snakeDirectionUpdated+0xe4>
 800544c:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <snakeDirectionUpdated+0x24>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005465 	.word	0x08005465
 8005458:	08005493 	.word	0x08005493
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080054eb 	.word	0x080054eb
	case KEY_UP_SHORT:
		if(currentBlock->position.section == 0x40 || currentBlock->position.section == 0x08){
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	785b      	ldrb	r3, [r3, #1]
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d003      	beq.n	8005474 <snakeDirectionUpdated+0x44>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d151      	bne.n	8005518 <snakeDirectionUpdated+0xe8>
		currentBlock->towards = (currentBlock->towards==LEFT || currentBlock->towards == RIGHT) ? UP : currentBlock->towards;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	789b      	ldrb	r3, [r3, #2]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d006      	beq.n	800548a <snakeDirectionUpdated+0x5a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	789b      	ldrb	r3, [r3, #2]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d002      	beq.n	800548a <snakeDirectionUpdated+0x5a>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	789a      	ldrb	r2, [r3, #2]
 8005488:	e000      	b.n	800548c <snakeDirectionUpdated+0x5c>
 800548a:	2200      	movs	r2, #0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005490:	e042      	b.n	8005518 <snakeDirectionUpdated+0xe8>
	case KEY_DOWN_SHORT:
		if(currentBlock->position.section == 0x40 || currentBlock->position.section == 0x01){
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b40      	cmp	r3, #64	@ 0x40
 8005498:	d003      	beq.n	80054a2 <snakeDirectionUpdated+0x72>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d13c      	bne.n	800551c <snakeDirectionUpdated+0xec>
		currentBlock->towards = (currentBlock->towards==LEFT || currentBlock->towards == RIGHT) ? DOWN : currentBlock->towards;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	789b      	ldrb	r3, [r3, #2]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d006      	beq.n	80054b8 <snakeDirectionUpdated+0x88>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d002      	beq.n	80054b8 <snakeDirectionUpdated+0x88>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	789a      	ldrb	r2, [r3, #2]
 80054b6:	e000      	b.n	80054ba <snakeDirectionUpdated+0x8a>
 80054b8:	2201      	movs	r2, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	709a      	strb	r2, [r3, #2]
		}
		break;
 80054be:	e02d      	b.n	800551c <snakeDirectionUpdated+0xec>
	case KEY_LEFT_SHORT:
		if((currentBlock->position.section & 0x36) != 0){
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	785b      	ldrb	r3, [r3, #1]
 80054c4:	f003 0336 	and.w	r3, r3, #54	@ 0x36
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d029      	beq.n	8005520 <snakeDirectionUpdated+0xf0>
		currentBlock->towards = (currentBlock->towards==UP || currentBlock->towards == DOWN) ? LEFT : currentBlock->towards;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	789b      	ldrb	r3, [r3, #2]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d006      	beq.n	80054e2 <snakeDirectionUpdated+0xb2>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	789b      	ldrb	r3, [r3, #2]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d002      	beq.n	80054e2 <snakeDirectionUpdated+0xb2>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	789a      	ldrb	r2, [r3, #2]
 80054e0:	e000      	b.n	80054e4 <snakeDirectionUpdated+0xb4>
 80054e2:	2202      	movs	r2, #2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	709a      	strb	r2, [r3, #2]
		}
		break;
 80054e8:	e01a      	b.n	8005520 <snakeDirectionUpdated+0xf0>
	case KEY_RIGHT_SHORT:
		if((currentBlock->position.section & 0x36) != 0){
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	f003 0336 	and.w	r3, r3, #54	@ 0x36
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <snakeDirectionUpdated+0xf4>
		currentBlock->towards = (currentBlock->towards==UP || currentBlock->towards == DOWN) ? RIGHT : currentBlock->towards;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	789b      	ldrb	r3, [r3, #2]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d006      	beq.n	800550c <snakeDirectionUpdated+0xdc>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d002      	beq.n	800550c <snakeDirectionUpdated+0xdc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	789a      	ldrb	r2, [r3, #2]
 800550a:	e000      	b.n	800550e <snakeDirectionUpdated+0xde>
 800550c:	2203      	movs	r2, #3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005512:	e007      	b.n	8005524 <snakeDirectionUpdated+0xf4>
	default:

		break;
 8005514:	bf00      	nop
 8005516:	e006      	b.n	8005526 <snakeDirectionUpdated+0xf6>
		break;
 8005518:	bf00      	nop
 800551a:	e004      	b.n	8005526 <snakeDirectionUpdated+0xf6>
		break;
 800551c:	bf00      	nop
 800551e:	e002      	b.n	8005526 <snakeDirectionUpdated+0xf6>
		break;
 8005520:	bf00      	nop
 8005522:	e000      	b.n	8005526 <snakeDirectionUpdated+0xf6>
		break;
 8005524:	bf00      	nop
	};

}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <snakePositionUpdated>:



/*------------更改按下按键后蛇头和所有段的位置--------------------*/
void snakePositionUpdated(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy) {
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	617b      	str	r3, [r7, #20]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	613b      	str	r3, [r7, #16]
	Direction lastDic = lastBlock->towards;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	789b      	ldrb	r3, [r3, #2]
 8005546:	73fb      	strb	r3, [r7, #15]
	updatedDir = currentBlock->towards;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	789a      	ldrb	r2, [r3, #2]
 800554c:	4b38      	ldr	r3, [pc, #224]	@ (8005630 <snakePositionUpdated+0x100>)
 800554e:	701a      	strb	r2, [r3, #0]
	currentBlock->position.n = (TRANSITION_MAP[(uint8_t)log2(currentBlock->position.section)][lastDic][updatedDir].newIndex+currentBlock->position.n)%8;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	785b      	ldrb	r3, [r3, #1]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fa ff81 	bl	800045c <__aeabi_ui2d>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	ec43 2b10 	vmov	d0, r2, r3
 8005562:	f000 fe55 	bl	8006210 <log>
 8005566:	ec51 0b10 	vmov	r0, r1, d0
 800556a:	a32f      	add	r3, pc, #188	@ (adr r3, 8005628 <snakePositionUpdated+0xf8>)
 800556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005570:	f7fb f918 	bl	80007a4 <__aeabi_ddiv>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4610      	mov	r0, r2
 800557a:	4619      	mov	r1, r3
 800557c:	f7fb fa98 	bl	8000ab0 <__aeabi_d2uiz>
 8005580:	4603      	mov	r3, r0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	461c      	mov	r4, r3
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	4a29      	ldr	r2, [pc, #164]	@ (8005630 <snakePositionUpdated+0x100>)
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	4610      	mov	r0, r2
 800558e:	4929      	ldr	r1, [pc, #164]	@ (8005634 <snakePositionUpdated+0x104>)
 8005590:	00a2      	lsls	r2, r4, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4403      	add	r3, r0
 8005598:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	4413      	add	r3, r2
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	b2da      	uxtb	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	701a      	strb	r2, [r3, #0]
	currentBlock->position.section = TRANSITION_MAP[(uint8_t)log2(currentBlock->position.section)][lastDic][updatedDir].nextSegment;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fa ff52 	bl	800045c <__aeabi_ui2d>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	ec43 2b10 	vmov	d0, r2, r3
 80055c0:	f000 fe26 	bl	8006210 <log>
 80055c4:	ec51 0b10 	vmov	r0, r1, d0
 80055c8:	a317      	add	r3, pc, #92	@ (adr r3, 8005628 <snakePositionUpdated+0xf8>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fb f8e9 	bl	80007a4 <__aeabi_ddiv>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	f7fb fa69 	bl	8000ab0 <__aeabi_d2uiz>
 80055de:	4603      	mov	r3, r0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461c      	mov	r4, r3
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
 80055e6:	4a12      	ldr	r2, [pc, #72]	@ (8005630 <snakePositionUpdated+0x100>)
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	4610      	mov	r0, r2
 80055ec:	4911      	ldr	r1, [pc, #68]	@ (8005634 <snakePositionUpdated+0x104>)
 80055ee:	00a2      	lsls	r2, r4, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4403      	add	r3, r0
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	440b      	add	r3, r1
 80055fa:	785a      	ldrb	r2, [r3, #1]
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	705a      	strb	r2, [r3, #1]
    while(currentBlock->next != NULL){
 8005600:	e009      	b.n	8005616 <snakePositionUpdated+0xe6>
    	currentBlock = currentBlock->next;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	617b      	str	r3, [r7, #20]
    	currentBlock->position = lastBlock->position;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	8812      	ldrh	r2, [r2, #0]
 800560e:	801a      	strh	r2, [r3, #0]
    	lastBlock =  lastBlock->next;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	613b      	str	r3, [r7, #16]
    while(currentBlock->next != NULL){
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1f1      	bne.n	8005602 <snakePositionUpdated+0xd2>
    }
}
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bd90      	pop	{r4, r7, pc}
 8005628:	fefa39ef 	.word	0xfefa39ef
 800562c:	3fe62e42 	.word	0x3fe62e42
 8005630:	20000009 	.word	0x20000009
 8005634:	080066dc 	.word	0x080066dc

08005638 <copySnakeReset>:



/*------------重置copySnake为mainSnake-------------*/
void copySnakeReset(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy){
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60fb      	str	r3, [r7, #12]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	60bb      	str	r3, [r7, #8]
	while (currentBlock != NULL) {
 800564a:	e02b      	b.n	80056a4 <copySnakeReset+0x6c>
		lastBlock->towards = currentBlock->towards;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	789a      	ldrb	r2, [r3, #2]
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	709a      	strb	r2, [r3, #2]
		lastBlock->position = currentBlock->position;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	8812      	ldrh	r2, [r2, #0]
 800565a:	801a      	strh	r2, [r3, #0]
		if (currentBlock->next != NULL && lastBlock->next != NULL) {
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <copySnakeReset+0x3c>
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <copySnakeReset+0x3c>
			lastBlock = lastBlock->next;
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	e014      	b.n	800569e <copySnakeReset+0x66>
		}
		else if(currentBlock->next != NULL && lastBlock->next == NULL)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d010      	beq.n	800569e <copySnakeReset+0x66>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10c      	bne.n	800569e <copySnakeReset+0x66>
		{
			lastBlock->next = createSnakeNode(currentBlock->next->position, currentBlock->next->towards);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6852      	ldr	r2, [r2, #4]
 800568c:	7892      	ldrb	r2, [r2, #2]
 800568e:	4611      	mov	r1, r2
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	f7ff fe2d 	bl	80052f0 <createSnakeNode>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	605a      	str	r2, [r3, #4]
			break;
 800569c:	e006      	b.n	80056ac <copySnakeReset+0x74>
		}
		currentBlock = currentBlock->next;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
	while (currentBlock != NULL) {
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1d0      	bne.n	800564c <copySnakeReset+0x14>

	}
}
 80056aa:	bf00      	nop
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <foodGen>:

/*----------随机生成食物的位置----------------------*/
void foodGen(struct SNAKE_STATUS* snake_main){
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake_main;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]
	do{
	repeatFlag = 0;
 80056c0:	4b22      	ldr	r3, [pc, #136]	@ (800574c <foodGen+0x98>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]
	randNum = HAL_GetTick() % 8;
 80056c6:	f7fc f99f 	bl	8001a08 <HAL_GetTick>
 80056ca:	4603      	mov	r3, r0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0307 	and.w	r3, r3, #7
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005750 <foodGen+0x9c>)
 80056d6:	701a      	strb	r2, [r3, #0]
	randNumSec =  HAL_GetTick() % 7;
 80056d8:	f7fc f996 	bl	8001a08 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b1d      	ldr	r3, [pc, #116]	@ (8005754 <foodGen+0xa0>)
 80056e0:	fba3 1302 	umull	r1, r3, r3, r2
 80056e4:	1ad1      	subs	r1, r2, r3
 80056e6:	0849      	lsrs	r1, r1, #1
 80056e8:	440b      	add	r3, r1
 80056ea:	0899      	lsrs	r1, r3, #2
 80056ec:	460b      	mov	r3, r1
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	1a5b      	subs	r3, r3, r1
 80056f2:	1ad1      	subs	r1, r2, r3
 80056f4:	b2ca      	uxtb	r2, r1
 80056f6:	4b18      	ldr	r3, [pc, #96]	@ (8005758 <foodGen+0xa4>)
 80056f8:	701a      	strb	r2, [r3, #0]
	while(currentBlock != NULL){
 80056fa:	e015      	b.n	8005728 <foodGen+0x74>
		if(currentBlock->position.n == randNum && (0x01 << randNumSec) == currentBlock->position.section ){
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	4b13      	ldr	r3, [pc, #76]	@ (8005750 <foodGen+0x9c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d10c      	bne.n	8005722 <foodGen+0x6e>
 8005708:	4b13      	ldr	r3, [pc, #76]	@ (8005758 <foodGen+0xa4>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	2301      	movs	r3, #1
 8005710:	4093      	lsls	r3, r2
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	7852      	ldrb	r2, [r2, #1]
 8005716:	4293      	cmp	r3, r2
 8005718:	d103      	bne.n	8005722 <foodGen+0x6e>
			repeatFlag = 1;
 800571a:	4b0c      	ldr	r3, [pc, #48]	@ (800574c <foodGen+0x98>)
 800571c:	2201      	movs	r2, #1
 800571e:	701a      	strb	r2, [r3, #0]
			break;
 8005720:	e005      	b.n	800572e <foodGen+0x7a>
		}
		currentBlock = currentBlock->next;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]
	while(currentBlock != NULL){
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e6      	bne.n	80056fc <foodGen+0x48>
	}

	}while(repeatFlag);
 800572e:	4b07      	ldr	r3, [pc, #28]	@ (800574c <foodGen+0x98>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1c4      	bne.n	80056c0 <foodGen+0xc>
	foodGenFlag = 1;
 8005736:	4b09      	ldr	r3, [pc, #36]	@ (800575c <foodGen+0xa8>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
	foodDispFlag = 0;
 800573c:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <foodGen+0xac>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]

};
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000274 	.word	0x20000274
 8005750:	20000275 	.word	0x20000275
 8005754:	24924925 	.word	0x24924925
 8005758:	20000276 	.word	0x20000276
 800575c:	20000272 	.word	0x20000272
 8005760:	20000273 	.word	0x20000273

08005764 <foodDisplay>:

/*--------------显示食物的位置--------------------*/
void foodDisplay(void){
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
	if(!foodDispFlag){
 8005768:	4b08      	ldr	r3, [pc, #32]	@ (800578c <foodDisplay+0x28>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10b      	bne.n	8005788 <foodDisplay+0x24>
	displayToken(randNum, 0x01<<randNumSec);
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <foodDisplay+0x2c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	4a07      	ldr	r2, [pc, #28]	@ (8005794 <foodDisplay+0x30>)
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	4611      	mov	r1, r2
 800577a:	2201      	movs	r2, #1
 800577c:	408a      	lsls	r2, r1
 800577e:	b2d2      	uxtb	r2, r2
 8005780:	4611      	mov	r1, r2
 8005782:	4618      	mov	r0, r3
 8005784:	f7ff fc8e 	bl	80050a4 <displayToken>
	}

}
 8005788:	bf00      	nop
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000273 	.word	0x20000273
 8005790:	20000275 	.word	0x20000275
 8005794:	20000276 	.word	0x20000276

08005798 <ifAteFood>:

/*---------------判断食物是否被吃掉并长度加一-------------*/
void ifAteFood(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy){
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	60bb      	str	r3, [r7, #8]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	60fb      	str	r3, [r7, #12]

	if(randNum==currentBlock->position.n && ((0x01 <<randNumSec) == currentBlock->position.section) ){
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	4b11      	ldr	r3, [pc, #68]	@ (80057f4 <ifAteFood+0x5c>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d11a      	bne.n	80057ec <ifAteFood+0x54>
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <ifAteFood+0x60>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	2301      	movs	r3, #1
 80057be:	4093      	lsls	r3, r2
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	7852      	ldrb	r2, [r2, #1]
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d111      	bne.n	80057ec <ifAteFood+0x54>
		foodGenFlag = 0;
 80057c8:	4b0c      	ldr	r3, [pc, #48]	@ (80057fc <ifAteFood+0x64>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
		foodDispFlag = 1;
 80057ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005800 <ifAteFood+0x68>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	701a      	strb	r2, [r3, #0]
		while(lastBlock->next!= NULL){
 80057d4:	e002      	b.n	80057dc <ifAteFood+0x44>
			lastBlock = lastBlock->next;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	60fb      	str	r3, [r7, #12]
		while(lastBlock->next!= NULL){
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f8      	bne.n	80057d6 <ifAteFood+0x3e>
		}
		addBlock(snake_main, lastBlock);
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fda3 	bl	8005332 <addBlock>

	}

}
 80057ec:	bf00      	nop
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000275 	.word	0x20000275
 80057f8:	20000276 	.word	0x20000276
 80057fc:	20000272 	.word	0x20000272
 8005800:	20000273 	.word	0x20000273

08005804 <get_segment_coordinates>:
        .coords = {{0,1}, {1,1}}  // 左右方向的坐标
    }
};

// 获取段的坐标
Point2D get_segment_coordinates(uint8_t digit, uint8_t segment, Direction direction) {
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
 800580e:	460b      	mov	r3, r1
 8005810:	71bb      	strb	r3, [r7, #6]
 8005812:	4613      	mov	r3, r2
 8005814:	717b      	strb	r3, [r7, #5]
    Point2D result = {-1, -1};  // 默认无效坐标
 8005816:	4b21      	ldr	r3, [pc, #132]	@ (800589c <get_segment_coordinates+0x98>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	813b      	strh	r3, [r7, #8]

    // 检查段号是否有效
    if(segment >= 7) return result;
 800581c:	79bb      	ldrb	r3, [r7, #6]
 800581e:	2b06      	cmp	r3, #6
 8005820:	d902      	bls.n	8005828 <get_segment_coordinates+0x24>
 8005822:	893b      	ldrh	r3, [r7, #8]
 8005824:	81bb      	strh	r3, [r7, #12]
 8005826:	e02c      	b.n	8005882 <get_segment_coordinates+0x7e>

    // 查找方向对应的坐标索引
    uint8_t coord_index = -1;
 8005828:	23ff      	movs	r3, #255	@ 0xff
 800582a:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 2; i++) {
 800582c:	2300      	movs	r3, #0
 800582e:	73bb      	strb	r3, [r7, #14]
 8005830:	e012      	b.n	8005858 <get_segment_coordinates+0x54>
        if(segment_map[segment].valid_dirs[i] == direction) {
 8005832:	79ba      	ldrb	r2, [r7, #6]
 8005834:	7bb9      	ldrb	r1, [r7, #14]
 8005836:	481a      	ldr	r0, [pc, #104]	@ (80058a0 <get_segment_coordinates+0x9c>)
 8005838:	4613      	mov	r3, r2
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	4413      	add	r3, r2
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4403      	add	r3, r0
 8005842:	440b      	add	r3, r1
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	797a      	ldrb	r2, [r7, #5]
 8005848:	429a      	cmp	r2, r3
 800584a:	d102      	bne.n	8005852 <get_segment_coordinates+0x4e>
            coord_index = i;
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	73fb      	strb	r3, [r7, #15]
            break;
 8005850:	e005      	b.n	800585e <get_segment_coordinates+0x5a>
    for(uint8_t i = 0; i < 2; i++) {
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	3301      	adds	r3, #1
 8005856:	73bb      	strb	r3, [r7, #14]
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d9e9      	bls.n	8005832 <get_segment_coordinates+0x2e>
        }
    }

    // 如果找到有效方向
    if(coord_index != -1) {
        result = segment_map[segment].coords[coord_index];
 800585e:	79ba      	ldrb	r2, [r7, #6]
 8005860:	7bf9      	ldrb	r1, [r7, #15]
 8005862:	480f      	ldr	r0, [pc, #60]	@ (80058a0 <get_segment_coordinates+0x9c>)
 8005864:	4613      	mov	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	4413      	add	r3, r2
 800586a:	440b      	add	r3, r1
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	4403      	add	r3, r0
 8005870:	885b      	ldrh	r3, [r3, #2]
 8005872:	813b      	strh	r3, [r7, #8]
        // 根据数码管序号偏移坐标
        result.x += digit;  // 假设数码管间距为3个单位
 8005874:	7a3a      	ldrb	r2, [r7, #8]
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	4413      	add	r3, r2
 800587a:	b2db      	uxtb	r3, r3
 800587c:	723b      	strb	r3, [r7, #8]
    }

    return result;
 800587e:	893b      	ldrh	r3, [r7, #8]
 8005880:	81bb      	strh	r3, [r7, #12]
}
 8005882:	2300      	movs	r3, #0
 8005884:	7b3a      	ldrb	r2, [r7, #12]
 8005886:	f362 0307 	bfi	r3, r2, #0, #8
 800588a:	7b7a      	ldrb	r2, [r7, #13]
 800588c:	f362 230f 	bfi	r3, r2, #8, #8
 8005890:	4618      	mov	r0, r3
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	0800663c 	.word	0x0800663c
 80058a0:	080067bc 	.word	0x080067bc

080058a4 <malloc>:
 80058a4:	4b02      	ldr	r3, [pc, #8]	@ (80058b0 <malloc+0xc>)
 80058a6:	4601      	mov	r1, r0
 80058a8:	6818      	ldr	r0, [r3, #0]
 80058aa:	f000 b825 	b.w	80058f8 <_malloc_r>
 80058ae:	bf00      	nop
 80058b0:	20000018 	.word	0x20000018

080058b4 <sbrk_aligned>:
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4e0f      	ldr	r6, [pc, #60]	@ (80058f4 <sbrk_aligned+0x40>)
 80058b8:	460c      	mov	r4, r1
 80058ba:	6831      	ldr	r1, [r6, #0]
 80058bc:	4605      	mov	r5, r0
 80058be:	b911      	cbnz	r1, 80058c6 <sbrk_aligned+0x12>
 80058c0:	f000 fada 	bl	8005e78 <_sbrk_r>
 80058c4:	6030      	str	r0, [r6, #0]
 80058c6:	4621      	mov	r1, r4
 80058c8:	4628      	mov	r0, r5
 80058ca:	f000 fad5 	bl	8005e78 <_sbrk_r>
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d103      	bne.n	80058da <sbrk_aligned+0x26>
 80058d2:	f04f 34ff 	mov.w	r4, #4294967295
 80058d6:	4620      	mov	r0, r4
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	1cc4      	adds	r4, r0, #3
 80058dc:	f024 0403 	bic.w	r4, r4, #3
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	d0f8      	beq.n	80058d6 <sbrk_aligned+0x22>
 80058e4:	1a21      	subs	r1, r4, r0
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fac6 	bl	8005e78 <_sbrk_r>
 80058ec:	3001      	adds	r0, #1
 80058ee:	d1f2      	bne.n	80058d6 <sbrk_aligned+0x22>
 80058f0:	e7ef      	b.n	80058d2 <sbrk_aligned+0x1e>
 80058f2:	bf00      	nop
 80058f4:	200002d8 	.word	0x200002d8

080058f8 <_malloc_r>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	1ccd      	adds	r5, r1, #3
 80058fe:	f025 0503 	bic.w	r5, r5, #3
 8005902:	3508      	adds	r5, #8
 8005904:	2d0c      	cmp	r5, #12
 8005906:	bf38      	it	cc
 8005908:	250c      	movcc	r5, #12
 800590a:	2d00      	cmp	r5, #0
 800590c:	4606      	mov	r6, r0
 800590e:	db01      	blt.n	8005914 <_malloc_r+0x1c>
 8005910:	42a9      	cmp	r1, r5
 8005912:	d904      	bls.n	800591e <_malloc_r+0x26>
 8005914:	230c      	movs	r3, #12
 8005916:	6033      	str	r3, [r6, #0]
 8005918:	2000      	movs	r0, #0
 800591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800591e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059f4 <_malloc_r+0xfc>
 8005922:	f000 f869 	bl	80059f8 <__malloc_lock>
 8005926:	f8d8 3000 	ldr.w	r3, [r8]
 800592a:	461c      	mov	r4, r3
 800592c:	bb44      	cbnz	r4, 8005980 <_malloc_r+0x88>
 800592e:	4629      	mov	r1, r5
 8005930:	4630      	mov	r0, r6
 8005932:	f7ff ffbf 	bl	80058b4 <sbrk_aligned>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	4604      	mov	r4, r0
 800593a:	d158      	bne.n	80059ee <_malloc_r+0xf6>
 800593c:	f8d8 4000 	ldr.w	r4, [r8]
 8005940:	4627      	mov	r7, r4
 8005942:	2f00      	cmp	r7, #0
 8005944:	d143      	bne.n	80059ce <_malloc_r+0xd6>
 8005946:	2c00      	cmp	r4, #0
 8005948:	d04b      	beq.n	80059e2 <_malloc_r+0xea>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	4639      	mov	r1, r7
 800594e:	4630      	mov	r0, r6
 8005950:	eb04 0903 	add.w	r9, r4, r3
 8005954:	f000 fa90 	bl	8005e78 <_sbrk_r>
 8005958:	4581      	cmp	r9, r0
 800595a:	d142      	bne.n	80059e2 <_malloc_r+0xea>
 800595c:	6821      	ldr	r1, [r4, #0]
 800595e:	1a6d      	subs	r5, r5, r1
 8005960:	4629      	mov	r1, r5
 8005962:	4630      	mov	r0, r6
 8005964:	f7ff ffa6 	bl	80058b4 <sbrk_aligned>
 8005968:	3001      	adds	r0, #1
 800596a:	d03a      	beq.n	80059e2 <_malloc_r+0xea>
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	442b      	add	r3, r5
 8005970:	6023      	str	r3, [r4, #0]
 8005972:	f8d8 3000 	ldr.w	r3, [r8]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	bb62      	cbnz	r2, 80059d4 <_malloc_r+0xdc>
 800597a:	f8c8 7000 	str.w	r7, [r8]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xa8>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d420      	bmi.n	80059c8 <_malloc_r+0xd0>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xc2>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4630      	mov	r0, r6
 80059a2:	f000 f82f 	bl	8005a04 <__malloc_unlock>
 80059a6:	f104 000b 	add.w	r0, r4, #11
 80059aa:	1d23      	adds	r3, r4, #4
 80059ac:	f020 0007 	bic.w	r0, r0, #7
 80059b0:	1ac2      	subs	r2, r0, r3
 80059b2:	bf1c      	itt	ne
 80059b4:	1a1b      	subne	r3, r3, r0
 80059b6:	50a3      	strne	r3, [r4, r2]
 80059b8:	e7af      	b.n	800591a <_malloc_r+0x22>
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	42a3      	cmp	r3, r4
 80059be:	bf0c      	ite	eq
 80059c0:	f8c8 2000 	streq.w	r2, [r8]
 80059c4:	605a      	strne	r2, [r3, #4]
 80059c6:	e7eb      	b.n	80059a0 <_malloc_r+0xa8>
 80059c8:	4623      	mov	r3, r4
 80059ca:	6864      	ldr	r4, [r4, #4]
 80059cc:	e7ae      	b.n	800592c <_malloc_r+0x34>
 80059ce:	463c      	mov	r4, r7
 80059d0:	687f      	ldr	r7, [r7, #4]
 80059d2:	e7b6      	b.n	8005942 <_malloc_r+0x4a>
 80059d4:	461a      	mov	r2, r3
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d1fb      	bne.n	80059d4 <_malloc_r+0xdc>
 80059dc:	2300      	movs	r3, #0
 80059de:	6053      	str	r3, [r2, #4]
 80059e0:	e7de      	b.n	80059a0 <_malloc_r+0xa8>
 80059e2:	230c      	movs	r3, #12
 80059e4:	6033      	str	r3, [r6, #0]
 80059e6:	4630      	mov	r0, r6
 80059e8:	f000 f80c 	bl	8005a04 <__malloc_unlock>
 80059ec:	e794      	b.n	8005918 <_malloc_r+0x20>
 80059ee:	6005      	str	r5, [r0, #0]
 80059f0:	e7d6      	b.n	80059a0 <_malloc_r+0xa8>
 80059f2:	bf00      	nop
 80059f4:	200002dc 	.word	0x200002dc

080059f8 <__malloc_lock>:
 80059f8:	4801      	ldr	r0, [pc, #4]	@ (8005a00 <__malloc_lock+0x8>)
 80059fa:	f000 ba8a 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 80059fe:	bf00      	nop
 8005a00:	20000420 	.word	0x20000420

08005a04 <__malloc_unlock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	@ (8005a0c <__malloc_unlock+0x8>)
 8005a06:	f000 ba85 	b.w	8005f14 <__retarget_lock_release_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	20000420 	.word	0x20000420

08005a10 <std>:
 8005a10:	2300      	movs	r3, #0
 8005a12:	b510      	push	{r4, lr}
 8005a14:	4604      	mov	r4, r0
 8005a16:	e9c0 3300 	strd	r3, r3, [r0]
 8005a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a1e:	6083      	str	r3, [r0, #8]
 8005a20:	8181      	strh	r1, [r0, #12]
 8005a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a24:	81c2      	strh	r2, [r0, #14]
 8005a26:	6183      	str	r3, [r0, #24]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	305c      	adds	r0, #92	@ 0x5c
 8005a2e:	f000 f9e7 	bl	8005e00 <memset>
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <std+0x58>)
 8005a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <std+0x5c>)
 8005a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <std+0x60>)
 8005a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a74 <std+0x64>)
 8005a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a42:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <std+0x68>)
 8005a44:	6224      	str	r4, [r4, #32]
 8005a46:	429c      	cmp	r4, r3
 8005a48:	d006      	beq.n	8005a58 <std+0x48>
 8005a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a4e:	4294      	cmp	r4, r2
 8005a50:	d002      	beq.n	8005a58 <std+0x48>
 8005a52:	33d0      	adds	r3, #208	@ 0xd0
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d105      	bne.n	8005a64 <std+0x54>
 8005a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a60:	f000 ba56 	b.w	8005f10 <__retarget_lock_init_recursive>
 8005a64:	bd10      	pop	{r4, pc}
 8005a66:	bf00      	nop
 8005a68:	08005c51 	.word	0x08005c51
 8005a6c:	08005c73 	.word	0x08005c73
 8005a70:	08005cab 	.word	0x08005cab
 8005a74:	08005ccf 	.word	0x08005ccf
 8005a78:	200002e0 	.word	0x200002e0

08005a7c <stdio_exit_handler>:
 8005a7c:	4a02      	ldr	r2, [pc, #8]	@ (8005a88 <stdio_exit_handler+0xc>)
 8005a7e:	4903      	ldr	r1, [pc, #12]	@ (8005a8c <stdio_exit_handler+0x10>)
 8005a80:	4803      	ldr	r0, [pc, #12]	@ (8005a90 <stdio_exit_handler+0x14>)
 8005a82:	f000 b869 	b.w	8005b58 <_fwalk_sglue>
 8005a86:	bf00      	nop
 8005a88:	2000000c 	.word	0x2000000c
 8005a8c:	080060b5 	.word	0x080060b5
 8005a90:	2000001c 	.word	0x2000001c

08005a94 <cleanup_stdio>:
 8005a94:	6841      	ldr	r1, [r0, #4]
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <cleanup_stdio+0x34>)
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	b510      	push	{r4, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	d001      	beq.n	8005aa4 <cleanup_stdio+0x10>
 8005aa0:	f000 fb08 	bl	80060b4 <_fflush_r>
 8005aa4:	68a1      	ldr	r1, [r4, #8]
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <cleanup_stdio+0x38>)
 8005aa8:	4299      	cmp	r1, r3
 8005aaa:	d002      	beq.n	8005ab2 <cleanup_stdio+0x1e>
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb01 	bl	80060b4 <_fflush_r>
 8005ab2:	68e1      	ldr	r1, [r4, #12]
 8005ab4:	4b06      	ldr	r3, [pc, #24]	@ (8005ad0 <cleanup_stdio+0x3c>)
 8005ab6:	4299      	cmp	r1, r3
 8005ab8:	d004      	beq.n	8005ac4 <cleanup_stdio+0x30>
 8005aba:	4620      	mov	r0, r4
 8005abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac0:	f000 baf8 	b.w	80060b4 <_fflush_r>
 8005ac4:	bd10      	pop	{r4, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200002e0 	.word	0x200002e0
 8005acc:	20000348 	.word	0x20000348
 8005ad0:	200003b0 	.word	0x200003b0

08005ad4 <global_stdio_init.part.0>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b04 <global_stdio_init.part.0+0x30>)
 8005ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8005b08 <global_stdio_init.part.0+0x34>)
 8005ada:	4a0c      	ldr	r2, [pc, #48]	@ (8005b0c <global_stdio_init.part.0+0x38>)
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	4620      	mov	r0, r4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2104      	movs	r1, #4
 8005ae4:	f7ff ff94 	bl	8005a10 <std>
 8005ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005aec:	2201      	movs	r2, #1
 8005aee:	2109      	movs	r1, #9
 8005af0:	f7ff ff8e 	bl	8005a10 <std>
 8005af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005af8:	2202      	movs	r2, #2
 8005afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005afe:	2112      	movs	r1, #18
 8005b00:	f7ff bf86 	b.w	8005a10 <std>
 8005b04:	20000418 	.word	0x20000418
 8005b08:	200002e0 	.word	0x200002e0
 8005b0c:	08005a7d 	.word	0x08005a7d

08005b10 <__sfp_lock_acquire>:
 8005b10:	4801      	ldr	r0, [pc, #4]	@ (8005b18 <__sfp_lock_acquire+0x8>)
 8005b12:	f000 b9fe 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 8005b16:	bf00      	nop
 8005b18:	20000421 	.word	0x20000421

08005b1c <__sfp_lock_release>:
 8005b1c:	4801      	ldr	r0, [pc, #4]	@ (8005b24 <__sfp_lock_release+0x8>)
 8005b1e:	f000 b9f9 	b.w	8005f14 <__retarget_lock_release_recursive>
 8005b22:	bf00      	nop
 8005b24:	20000421 	.word	0x20000421

08005b28 <__sinit>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	f7ff fff0 	bl	8005b10 <__sfp_lock_acquire>
 8005b30:	6a23      	ldr	r3, [r4, #32]
 8005b32:	b11b      	cbz	r3, 8005b3c <__sinit+0x14>
 8005b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b38:	f7ff bff0 	b.w	8005b1c <__sfp_lock_release>
 8005b3c:	4b04      	ldr	r3, [pc, #16]	@ (8005b50 <__sinit+0x28>)
 8005b3e:	6223      	str	r3, [r4, #32]
 8005b40:	4b04      	ldr	r3, [pc, #16]	@ (8005b54 <__sinit+0x2c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f5      	bne.n	8005b34 <__sinit+0xc>
 8005b48:	f7ff ffc4 	bl	8005ad4 <global_stdio_init.part.0>
 8005b4c:	e7f2      	b.n	8005b34 <__sinit+0xc>
 8005b4e:	bf00      	nop
 8005b50:	08005a95 	.word	0x08005a95
 8005b54:	20000418 	.word	0x20000418

08005b58 <_fwalk_sglue>:
 8005b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b5c:	4607      	mov	r7, r0
 8005b5e:	4688      	mov	r8, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	2600      	movs	r6, #0
 8005b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b68:	f1b9 0901 	subs.w	r9, r9, #1
 8005b6c:	d505      	bpl.n	8005b7a <_fwalk_sglue+0x22>
 8005b6e:	6824      	ldr	r4, [r4, #0]
 8005b70:	2c00      	cmp	r4, #0
 8005b72:	d1f7      	bne.n	8005b64 <_fwalk_sglue+0xc>
 8005b74:	4630      	mov	r0, r6
 8005b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d907      	bls.n	8005b90 <_fwalk_sglue+0x38>
 8005b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b84:	3301      	adds	r3, #1
 8005b86:	d003      	beq.n	8005b90 <_fwalk_sglue+0x38>
 8005b88:	4629      	mov	r1, r5
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	47c0      	blx	r8
 8005b8e:	4306      	orrs	r6, r0
 8005b90:	3568      	adds	r5, #104	@ 0x68
 8005b92:	e7e9      	b.n	8005b68 <_fwalk_sglue+0x10>

08005b94 <_puts_r>:
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	b570      	push	{r4, r5, r6, lr}
 8005b98:	6884      	ldr	r4, [r0, #8]
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	b90b      	cbnz	r3, 8005ba4 <_puts_r+0x10>
 8005ba0:	f7ff ffc2 	bl	8005b28 <__sinit>
 8005ba4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d405      	bmi.n	8005bb6 <_puts_r+0x22>
 8005baa:	89a3      	ldrh	r3, [r4, #12]
 8005bac:	0598      	lsls	r0, r3, #22
 8005bae:	d402      	bmi.n	8005bb6 <_puts_r+0x22>
 8005bb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bb2:	f000 f9ae 	bl	8005f12 <__retarget_lock_acquire_recursive>
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	0719      	lsls	r1, r3, #28
 8005bba:	d502      	bpl.n	8005bc2 <_puts_r+0x2e>
 8005bbc:	6923      	ldr	r3, [r4, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d135      	bne.n	8005c2e <_puts_r+0x9a>
 8005bc2:	4621      	mov	r1, r4
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 f8c5 	bl	8005d54 <__swsetup_r>
 8005bca:	b380      	cbz	r0, 8005c2e <_puts_r+0x9a>
 8005bcc:	f04f 35ff 	mov.w	r5, #4294967295
 8005bd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd2:	07da      	lsls	r2, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_puts_r+0x4e>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	059b      	lsls	r3, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_puts_r+0x4e>
 8005bdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bde:	f000 f999 	bl	8005f14 <__retarget_lock_release_recursive>
 8005be2:	4628      	mov	r0, r5
 8005be4:	bd70      	pop	{r4, r5, r6, pc}
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da04      	bge.n	8005bf4 <_puts_r+0x60>
 8005bea:	69a2      	ldr	r2, [r4, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	dc17      	bgt.n	8005c20 <_puts_r+0x8c>
 8005bf0:	290a      	cmp	r1, #10
 8005bf2:	d015      	beq.n	8005c20 <_puts_r+0x8c>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c02:	3b01      	subs	r3, #1
 8005c04:	60a3      	str	r3, [r4, #8]
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d1ed      	bne.n	8005be6 <_puts_r+0x52>
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	da11      	bge.n	8005c32 <_puts_r+0x9e>
 8005c0e:	4622      	mov	r2, r4
 8005c10:	210a      	movs	r1, #10
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f85f 	bl	8005cd6 <__swbuf_r>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d0d7      	beq.n	8005bcc <_puts_r+0x38>
 8005c1c:	250a      	movs	r5, #10
 8005c1e:	e7d7      	b.n	8005bd0 <_puts_r+0x3c>
 8005c20:	4622      	mov	r2, r4
 8005c22:	4628      	mov	r0, r5
 8005c24:	f000 f857 	bl	8005cd6 <__swbuf_r>
 8005c28:	3001      	adds	r0, #1
 8005c2a:	d1e7      	bne.n	8005bfc <_puts_r+0x68>
 8005c2c:	e7ce      	b.n	8005bcc <_puts_r+0x38>
 8005c2e:	3e01      	subs	r6, #1
 8005c30:	e7e4      	b.n	8005bfc <_puts_r+0x68>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	6022      	str	r2, [r4, #0]
 8005c38:	220a      	movs	r2, #10
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e7ee      	b.n	8005c1c <_puts_r+0x88>
	...

08005c40 <puts>:
 8005c40:	4b02      	ldr	r3, [pc, #8]	@ (8005c4c <puts+0xc>)
 8005c42:	4601      	mov	r1, r0
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	f7ff bfa5 	b.w	8005b94 <_puts_r>
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018

08005c50 <__sread>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	f000 f8fc 	bl	8005e54 <_read_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	bfab      	itete	ge
 8005c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c62:	89a3      	ldrhlt	r3, [r4, #12]
 8005c64:	181b      	addge	r3, r3, r0
 8005c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c6a:	bfac      	ite	ge
 8005c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c6e:	81a3      	strhlt	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f8d0 	bl	8005e30 <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b8f7 	b.w	8005e98 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f8bd 	bl	8005e30 <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b89d 	b.w	8005e10 <_close_r>

08005cd6 <__swbuf_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4614      	mov	r4, r2
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <__swbuf_r+0x12>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swbuf_r+0x12>
 8005ce4:	f7ff ff20 	bl	8005b28 <__sinit>
 8005ce8:	69a3      	ldr	r3, [r4, #24]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	071a      	lsls	r2, r3, #28
 8005cf0:	d501      	bpl.n	8005cf6 <__swbuf_r+0x20>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b943      	cbnz	r3, 8005d08 <__swbuf_r+0x32>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f82b 	bl	8005d54 <__swsetup_r>
 8005cfe:	b118      	cbz	r0, 8005d08 <__swbuf_r+0x32>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295
 8005d04:	4638      	mov	r0, r7
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6922      	ldr	r2, [r4, #16]
 8005d0c:	1a98      	subs	r0, r3, r2
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	b2f6      	uxtb	r6, r6
 8005d12:	4283      	cmp	r3, r0
 8005d14:	4637      	mov	r7, r6
 8005d16:	dc05      	bgt.n	8005d24 <__swbuf_r+0x4e>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f000 f9ca 	bl	80060b4 <_fflush_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d1ed      	bne.n	8005d00 <__swbuf_r+0x2a>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	701e      	strb	r6, [r3, #0]
 8005d32:	6962      	ldr	r2, [r4, #20]
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d004      	beq.n	8005d44 <__swbuf_r+0x6e>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	d5e1      	bpl.n	8005d04 <__swbuf_r+0x2e>
 8005d40:	2e0a      	cmp	r6, #10
 8005d42:	d1df      	bne.n	8005d04 <__swbuf_r+0x2e>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f9b4 	bl	80060b4 <_fflush_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0d9      	beq.n	8005d04 <__swbuf_r+0x2e>
 8005d50:	e7d6      	b.n	8005d00 <__swbuf_r+0x2a>
	...

08005d54 <__swsetup_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4b29      	ldr	r3, [pc, #164]	@ (8005dfc <__swsetup_r+0xa8>)
 8005d58:	4605      	mov	r5, r0
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	b118      	cbz	r0, 8005d68 <__swsetup_r+0x14>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <__swsetup_r+0x14>
 8005d64:	f7ff fee0 	bl	8005b28 <__sinit>
 8005d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d422      	bmi.n	8005db6 <__swsetup_r+0x62>
 8005d70:	06da      	lsls	r2, r3, #27
 8005d72:	d407      	bmi.n	8005d84 <__swsetup_r+0x30>
 8005d74:	2209      	movs	r2, #9
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d82:	e033      	b.n	8005dec <__swsetup_r+0x98>
 8005d84:	0758      	lsls	r0, r3, #29
 8005d86:	d512      	bpl.n	8005dae <__swsetup_r+0x5a>
 8005d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8a:	b141      	cbz	r1, 8005d9e <__swsetup_r+0x4a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__swsetup_r+0x46>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f8bf 	bl	8005f18 <_free_r>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	b94b      	cbnz	r3, 8005dce <__swsetup_r+0x7a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d003      	beq.n	8005dce <__swsetup_r+0x7a>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f9c1 	bl	8006150 <__smakebuf_r>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	f013 0201 	ands.w	r2, r3, #1
 8005dd6:	d00a      	beq.n	8005dee <__swsetup_r+0x9a>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	6962      	ldr	r2, [r4, #20]
 8005dde:	4252      	negs	r2, r2
 8005de0:	61a2      	str	r2, [r4, #24]
 8005de2:	6922      	ldr	r2, [r4, #16]
 8005de4:	b942      	cbnz	r2, 8005df8 <__swsetup_r+0xa4>
 8005de6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dea:	d1c5      	bne.n	8005d78 <__swsetup_r+0x24>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	0799      	lsls	r1, r3, #30
 8005df0:	bf58      	it	pl
 8005df2:	6962      	ldrpl	r2, [r4, #20]
 8005df4:	60a2      	str	r2, [r4, #8]
 8005df6:	e7f4      	b.n	8005de2 <__swsetup_r+0x8e>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7f7      	b.n	8005dec <__swsetup_r+0x98>
 8005dfc:	20000018 	.word	0x20000018

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <_close_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4d06      	ldr	r5, [pc, #24]	@ (8005e2c <_close_r+0x1c>)
 8005e14:	2300      	movs	r3, #0
 8005e16:	4604      	mov	r4, r0
 8005e18:	4608      	mov	r0, r1
 8005e1a:	602b      	str	r3, [r5, #0]
 8005e1c:	f7fb faa1 	bl	8001362 <_close>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_close_r+0x1a>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_close_r+0x1a>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	2000041c 	.word	0x2000041c

08005e30 <_lseek_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d07      	ldr	r5, [pc, #28]	@ (8005e50 <_lseek_r+0x20>)
 8005e34:	4604      	mov	r4, r0
 8005e36:	4608      	mov	r0, r1
 8005e38:	4611      	mov	r1, r2
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	602a      	str	r2, [r5, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7fb fab6 	bl	80013b0 <_lseek>
 8005e44:	1c43      	adds	r3, r0, #1
 8005e46:	d102      	bne.n	8005e4e <_lseek_r+0x1e>
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	b103      	cbz	r3, 8005e4e <_lseek_r+0x1e>
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	2000041c 	.word	0x2000041c

08005e54 <_read_r>:
 8005e54:	b538      	push	{r3, r4, r5, lr}
 8005e56:	4d07      	ldr	r5, [pc, #28]	@ (8005e74 <_read_r+0x20>)
 8005e58:	4604      	mov	r4, r0
 8005e5a:	4608      	mov	r0, r1
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	2200      	movs	r2, #0
 8005e60:	602a      	str	r2, [r5, #0]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f7fb fa44 	bl	80012f0 <_read>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	d102      	bne.n	8005e72 <_read_r+0x1e>
 8005e6c:	682b      	ldr	r3, [r5, #0]
 8005e6e:	b103      	cbz	r3, 8005e72 <_read_r+0x1e>
 8005e70:	6023      	str	r3, [r4, #0]
 8005e72:	bd38      	pop	{r3, r4, r5, pc}
 8005e74:	2000041c 	.word	0x2000041c

08005e78 <_sbrk_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4d06      	ldr	r5, [pc, #24]	@ (8005e94 <_sbrk_r+0x1c>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	f7fb faa2 	bl	80013cc <_sbrk>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_sbrk_r+0x1a>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_sbrk_r+0x1a>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	2000041c 	.word	0x2000041c

08005e98 <_write_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	@ (8005eb8 <_write_r+0x20>)
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	602a      	str	r2, [r5, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f7fb fa3f 	bl	800132a <_write>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_write_r+0x1e>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_write_r+0x1e>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	2000041c 	.word	0x2000041c

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	@ (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000018 	.word	0x20000018

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	@ (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	@ (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 fb96 	bl	800660c <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	080067f0 	.word	0x080067f0
 8005f04:	080067f0 	.word	0x080067f0
 8005f08:	080067f0 	.word	0x080067f0
 8005f0c:	080067f4 	.word	0x080067f4

08005f10 <__retarget_lock_init_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_acquire_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <__retarget_lock_release_recursive>:
 8005f14:	4770      	bx	lr
	...

08005f18 <_free_r>:
 8005f18:	b538      	push	{r3, r4, r5, lr}
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	2900      	cmp	r1, #0
 8005f1e:	d041      	beq.n	8005fa4 <_free_r+0x8c>
 8005f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f24:	1f0c      	subs	r4, r1, #4
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bfb8      	it	lt
 8005f2a:	18e4      	addlt	r4, r4, r3
 8005f2c:	f7ff fd64 	bl	80059f8 <__malloc_lock>
 8005f30:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <_free_r+0x90>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	b933      	cbnz	r3, 8005f44 <_free_r+0x2c>
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	6014      	str	r4, [r2, #0]
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f40:	f7ff bd60 	b.w	8005a04 <__malloc_unlock>
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d908      	bls.n	8005f5a <_free_r+0x42>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428b      	cmp	r3, r1
 8005f4e:	bf01      	itttt	eq
 8005f50:	6819      	ldreq	r1, [r3, #0]
 8005f52:	685b      	ldreq	r3, [r3, #4]
 8005f54:	1809      	addeq	r1, r1, r0
 8005f56:	6021      	streq	r1, [r4, #0]
 8005f58:	e7ed      	b.n	8005f36 <_free_r+0x1e>
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b10b      	cbz	r3, 8005f64 <_free_r+0x4c>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d9fa      	bls.n	8005f5a <_free_r+0x42>
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	1850      	adds	r0, r2, r1
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d10b      	bne.n	8005f84 <_free_r+0x6c>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	4401      	add	r1, r0
 8005f70:	1850      	adds	r0, r2, r1
 8005f72:	4283      	cmp	r3, r0
 8005f74:	6011      	str	r1, [r2, #0]
 8005f76:	d1e0      	bne.n	8005f3a <_free_r+0x22>
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	6053      	str	r3, [r2, #4]
 8005f7e:	4408      	add	r0, r1
 8005f80:	6010      	str	r0, [r2, #0]
 8005f82:	e7da      	b.n	8005f3a <_free_r+0x22>
 8005f84:	d902      	bls.n	8005f8c <_free_r+0x74>
 8005f86:	230c      	movs	r3, #12
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	e7d6      	b.n	8005f3a <_free_r+0x22>
 8005f8c:	6820      	ldr	r0, [r4, #0]
 8005f8e:	1821      	adds	r1, r4, r0
 8005f90:	428b      	cmp	r3, r1
 8005f92:	bf04      	itt	eq
 8005f94:	6819      	ldreq	r1, [r3, #0]
 8005f96:	685b      	ldreq	r3, [r3, #4]
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	bf04      	itt	eq
 8005f9c:	1809      	addeq	r1, r1, r0
 8005f9e:	6021      	streq	r1, [r4, #0]
 8005fa0:	6054      	str	r4, [r2, #4]
 8005fa2:	e7ca      	b.n	8005f3a <_free_r+0x22>
 8005fa4:	bd38      	pop	{r3, r4, r5, pc}
 8005fa6:	bf00      	nop
 8005fa8:	200002dc 	.word	0x200002dc

08005fac <__sflush_r>:
 8005fac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb4:	0716      	lsls	r6, r2, #28
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	d454      	bmi.n	8006066 <__sflush_r+0xba>
 8005fbc:	684b      	ldr	r3, [r1, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	dc02      	bgt.n	8005fc8 <__sflush_r+0x1c>
 8005fc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	dd48      	ble.n	800605a <__sflush_r+0xae>
 8005fc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fca:	2e00      	cmp	r6, #0
 8005fcc:	d045      	beq.n	800605a <__sflush_r+0xae>
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fd4:	682f      	ldr	r7, [r5, #0]
 8005fd6:	6a21      	ldr	r1, [r4, #32]
 8005fd8:	602b      	str	r3, [r5, #0]
 8005fda:	d030      	beq.n	800603e <__sflush_r+0x92>
 8005fdc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	0759      	lsls	r1, r3, #29
 8005fe2:	d505      	bpl.n	8005ff0 <__sflush_r+0x44>
 8005fe4:	6863      	ldr	r3, [r4, #4]
 8005fe6:	1ad2      	subs	r2, r2, r3
 8005fe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fea:	b10b      	cbz	r3, 8005ff0 <__sflush_r+0x44>
 8005fec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ff4:	6a21      	ldr	r1, [r4, #32]
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b0      	blx	r6
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	d106      	bne.n	800600e <__sflush_r+0x62>
 8006000:	6829      	ldr	r1, [r5, #0]
 8006002:	291d      	cmp	r1, #29
 8006004:	d82b      	bhi.n	800605e <__sflush_r+0xb2>
 8006006:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <__sflush_r+0x104>)
 8006008:	410a      	asrs	r2, r1
 800600a:	07d6      	lsls	r6, r2, #31
 800600c:	d427      	bmi.n	800605e <__sflush_r+0xb2>
 800600e:	2200      	movs	r2, #0
 8006010:	6062      	str	r2, [r4, #4]
 8006012:	04d9      	lsls	r1, r3, #19
 8006014:	6922      	ldr	r2, [r4, #16]
 8006016:	6022      	str	r2, [r4, #0]
 8006018:	d504      	bpl.n	8006024 <__sflush_r+0x78>
 800601a:	1c42      	adds	r2, r0, #1
 800601c:	d101      	bne.n	8006022 <__sflush_r+0x76>
 800601e:	682b      	ldr	r3, [r5, #0]
 8006020:	b903      	cbnz	r3, 8006024 <__sflush_r+0x78>
 8006022:	6560      	str	r0, [r4, #84]	@ 0x54
 8006024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006026:	602f      	str	r7, [r5, #0]
 8006028:	b1b9      	cbz	r1, 800605a <__sflush_r+0xae>
 800602a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800602e:	4299      	cmp	r1, r3
 8006030:	d002      	beq.n	8006038 <__sflush_r+0x8c>
 8006032:	4628      	mov	r0, r5
 8006034:	f7ff ff70 	bl	8005f18 <_free_r>
 8006038:	2300      	movs	r3, #0
 800603a:	6363      	str	r3, [r4, #52]	@ 0x34
 800603c:	e00d      	b.n	800605a <__sflush_r+0xae>
 800603e:	2301      	movs	r3, #1
 8006040:	4628      	mov	r0, r5
 8006042:	47b0      	blx	r6
 8006044:	4602      	mov	r2, r0
 8006046:	1c50      	adds	r0, r2, #1
 8006048:	d1c9      	bne.n	8005fde <__sflush_r+0x32>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0c6      	beq.n	8005fde <__sflush_r+0x32>
 8006050:	2b1d      	cmp	r3, #29
 8006052:	d001      	beq.n	8006058 <__sflush_r+0xac>
 8006054:	2b16      	cmp	r3, #22
 8006056:	d11e      	bne.n	8006096 <__sflush_r+0xea>
 8006058:	602f      	str	r7, [r5, #0]
 800605a:	2000      	movs	r0, #0
 800605c:	e022      	b.n	80060a4 <__sflush_r+0xf8>
 800605e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006062:	b21b      	sxth	r3, r3
 8006064:	e01b      	b.n	800609e <__sflush_r+0xf2>
 8006066:	690f      	ldr	r7, [r1, #16]
 8006068:	2f00      	cmp	r7, #0
 800606a:	d0f6      	beq.n	800605a <__sflush_r+0xae>
 800606c:	0793      	lsls	r3, r2, #30
 800606e:	680e      	ldr	r6, [r1, #0]
 8006070:	bf08      	it	eq
 8006072:	694b      	ldreq	r3, [r1, #20]
 8006074:	600f      	str	r7, [r1, #0]
 8006076:	bf18      	it	ne
 8006078:	2300      	movne	r3, #0
 800607a:	eba6 0807 	sub.w	r8, r6, r7
 800607e:	608b      	str	r3, [r1, #8]
 8006080:	f1b8 0f00 	cmp.w	r8, #0
 8006084:	dde9      	ble.n	800605a <__sflush_r+0xae>
 8006086:	6a21      	ldr	r1, [r4, #32]
 8006088:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800608a:	4643      	mov	r3, r8
 800608c:	463a      	mov	r2, r7
 800608e:	4628      	mov	r0, r5
 8006090:	47b0      	blx	r6
 8006092:	2800      	cmp	r0, #0
 8006094:	dc08      	bgt.n	80060a8 <__sflush_r+0xfc>
 8006096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800609a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800609e:	81a3      	strh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295
 80060a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060a8:	4407      	add	r7, r0
 80060aa:	eba8 0800 	sub.w	r8, r8, r0
 80060ae:	e7e7      	b.n	8006080 <__sflush_r+0xd4>
 80060b0:	dfbffffe 	.word	0xdfbffffe

080060b4 <_fflush_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4605      	mov	r5, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b913      	cbnz	r3, 80060c4 <_fflush_r+0x10>
 80060be:	2500      	movs	r5, #0
 80060c0:	4628      	mov	r0, r5
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	b118      	cbz	r0, 80060ce <_fflush_r+0x1a>
 80060c6:	6a03      	ldr	r3, [r0, #32]
 80060c8:	b90b      	cbnz	r3, 80060ce <_fflush_r+0x1a>
 80060ca:	f7ff fd2d 	bl	8005b28 <__sinit>
 80060ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0f3      	beq.n	80060be <_fflush_r+0xa>
 80060d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060d8:	07d0      	lsls	r0, r2, #31
 80060da:	d404      	bmi.n	80060e6 <_fflush_r+0x32>
 80060dc:	0599      	lsls	r1, r3, #22
 80060de:	d402      	bmi.n	80060e6 <_fflush_r+0x32>
 80060e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060e2:	f7ff ff16 	bl	8005f12 <__retarget_lock_acquire_recursive>
 80060e6:	4628      	mov	r0, r5
 80060e8:	4621      	mov	r1, r4
 80060ea:	f7ff ff5f 	bl	8005fac <__sflush_r>
 80060ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060f0:	07da      	lsls	r2, r3, #31
 80060f2:	4605      	mov	r5, r0
 80060f4:	d4e4      	bmi.n	80060c0 <_fflush_r+0xc>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	059b      	lsls	r3, r3, #22
 80060fa:	d4e1      	bmi.n	80060c0 <_fflush_r+0xc>
 80060fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060fe:	f7ff ff09 	bl	8005f14 <__retarget_lock_release_recursive>
 8006102:	e7dd      	b.n	80060c0 <_fflush_r+0xc>

08006104 <__swhatbuf_r>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	460c      	mov	r4, r1
 8006108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610c:	2900      	cmp	r1, #0
 800610e:	b096      	sub	sp, #88	@ 0x58
 8006110:	4615      	mov	r5, r2
 8006112:	461e      	mov	r6, r3
 8006114:	da0d      	bge.n	8006132 <__swhatbuf_r+0x2e>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800611c:	f04f 0100 	mov.w	r1, #0
 8006120:	bf14      	ite	ne
 8006122:	2340      	movne	r3, #64	@ 0x40
 8006124:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006128:	2000      	movs	r0, #0
 800612a:	6031      	str	r1, [r6, #0]
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	b016      	add	sp, #88	@ 0x58
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	466a      	mov	r2, sp
 8006134:	f000 f848 	bl	80061c8 <_fstat_r>
 8006138:	2800      	cmp	r0, #0
 800613a:	dbec      	blt.n	8006116 <__swhatbuf_r+0x12>
 800613c:	9901      	ldr	r1, [sp, #4]
 800613e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006142:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006146:	4259      	negs	r1, r3
 8006148:	4159      	adcs	r1, r3
 800614a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800614e:	e7eb      	b.n	8006128 <__swhatbuf_r+0x24>

08006150 <__smakebuf_r>:
 8006150:	898b      	ldrh	r3, [r1, #12]
 8006152:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006154:	079d      	lsls	r5, r3, #30
 8006156:	4606      	mov	r6, r0
 8006158:	460c      	mov	r4, r1
 800615a:	d507      	bpl.n	800616c <__smakebuf_r+0x1c>
 800615c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	6123      	str	r3, [r4, #16]
 8006164:	2301      	movs	r3, #1
 8006166:	6163      	str	r3, [r4, #20]
 8006168:	b003      	add	sp, #12
 800616a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800616c:	ab01      	add	r3, sp, #4
 800616e:	466a      	mov	r2, sp
 8006170:	f7ff ffc8 	bl	8006104 <__swhatbuf_r>
 8006174:	9f00      	ldr	r7, [sp, #0]
 8006176:	4605      	mov	r5, r0
 8006178:	4639      	mov	r1, r7
 800617a:	4630      	mov	r0, r6
 800617c:	f7ff fbbc 	bl	80058f8 <_malloc_r>
 8006180:	b948      	cbnz	r0, 8006196 <__smakebuf_r+0x46>
 8006182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006186:	059a      	lsls	r2, r3, #22
 8006188:	d4ee      	bmi.n	8006168 <__smakebuf_r+0x18>
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	f043 0302 	orr.w	r3, r3, #2
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	e7e2      	b.n	800615c <__smakebuf_r+0xc>
 8006196:	89a3      	ldrh	r3, [r4, #12]
 8006198:	6020      	str	r0, [r4, #0]
 800619a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800619e:	81a3      	strh	r3, [r4, #12]
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061a6:	b15b      	cbz	r3, 80061c0 <__smakebuf_r+0x70>
 80061a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ac:	4630      	mov	r0, r6
 80061ae:	f000 f81d 	bl	80061ec <_isatty_r>
 80061b2:	b128      	cbz	r0, 80061c0 <__smakebuf_r+0x70>
 80061b4:	89a3      	ldrh	r3, [r4, #12]
 80061b6:	f023 0303 	bic.w	r3, r3, #3
 80061ba:	f043 0301 	orr.w	r3, r3, #1
 80061be:	81a3      	strh	r3, [r4, #12]
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	431d      	orrs	r5, r3
 80061c4:	81a5      	strh	r5, [r4, #12]
 80061c6:	e7cf      	b.n	8006168 <__smakebuf_r+0x18>

080061c8 <_fstat_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	4d07      	ldr	r5, [pc, #28]	@ (80061e8 <_fstat_r+0x20>)
 80061cc:	2300      	movs	r3, #0
 80061ce:	4604      	mov	r4, r0
 80061d0:	4608      	mov	r0, r1
 80061d2:	4611      	mov	r1, r2
 80061d4:	602b      	str	r3, [r5, #0]
 80061d6:	f7fb f8d0 	bl	800137a <_fstat>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d102      	bne.n	80061e4 <_fstat_r+0x1c>
 80061de:	682b      	ldr	r3, [r5, #0]
 80061e0:	b103      	cbz	r3, 80061e4 <_fstat_r+0x1c>
 80061e2:	6023      	str	r3, [r4, #0]
 80061e4:	bd38      	pop	{r3, r4, r5, pc}
 80061e6:	bf00      	nop
 80061e8:	2000041c 	.word	0x2000041c

080061ec <_isatty_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4d06      	ldr	r5, [pc, #24]	@ (8006208 <_isatty_r+0x1c>)
 80061f0:	2300      	movs	r3, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	4608      	mov	r0, r1
 80061f6:	602b      	str	r3, [r5, #0]
 80061f8:	f7fb f8cf 	bl	800139a <_isatty>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_isatty_r+0x1a>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_isatty_r+0x1a>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	2000041c 	.word	0x2000041c
 800620c:	00000000 	.word	0x00000000

08006210 <log>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	ed2d 8b02 	vpush	{d8}
 8006216:	ec55 4b10 	vmov	r4, r5, d0
 800621a:	f000 f841 	bl	80062a0 <__ieee754_log>
 800621e:	4622      	mov	r2, r4
 8006220:	462b      	mov	r3, r5
 8006222:	4620      	mov	r0, r4
 8006224:	4629      	mov	r1, r5
 8006226:	eeb0 8a40 	vmov.f32	s16, s0
 800622a:	eef0 8a60 	vmov.f32	s17, s1
 800622e:	f7fa fc29 	bl	8000a84 <__aeabi_dcmpun>
 8006232:	b998      	cbnz	r0, 800625c <log+0x4c>
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	4620      	mov	r0, r4
 800623a:	4629      	mov	r1, r5
 800623c:	f7fa fc18 	bl	8000a70 <__aeabi_dcmpgt>
 8006240:	b960      	cbnz	r0, 800625c <log+0x4c>
 8006242:	2200      	movs	r2, #0
 8006244:	2300      	movs	r3, #0
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa fbe9 	bl	8000a20 <__aeabi_dcmpeq>
 800624e:	b160      	cbz	r0, 800626a <log+0x5a>
 8006250:	f7ff fe34 	bl	8005ebc <__errno>
 8006254:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006280 <log+0x70>
 8006258:	2322      	movs	r3, #34	@ 0x22
 800625a:	6003      	str	r3, [r0, #0]
 800625c:	eeb0 0a48 	vmov.f32	s0, s16
 8006260:	eef0 0a68 	vmov.f32	s1, s17
 8006264:	ecbd 8b02 	vpop	{d8}
 8006268:	bd38      	pop	{r3, r4, r5, pc}
 800626a:	f7ff fe27 	bl	8005ebc <__errno>
 800626e:	ecbd 8b02 	vpop	{d8}
 8006272:	2321      	movs	r3, #33	@ 0x21
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800627a:	4803      	ldr	r0, [pc, #12]	@ (8006288 <log+0x78>)
 800627c:	f000 b808 	b.w	8006290 <nan>
 8006280:	00000000 	.word	0x00000000
 8006284:	fff00000 	.word	0xfff00000
 8006288:	080067e6 	.word	0x080067e6
 800628c:	00000000 	.word	0x00000000

08006290 <nan>:
 8006290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006298 <nan+0x8>
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	00000000 	.word	0x00000000
 800629c:	7ff80000 	.word	0x7ff80000

080062a0 <__ieee754_log>:
 80062a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a4:	ec51 0b10 	vmov	r0, r1, d0
 80062a8:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80062ac:	b087      	sub	sp, #28
 80062ae:	460d      	mov	r5, r1
 80062b0:	da26      	bge.n	8006300 <__ieee754_log+0x60>
 80062b2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80062b6:	4303      	orrs	r3, r0
 80062b8:	4602      	mov	r2, r0
 80062ba:	d10a      	bne.n	80062d2 <__ieee754_log+0x32>
 80062bc:	49ce      	ldr	r1, [pc, #824]	@ (80065f8 <__ieee754_log+0x358>)
 80062be:	2200      	movs	r2, #0
 80062c0:	2300      	movs	r3, #0
 80062c2:	2000      	movs	r0, #0
 80062c4:	f7fa fa6e 	bl	80007a4 <__aeabi_ddiv>
 80062c8:	ec41 0b10 	vmov	d0, r0, r1
 80062cc:	b007      	add	sp, #28
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	2900      	cmp	r1, #0
 80062d4:	da05      	bge.n	80062e2 <__ieee754_log+0x42>
 80062d6:	460b      	mov	r3, r1
 80062d8:	f7f9 ff82 	bl	80001e0 <__aeabi_dsub>
 80062dc:	2200      	movs	r2, #0
 80062de:	2300      	movs	r3, #0
 80062e0:	e7f0      	b.n	80062c4 <__ieee754_log+0x24>
 80062e2:	4bc6      	ldr	r3, [pc, #792]	@ (80065fc <__ieee754_log+0x35c>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	f7fa f933 	bl	8000550 <__aeabi_dmul>
 80062ea:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80062ee:	460d      	mov	r5, r1
 80062f0:	4ac3      	ldr	r2, [pc, #780]	@ (8006600 <__ieee754_log+0x360>)
 80062f2:	4295      	cmp	r5, r2
 80062f4:	dd06      	ble.n	8006304 <__ieee754_log+0x64>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	f7f9 ff73 	bl	80001e4 <__adddf3>
 80062fe:	e7e3      	b.n	80062c8 <__ieee754_log+0x28>
 8006300:	2300      	movs	r3, #0
 8006302:	e7f5      	b.n	80062f0 <__ieee754_log+0x50>
 8006304:	152c      	asrs	r4, r5, #20
 8006306:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800630a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800630e:	441c      	add	r4, r3
 8006310:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8006314:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8006318:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800631c:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8006320:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8006324:	ea42 0105 	orr.w	r1, r2, r5
 8006328:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800632c:	2200      	movs	r2, #0
 800632e:	4bb5      	ldr	r3, [pc, #724]	@ (8006604 <__ieee754_log+0x364>)
 8006330:	f7f9 ff56 	bl	80001e0 <__aeabi_dsub>
 8006334:	1cab      	adds	r3, r5, #2
 8006336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800633a:	2b02      	cmp	r3, #2
 800633c:	4682      	mov	sl, r0
 800633e:	468b      	mov	fp, r1
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	dc53      	bgt.n	80063ee <__ieee754_log+0x14e>
 8006346:	2300      	movs	r3, #0
 8006348:	f7fa fb6a 	bl	8000a20 <__aeabi_dcmpeq>
 800634c:	b1d0      	cbz	r0, 8006384 <__ieee754_log+0xe4>
 800634e:	2c00      	cmp	r4, #0
 8006350:	f000 8120 	beq.w	8006594 <__ieee754_log+0x2f4>
 8006354:	4620      	mov	r0, r4
 8006356:	f7fa f891 	bl	800047c <__aeabi_i2d>
 800635a:	a391      	add	r3, pc, #580	@ (adr r3, 80065a0 <__ieee754_log+0x300>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	4606      	mov	r6, r0
 8006362:	460f      	mov	r7, r1
 8006364:	f7fa f8f4 	bl	8000550 <__aeabi_dmul>
 8006368:	a38f      	add	r3, pc, #572	@ (adr r3, 80065a8 <__ieee754_log+0x308>)
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	4604      	mov	r4, r0
 8006370:	460d      	mov	r5, r1
 8006372:	4630      	mov	r0, r6
 8006374:	4639      	mov	r1, r7
 8006376:	f7fa f8eb 	bl	8000550 <__aeabi_dmul>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	e7ba      	b.n	80062fa <__ieee754_log+0x5a>
 8006384:	a38a      	add	r3, pc, #552	@ (adr r3, 80065b0 <__ieee754_log+0x310>)
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	4650      	mov	r0, sl
 800638c:	4659      	mov	r1, fp
 800638e:	f7fa f8df 	bl	8000550 <__aeabi_dmul>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	2000      	movs	r0, #0
 8006398:	499b      	ldr	r1, [pc, #620]	@ (8006608 <__ieee754_log+0x368>)
 800639a:	f7f9 ff21 	bl	80001e0 <__aeabi_dsub>
 800639e:	4652      	mov	r2, sl
 80063a0:	4606      	mov	r6, r0
 80063a2:	460f      	mov	r7, r1
 80063a4:	465b      	mov	r3, fp
 80063a6:	4650      	mov	r0, sl
 80063a8:	4659      	mov	r1, fp
 80063aa:	f7fa f8d1 	bl	8000550 <__aeabi_dmul>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	4630      	mov	r0, r6
 80063b4:	4639      	mov	r1, r7
 80063b6:	f7fa f8cb 	bl	8000550 <__aeabi_dmul>
 80063ba:	4606      	mov	r6, r0
 80063bc:	460f      	mov	r7, r1
 80063be:	b914      	cbnz	r4, 80063c6 <__ieee754_log+0x126>
 80063c0:	4632      	mov	r2, r6
 80063c2:	463b      	mov	r3, r7
 80063c4:	e0a0      	b.n	8006508 <__ieee754_log+0x268>
 80063c6:	4620      	mov	r0, r4
 80063c8:	f7fa f858 	bl	800047c <__aeabi_i2d>
 80063cc:	a374      	add	r3, pc, #464	@ (adr r3, 80065a0 <__ieee754_log+0x300>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	4680      	mov	r8, r0
 80063d4:	4689      	mov	r9, r1
 80063d6:	f7fa f8bb 	bl	8000550 <__aeabi_dmul>
 80063da:	a373      	add	r3, pc, #460	@ (adr r3, 80065a8 <__ieee754_log+0x308>)
 80063dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e0:	4604      	mov	r4, r0
 80063e2:	460d      	mov	r5, r1
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	f7fa f8b2 	bl	8000550 <__aeabi_dmul>
 80063ec:	e0a5      	b.n	800653a <__ieee754_log+0x29a>
 80063ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063f2:	f7f9 fef7 	bl	80001e4 <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	f7fa f9d1 	bl	80007a4 <__aeabi_ddiv>
 8006402:	e9cd 0100 	strd	r0, r1, [sp]
 8006406:	4620      	mov	r0, r4
 8006408:	f7fa f838 	bl	800047c <__aeabi_i2d>
 800640c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006414:	4610      	mov	r0, r2
 8006416:	4619      	mov	r1, r3
 8006418:	f7fa f89a 	bl	8000550 <__aeabi_dmul>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006424:	f7fa f894 	bl	8000550 <__aeabi_dmul>
 8006428:	a363      	add	r3, pc, #396	@ (adr r3, 80065b8 <__ieee754_log+0x318>)
 800642a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642e:	4680      	mov	r8, r0
 8006430:	4689      	mov	r9, r1
 8006432:	f7fa f88d 	bl	8000550 <__aeabi_dmul>
 8006436:	a362      	add	r3, pc, #392	@ (adr r3, 80065c0 <__ieee754_log+0x320>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7f9 fed2 	bl	80001e4 <__adddf3>
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	f7fa f884 	bl	8000550 <__aeabi_dmul>
 8006448:	a35f      	add	r3, pc, #380	@ (adr r3, 80065c8 <__ieee754_log+0x328>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7f9 fec9 	bl	80001e4 <__adddf3>
 8006452:	4642      	mov	r2, r8
 8006454:	464b      	mov	r3, r9
 8006456:	f7fa f87b 	bl	8000550 <__aeabi_dmul>
 800645a:	a35d      	add	r3, pc, #372	@ (adr r3, 80065d0 <__ieee754_log+0x330>)
 800645c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006460:	f7f9 fec0 	bl	80001e4 <__adddf3>
 8006464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006468:	f7fa f872 	bl	8000550 <__aeabi_dmul>
 800646c:	a35a      	add	r3, pc, #360	@ (adr r3, 80065d8 <__ieee754_log+0x338>)
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006476:	4640      	mov	r0, r8
 8006478:	4649      	mov	r1, r9
 800647a:	f7fa f869 	bl	8000550 <__aeabi_dmul>
 800647e:	a358      	add	r3, pc, #352	@ (adr r3, 80065e0 <__ieee754_log+0x340>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7f9 feae 	bl	80001e4 <__adddf3>
 8006488:	4642      	mov	r2, r8
 800648a:	464b      	mov	r3, r9
 800648c:	f7fa f860 	bl	8000550 <__aeabi_dmul>
 8006490:	a355      	add	r3, pc, #340	@ (adr r3, 80065e8 <__ieee754_log+0x348>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f7f9 fea5 	bl	80001e4 <__adddf3>
 800649a:	4642      	mov	r2, r8
 800649c:	464b      	mov	r3, r9
 800649e:	f7fa f857 	bl	8000550 <__aeabi_dmul>
 80064a2:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80064ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064b2:	f7f9 fe97 	bl	80001e4 <__adddf3>
 80064b6:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80064ba:	3551      	adds	r5, #81	@ 0x51
 80064bc:	4335      	orrs	r5, r6
 80064be:	2d00      	cmp	r5, #0
 80064c0:	4680      	mov	r8, r0
 80064c2:	4689      	mov	r9, r1
 80064c4:	dd48      	ble.n	8006558 <__ieee754_log+0x2b8>
 80064c6:	4b50      	ldr	r3, [pc, #320]	@ (8006608 <__ieee754_log+0x368>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	4650      	mov	r0, sl
 80064cc:	4659      	mov	r1, fp
 80064ce:	f7fa f83f 	bl	8000550 <__aeabi_dmul>
 80064d2:	4652      	mov	r2, sl
 80064d4:	465b      	mov	r3, fp
 80064d6:	f7fa f83b 	bl	8000550 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4606      	mov	r6, r0
 80064e0:	460f      	mov	r7, r1
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7f9 fe7d 	bl	80001e4 <__adddf3>
 80064ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064ee:	f7fa f82f 	bl	8000550 <__aeabi_dmul>
 80064f2:	4680      	mov	r8, r0
 80064f4:	4689      	mov	r9, r1
 80064f6:	b964      	cbnz	r4, 8006512 <__ieee754_log+0x272>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4630      	mov	r0, r6
 80064fe:	4639      	mov	r1, r7
 8006500:	f7f9 fe6e 	bl	80001e0 <__aeabi_dsub>
 8006504:	4602      	mov	r2, r0
 8006506:	460b      	mov	r3, r1
 8006508:	4650      	mov	r0, sl
 800650a:	4659      	mov	r1, fp
 800650c:	f7f9 fe68 	bl	80001e0 <__aeabi_dsub>
 8006510:	e6da      	b.n	80062c8 <__ieee754_log+0x28>
 8006512:	a323      	add	r3, pc, #140	@ (adr r3, 80065a0 <__ieee754_log+0x300>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651c:	f7fa f818 	bl	8000550 <__aeabi_dmul>
 8006520:	a321      	add	r3, pc, #132	@ (adr r3, 80065a8 <__ieee754_log+0x308>)
 8006522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006526:	4604      	mov	r4, r0
 8006528:	460d      	mov	r5, r1
 800652a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800652e:	f7fa f80f 	bl	8000550 <__aeabi_dmul>
 8006532:	4642      	mov	r2, r8
 8006534:	464b      	mov	r3, r9
 8006536:	f7f9 fe55 	bl	80001e4 <__adddf3>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7f9 fe4d 	bl	80001e0 <__aeabi_dsub>
 8006546:	4652      	mov	r2, sl
 8006548:	465b      	mov	r3, fp
 800654a:	f7f9 fe49 	bl	80001e0 <__aeabi_dsub>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	e7d9      	b.n	800650c <__ieee754_log+0x26c>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4650      	mov	r0, sl
 800655e:	4659      	mov	r1, fp
 8006560:	f7f9 fe3e 	bl	80001e0 <__aeabi_dsub>
 8006564:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006568:	f7f9 fff2 	bl	8000550 <__aeabi_dmul>
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	2c00      	cmp	r4, #0
 8006572:	f43f af25 	beq.w	80063c0 <__ieee754_log+0x120>
 8006576:	a30a      	add	r3, pc, #40	@ (adr r3, 80065a0 <__ieee754_log+0x300>)
 8006578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006580:	f7f9 ffe6 	bl	8000550 <__aeabi_dmul>
 8006584:	a308      	add	r3, pc, #32	@ (adr r3, 80065a8 <__ieee754_log+0x308>)
 8006586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658a:	4604      	mov	r4, r0
 800658c:	460d      	mov	r5, r1
 800658e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006592:	e729      	b.n	80063e8 <__ieee754_log+0x148>
 8006594:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80065f0 <__ieee754_log+0x350>
 8006598:	e698      	b.n	80062cc <__ieee754_log+0x2c>
 800659a:	bf00      	nop
 800659c:	f3af 8000 	nop.w
 80065a0:	fee00000 	.word	0xfee00000
 80065a4:	3fe62e42 	.word	0x3fe62e42
 80065a8:	35793c76 	.word	0x35793c76
 80065ac:	3dea39ef 	.word	0x3dea39ef
 80065b0:	55555555 	.word	0x55555555
 80065b4:	3fd55555 	.word	0x3fd55555
 80065b8:	df3e5244 	.word	0xdf3e5244
 80065bc:	3fc2f112 	.word	0x3fc2f112
 80065c0:	96cb03de 	.word	0x96cb03de
 80065c4:	3fc74664 	.word	0x3fc74664
 80065c8:	94229359 	.word	0x94229359
 80065cc:	3fd24924 	.word	0x3fd24924
 80065d0:	55555593 	.word	0x55555593
 80065d4:	3fe55555 	.word	0x3fe55555
 80065d8:	d078c69f 	.word	0xd078c69f
 80065dc:	3fc39a09 	.word	0x3fc39a09
 80065e0:	1d8e78af 	.word	0x1d8e78af
 80065e4:	3fcc71c5 	.word	0x3fcc71c5
 80065e8:	9997fa04 	.word	0x9997fa04
 80065ec:	3fd99999 	.word	0x3fd99999
	...
 80065f8:	c3500000 	.word	0xc3500000
 80065fc:	43500000 	.word	0x43500000
 8006600:	7fefffff 	.word	0x7fefffff
 8006604:	3ff00000 	.word	0x3ff00000
 8006608:	3fe00000 	.word	0x3fe00000

0800660c <_init>:
 800660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660e:	bf00      	nop
 8006610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006612:	bc08      	pop	{r3}
 8006614:	469e      	mov	lr, r3
 8006616:	4770      	bx	lr

08006618 <_fini>:
 8006618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800661a:	bf00      	nop
 800661c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661e:	bc08      	pop	{r3}
 8006620:	469e      	mov	lr, r3
 8006622:	4770      	bx	lr
