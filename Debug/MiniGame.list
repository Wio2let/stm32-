
MiniGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f3c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007290  08007290  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007290  08007290  00008290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007298  08007298  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007298  08007298  00008298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800729c  0800729c  0000829c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080072a0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000068  08007308  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007308  0000940c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce1  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ac  00000000  00000000  00019d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  0001ce28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba2  00000000  00000000  0001dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c7c  00000000  00000000  0001e912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e61  00000000  00000000  0003858e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009139c  00000000  00000000  0004e3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df78b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  000df7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000e3d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080070bc 	.word	0x080070bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	080070bc 	.word	0x080070bc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b96a 	b.w	8000ddc <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9d08      	ldr	r5, [sp, #32]
 8000b26:	460c      	mov	r4, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14e      	bne.n	8000bca <__udivmoddi4+0xaa>
 8000b2c:	4694      	mov	ip, r2
 8000b2e:	458c      	cmp	ip, r1
 8000b30:	4686      	mov	lr, r0
 8000b32:	fab2 f282 	clz	r2, r2
 8000b36:	d962      	bls.n	8000bfe <__udivmoddi4+0xde>
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0320 	rsb	r3, r2, #32
 8000b3e:	4091      	lsls	r1, r2
 8000b40:	fa20 f303 	lsr.w	r3, r0, r3
 8000b44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b48:	4319      	orrs	r1, r3
 8000b4a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f f68c 	uxth.w	r6, ip
 8000b56:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b66:	fb04 f106 	mul.w	r1, r4, r6
 8000b6a:	4299      	cmp	r1, r3
 8000b6c:	d90a      	bls.n	8000b84 <__udivmoddi4+0x64>
 8000b6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b72:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b76:	f080 8112 	bcs.w	8000d9e <__udivmoddi4+0x27e>
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	f240 810f 	bls.w	8000d9e <__udivmoddi4+0x27e>
 8000b80:	3c02      	subs	r4, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	1a59      	subs	r1, r3, r1
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8e:	fb07 1110 	mls	r1, r7, r0, r1
 8000b92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b96:	fb00 f606 	mul.w	r6, r0, r6
 8000b9a:	429e      	cmp	r6, r3
 8000b9c:	d90a      	bls.n	8000bb4 <__udivmoddi4+0x94>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba6:	f080 80fc 	bcs.w	8000da2 <__udivmoddi4+0x282>
 8000baa:	429e      	cmp	r6, r3
 8000bac:	f240 80f9 	bls.w	8000da2 <__udivmoddi4+0x282>
 8000bb0:	4463      	add	r3, ip
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	1b9b      	subs	r3, r3, r6
 8000bb6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bba:	2100      	movs	r1, #0
 8000bbc:	b11d      	cbz	r5, 8000bc6 <__udivmoddi4+0xa6>
 8000bbe:	40d3      	lsrs	r3, r2
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	d905      	bls.n	8000bda <__udivmoddi4+0xba>
 8000bce:	b10d      	cbz	r5, 8000bd4 <__udivmoddi4+0xb4>
 8000bd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4608      	mov	r0, r1
 8000bd8:	e7f5      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bda:	fab3 f183 	clz	r1, r3
 8000bde:	2900      	cmp	r1, #0
 8000be0:	d146      	bne.n	8000c70 <__udivmoddi4+0x150>
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	d302      	bcc.n	8000bec <__udivmoddi4+0xcc>
 8000be6:	4290      	cmp	r0, r2
 8000be8:	f0c0 80f0 	bcc.w	8000dcc <__udivmoddi4+0x2ac>
 8000bec:	1a86      	subs	r6, r0, r2
 8000bee:	eb64 0303 	sbc.w	r3, r4, r3
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	2d00      	cmp	r5, #0
 8000bf6:	d0e6      	beq.n	8000bc6 <__udivmoddi4+0xa6>
 8000bf8:	e9c5 6300 	strd	r6, r3, [r5]
 8000bfc:	e7e3      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	f040 8090 	bne.w	8000d24 <__udivmoddi4+0x204>
 8000c04:	eba1 040c 	sub.w	r4, r1, ip
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	2101      	movs	r1, #1
 8000c12:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c1a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c22:	fb07 f006 	mul.w	r0, r7, r6
 8000c26:	4298      	cmp	r0, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x11c>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c32:	d202      	bcs.n	8000c3a <__udivmoddi4+0x11a>
 8000c34:	4298      	cmp	r0, r3
 8000c36:	f200 80cd 	bhi.w	8000dd4 <__udivmoddi4+0x2b4>
 8000c3a:	4626      	mov	r6, r4
 8000c3c:	1a1c      	subs	r4, r3, r0
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c46:	fb08 4410 	mls	r4, r8, r0, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb00 f707 	mul.w	r7, r0, r7
 8000c52:	429f      	cmp	r7, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x148>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x146>
 8000c60:	429f      	cmp	r7, r3
 8000c62:	f200 80b0 	bhi.w	8000dc6 <__udivmoddi4+0x2a6>
 8000c66:	4620      	mov	r0, r4
 8000c68:	1bdb      	subs	r3, r3, r7
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	e7a5      	b.n	8000bbc <__udivmoddi4+0x9c>
 8000c70:	f1c1 0620 	rsb	r6, r1, #32
 8000c74:	408b      	lsls	r3, r1
 8000c76:	fa22 f706 	lsr.w	r7, r2, r6
 8000c7a:	431f      	orrs	r7, r3
 8000c7c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c80:	fa04 f301 	lsl.w	r3, r4, r1
 8000c84:	ea43 030c 	orr.w	r3, r3, ip
 8000c88:	40f4      	lsrs	r4, r6
 8000c8a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8e:	0c38      	lsrs	r0, r7, #16
 8000c90:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c94:	fbb4 fef0 	udiv	lr, r4, r0
 8000c98:	fa1f fc87 	uxth.w	ip, r7
 8000c9c:	fb00 441e 	mls	r4, r0, lr, r4
 8000ca0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca4:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca8:	45a1      	cmp	r9, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	d90a      	bls.n	8000cc6 <__udivmoddi4+0x1a6>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb6:	f080 8084 	bcs.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cba:	45a1      	cmp	r9, r4
 8000cbc:	f240 8081 	bls.w	8000dc2 <__udivmoddi4+0x2a2>
 8000cc0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc4:	443c      	add	r4, r7
 8000cc6:	eba4 0409 	sub.w	r4, r4, r9
 8000cca:	fa1f f983 	uxth.w	r9, r3
 8000cce:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cd2:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cda:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cde:	45a4      	cmp	ip, r4
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x1d2>
 8000ce2:	193c      	adds	r4, r7, r4
 8000ce4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce8:	d267      	bcs.n	8000dba <__udivmoddi4+0x29a>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0x29a>
 8000cee:	3b02      	subs	r3, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf6:	fba0 9302 	umull	r9, r3, r0, r2
 8000cfa:	eba4 040c 	sub.w	r4, r4, ip
 8000cfe:	429c      	cmp	r4, r3
 8000d00:	46ce      	mov	lr, r9
 8000d02:	469c      	mov	ip, r3
 8000d04:	d351      	bcc.n	8000daa <__udivmoddi4+0x28a>
 8000d06:	d04e      	beq.n	8000da6 <__udivmoddi4+0x286>
 8000d08:	b155      	cbz	r5, 8000d20 <__udivmoddi4+0x200>
 8000d0a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d12:	fa04 f606 	lsl.w	r6, r4, r6
 8000d16:	40cb      	lsrs	r3, r1
 8000d18:	431e      	orrs	r6, r3
 8000d1a:	40cc      	lsrs	r4, r1
 8000d1c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d20:	2100      	movs	r1, #0
 8000d22:	e750      	b.n	8000bc6 <__udivmoddi4+0xa6>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f103 	lsr.w	r1, r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa24 f303 	lsr.w	r3, r4, r3
 8000d34:	4094      	lsls	r4, r2
 8000d36:	430c      	orrs	r4, r1
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d48:	fb08 3110 	mls	r1, r8, r0, r3
 8000d4c:	0c23      	lsrs	r3, r4, #16
 8000d4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d52:	fb00 f107 	mul.w	r1, r0, r7
 8000d56:	4299      	cmp	r1, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x24c>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d62:	d22c      	bcs.n	8000dbe <__udivmoddi4+0x29e>
 8000d64:	4299      	cmp	r1, r3
 8000d66:	d92a      	bls.n	8000dbe <__udivmoddi4+0x29e>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d74:	fb08 3311 	mls	r3, r8, r1, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb01 f307 	mul.w	r3, r1, r7
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x276>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d8c:	d213      	bcs.n	8000db6 <__udivmoddi4+0x296>
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	d911      	bls.n	8000db6 <__udivmoddi4+0x296>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	1ae4      	subs	r4, r4, r3
 8000d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d9c:	e739      	b.n	8000c12 <__udivmoddi4+0xf2>
 8000d9e:	4604      	mov	r4, r0
 8000da0:	e6f0      	b.n	8000b84 <__udivmoddi4+0x64>
 8000da2:	4608      	mov	r0, r1
 8000da4:	e706      	b.n	8000bb4 <__udivmoddi4+0x94>
 8000da6:	45c8      	cmp	r8, r9
 8000da8:	d2ae      	bcs.n	8000d08 <__udivmoddi4+0x1e8>
 8000daa:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dae:	eb63 0c07 	sbc.w	ip, r3, r7
 8000db2:	3801      	subs	r0, #1
 8000db4:	e7a8      	b.n	8000d08 <__udivmoddi4+0x1e8>
 8000db6:	4631      	mov	r1, r6
 8000db8:	e7ed      	b.n	8000d96 <__udivmoddi4+0x276>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	e799      	b.n	8000cf2 <__udivmoddi4+0x1d2>
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	e7d4      	b.n	8000d6c <__udivmoddi4+0x24c>
 8000dc2:	46d6      	mov	lr, sl
 8000dc4:	e77f      	b.n	8000cc6 <__udivmoddi4+0x1a6>
 8000dc6:	4463      	add	r3, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e74d      	b.n	8000c68 <__udivmoddi4+0x148>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	4623      	mov	r3, r4
 8000dd0:	4608      	mov	r0, r1
 8000dd2:	e70f      	b.n	8000bf4 <__udivmoddi4+0xd4>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	e730      	b.n	8000c3c <__udivmoddi4+0x11c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000df0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <MX_DMA_Init+0x4c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	203a      	movs	r0, #58	@ 0x3a
 8000e08:	f001 f81f 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e0c:	203a      	movs	r0, #58	@ 0x3a
 8000e0e:	f001 f838 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2046      	movs	r0, #70	@ 0x46
 8000e18:	f001 f817 	bl	8001e4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e1c:	2046      	movs	r0, #70	@ 0x46
 8000e1e:	f001 f830 	bl	8001e82 <HAL_NVIC_EnableIRQ>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b4a      	ldr	r3, [pc, #296]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b46      	ldr	r3, [pc, #280]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a45      	ldr	r2, [pc, #276]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b43      	ldr	r3, [pc, #268]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b3f      	ldr	r3, [pc, #252]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a3e      	ldr	r2, [pc, #248]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a37      	ldr	r2, [pc, #220]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ea4:	f043 0308 	orr.w	r3, r3, #8
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b35      	ldr	r3, [pc, #212]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4b31      	ldr	r3, [pc, #196]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a30      	ldr	r2, [pc, #192]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8000f80 <MX_GPIO_Init+0x150>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPO_LED_0_Pin|GPO_LED_1_Pin|GPO_LED_2_Pin|GPO_LED_3_Pin
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	21ff      	movs	r1, #255	@ 0xff
 8000ed6:	482b      	ldr	r0, [pc, #172]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ed8:	f001 fd8c 	bl	80029f4 <HAL_GPIO_WritePin>
                          |GPO_LED_4_Pin|GPO_LED_5_Pin|GPO_LED_6_Pin|GPO_LED_7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPO_HC183_PA0_Pin|GPO_HC183_PA1_Pin|GPO_HC183_PA2_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000ee2:	4828      	ldr	r0, [pc, #160]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000ee4:	f001 fd86 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPO_HC595_PB3_Pin|GPO_HC595_PB4_Pin|GPO_HC595_PB5_Pin, GPIO_PIN_RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2138      	movs	r1, #56	@ 0x38
 8000eec:	4826      	ldr	r0, [pc, #152]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000eee:	f001 fd81 	bl	80029f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPO_LED_0_Pin|GPO_LED_1_Pin|GPO_LED_2_Pin|GPO_LED_3_Pin
 8000ef2:	f641 43ff 	movw	r3, #7423	@ 0x1cff
 8000ef6:	617b      	str	r3, [r7, #20]
                          |GPO_LED_4_Pin|GPO_LED_5_Pin|GPO_LED_6_Pin|GPO_LED_7_Pin
                          |GPO_HC183_PA0_Pin|GPO_HC183_PA1_Pin|GPO_HC183_PA2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481e      	ldr	r0, [pc, #120]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000f0c:	f001 fbd6 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPI_KEY_UP_Pin;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPI_KEY_UP_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	481a      	ldr	r0, [pc, #104]	@ (8000f8c <MX_GPIO_Init+0x15c>)
 8000f24:	f001 fbca 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPI_KEY_LEFT_Pin|GPI_KEY_DOWN_Pin;
 8000f28:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4811      	ldr	r0, [pc, #68]	@ (8000f84 <MX_GPIO_Init+0x154>)
 8000f3e:	f001 fbbd 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPI_KEY_RIGHT_Pin;
 8000f42:	2304      	movs	r3, #4
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPI_KEY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480e      	ldr	r0, [pc, #56]	@ (8000f90 <MX_GPIO_Init+0x160>)
 8000f56:	f001 fbb1 	bl	80026bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPO_HC595_PB3_Pin|GPO_HC595_PB4_Pin|GPO_HC595_PB5_Pin;
 8000f5a:	2338      	movs	r3, #56	@ 0x38
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_GPIO_Init+0x158>)
 8000f72:	f001 fba3 	bl	80026bc <HAL_GPIO_Init>

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020c00 	.word	0x40020c00

08000f94 <__io_putchar>:
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int __io_putchar(int ch){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f9c:	1d39      	adds	r1, r7, #4
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <__io_putchar+0x20>)
 8000fa6:	f003 fa7b 	bl	80044a0 <HAL_UART_Transmit>
	return ch;
 8000faa:	687b      	ldr	r3, [r7, #4]

}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000194 	.word	0x20000194

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbc:	f000 fdd4 	bl	8001b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc0:	f000 f89a 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc4:	f7ff ff34 	bl	8000e30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc8:	f7ff ff0a 	bl	8000de0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000fcc:	f000 fa72 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000fd0:	f000 fabe 	bl	8001550 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000fd4:	f000 fc30 	bl	8001838 <MX_USART1_UART_Init>
  MX_TIM10_Init();
 8000fd8:	f000 fb08 	bl	80015ec <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  extern enum MODE mode;

  snakeInit();
 8000fdc:	f004 fece 	bl	8005d7c <snakeInit>

  keyInit();
 8000fe0:	f004 fd2e 	bl	8005a40 <keyInit>


  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxData, sizeof(rxData));
 8000fe4:	2232      	movs	r2, #50	@ 0x32
 8000fe6:	493b      	ldr	r1, [pc, #236]	@ (80010d4 <main+0x11c>)
 8000fe8:	483b      	ldr	r0, [pc, #236]	@ (80010d8 <main+0x120>)
 8000fea:	f003 fae4 	bl	80045b6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);		//关闭传输过半触发的中�????
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <main+0x124>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <main+0x124>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0208 	bic.w	r2, r2, #8
 8000ffc:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 switch(mode){
 8000ffe:	4b38      	ldr	r3, [pc, #224]	@ (80010e0 <main+0x128>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d863      	bhi.n	80010ce <main+0x116>
 8001006:	a201      	add	r2, pc, #4	@ (adr r2, 800100c <main+0x54>)
 8001008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100c:	0800101d 	.word	0x0800101d
 8001010:	08001035 	.word	0x08001035
 8001014:	08001029 	.word	0x08001029
 8001018:	080010c3 	.word	0x080010c3
	 case START:
		 HAL_TIM_Base_Stop_IT(&htim5);
 800101c:	4831      	ldr	r0, [pc, #196]	@ (80010e4 <main+0x12c>)
 800101e:	f002 fa4d 	bl	80034bc <HAL_TIM_Base_Stop_IT>
		 showStart();
 8001022:	f004 fcbc 	bl	800599e <showStart>
		 break;
 8001026:	e053      	b.n	80010d0 <main+0x118>
	 case PAUSE:
		 HAL_TIM_Base_Stop_IT(&htim5);
 8001028:	482e      	ldr	r0, [pc, #184]	@ (80010e4 <main+0x12c>)
 800102a:	f002 fa47 	bl	80034bc <HAL_TIM_Base_Stop_IT>
		 showPause();
 800102e:	f004 fcda 	bl	80059e6 <showPause>
		 break;
 8001032:	e04d      	b.n	80010d0 <main+0x118>
	 case RUNNING:
		 switch(difficulty){
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <main+0x130>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d01a      	beq.n	8001072 <main+0xba>
 800103c:	2b02      	cmp	r3, #2
 800103e:	dc20      	bgt.n	8001082 <main+0xca>
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <main+0x92>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d00a      	beq.n	800105e <main+0xa6>
			 break;
		 case HARD:
			 __HAL_TIM_SET_AUTORELOAD(&htim5, 99);
			 break;
		 default:
			 break;
 8001048:	e01b      	b.n	8001082 <main+0xca>
			 __HAL_TIM_SET_AUTORELOAD(&htim5, 1999);
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <main+0x12c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001052:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <main+0x12c>)
 8001056:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800105a:	60da      	str	r2, [r3, #12]
			 break;
 800105c:	e012      	b.n	8001084 <main+0xcc>
			 __HAL_TIM_SET_AUTORELOAD(&htim5, 999);
 800105e:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <main+0x12c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001066:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <main+0x12c>)
 800106a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800106e:	60da      	str	r2, [r3, #12]
			 break;
 8001070:	e008      	b.n	8001084 <main+0xcc>
			 __HAL_TIM_SET_AUTORELOAD(&htim5, 99);
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <main+0x12c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2263      	movs	r2, #99	@ 0x63
 8001078:	62da      	str	r2, [r3, #44]	@ 0x2c
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <main+0x12c>)
 800107c:	2263      	movs	r2, #99	@ 0x63
 800107e:	60da      	str	r2, [r3, #12]
			 break;
 8001080:	e000      	b.n	8001084 <main+0xcc>
			 break;
 8001082:	bf00      	nop
			 }
		 ledScore(score);
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <main+0x134>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fe0f 	bl	8005cac <ledScore>
		 HAL_TIM_Base_Start_IT(&htim5);
 800108e:	4815      	ldr	r0, [pc, #84]	@ (80010e4 <main+0x12c>)
 8001090:	f002 f9b2 	bl	80033f8 <HAL_TIM_Base_Start_IT>
		 //HAL_Delay(0.5);
		 snakeBlockUpdate(mainSnake);
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <main+0x138>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fe8d 	bl	8005db8 <snakeBlockUpdate>
		 if(!foodGenFlag){
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <main+0x13c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <main+0x100>
				foodGen(mainSnake);
 80010a6:	4b12      	ldr	r3, [pc, #72]	@ (80010f0 <main+0x138>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 ffe6 	bl	800607c <foodGen>
				beepInit();
 80010b0:	f004 fbba 	bl	8005828 <beepInit>
				eatMusic();
 80010b4:	f004 fbcc 	bl	8005850 <eatMusic>

		 }
		 beepStop();
 80010b8:	f004 fbc0 	bl	800583c <beepStop>
		 foodDisplay();
 80010bc:	f005 f836 	bl	800612c <foodDisplay>

		 break;
 80010c0:	e006      	b.n	80010d0 <main+0x118>
	 case END:
		 HAL_TIM_Base_Stop_IT(&htim5);
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <main+0x12c>)
 80010c4:	f002 f9fa 	bl	80034bc <HAL_TIM_Base_Stop_IT>
		 showEnd();
 80010c8:	f004 fca5 	bl	8005a16 <showEnd>
		 break;
 80010cc:	e000      	b.n	80010d0 <main+0x118>
	 default:
		 break;
 80010ce:	bf00      	nop
	 switch(mode){
 80010d0:	e795      	b.n	8000ffe <main+0x46>
 80010d2:	bf00      	nop
 80010d4:	20000160 	.word	0x20000160
 80010d8:	20000194 	.word	0x20000194
 80010dc:	200001dc 	.word	0x200001dc
 80010e0:	200002ae 	.word	0x200002ae
 80010e4:	200000d0 	.word	0x200000d0
 80010e8:	20000009 	.word	0x20000009
 80010ec:	200002ad 	.word	0x200002ad
 80010f0:	200002b0 	.word	0x200002b0
 80010f4:	200002ba 	.word	0x200002ba

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0320 	add.w	r3, r7, #32
 8001102:	2230      	movs	r2, #48	@ 0x30
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f005 fbd2 	bl	80068b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	f107 030c 	add.w	r3, r7, #12
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	4b27      	ldr	r3, [pc, #156]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a26      	ldr	r2, [pc, #152]	@ (80011c0 <SystemClock_Config+0xc8>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b24      	ldr	r3, [pc, #144]	@ (80011c0 <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b21      	ldr	r3, [pc, #132]	@ (80011c4 <SystemClock_Config+0xcc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <SystemClock_Config+0xcc>)
 8001142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	@ (80011c4 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001168:	2304      	movs	r3, #4
 800116a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800116c:	2364      	movs	r3, #100	@ 0x64
 800116e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001170:	2302      	movs	r3, #2
 8001172:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fc53 	bl	8002a28 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001188:	f000 f81e 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2103      	movs	r1, #3
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 feb5 	bl	8002f18 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011b4:	f000 f808 	bl	80011c8 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	@ 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 fcc7 	bl	8001c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  keyResponse();
 8001288:	f004 fbfc 	bl	8005a84 <keyResponse>
  snakeDirectionUpdated(mainSnake);
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <TIM2_IRQHandler+0x1c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fdab 	bl	8005dec <snakeDirectionUpdated>


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001296:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <TIM2_IRQHandler+0x20>)
 8001298:	f002 faac 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002b0 	.word	0x200002b0
 80012a4:	20000088 	.word	0x20000088

080012a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <USART1_IRQHandler+0x10>)
 80012ae:	f003 f9df 	bl	8004670 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000194 	.word	0x20000194

080012bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  snakePositionUpdated(mainSnake, copySnake);
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <TIM5_IRQHandler+0x58>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <TIM5_IRQHandler+0x5c>)
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f004 fe10 	bl	8005ef0 <snakePositionUpdated>
  ifHitSelf(mainSnake);
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <TIM5_IRQHandler+0x58>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 ffa1 	bl	800621c <ifHitSelf>
  ifAteFood(mainSnake, copySnake);
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <TIM5_IRQHandler+0x58>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <TIM5_IRQHandler+0x5c>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 ff3b 	bl	8006160 <ifAteFood>
  ifHitWall(mainSnake);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <TIM5_IRQHandler+0x58>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 ff74 	bl	80061dc <ifHitWall>
  recordStep();
 80012f4:	f004 fd2e 	bl	8005d54 <recordStep>
  copySnakeReset(mainSnake, copySnake);
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <TIM5_IRQHandler+0x58>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <TIM5_IRQHandler+0x5c>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f004 fe7c 	bl	8006000 <copySnakeReset>

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <TIM5_IRQHandler+0x60>)
 800130a:	f002 fa73 	bl	80037f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200002b0 	.word	0x200002b0
 8001318:	200002b4 	.word	0x200002b4
 800131c:	200000d0 	.word	0x200000d0

08001320 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <DMA2_Stream2_IRQHandler+0x10>)
 8001326:	f000 ff5f 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200001dc 	.word	0x200001dc

08001334 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream7_IRQHandler+0x10>)
 800133a:	f000 ff55 	bl	80021e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000023c 	.word	0x2000023c

08001348 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
  }

  return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e009      	b.n	80013a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fdf9 	bl	8000f94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf1      	blt.n	8001394 <_write+0x12>
  }
  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_close>:

int _close(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013e2:	605a      	str	r2, [r3, #4]
  return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_isatty>:

int _isatty(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f005 fa8a 	bl	800696c <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	@ (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20020000 	.word	0x20020000
 8001484:	00000400 	.word	0x00000400
 8001488:	20000084 	.word	0x20000084
 800148c:	20000410 	.word	0x20000410

08001490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	@ (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d0:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <MX_TIM2_Init+0x98>)
 80014d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000-1;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <MX_TIM2_Init+0x98>)
 80014da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e0:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_TIM2_Init+0x98>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80014e6:	4b19      	ldr	r3, [pc, #100]	@ (800154c <MX_TIM2_Init+0x98>)
 80014e8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_TIM2_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_TIM2_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <MX_TIM2_Init+0x98>)
 80014fc:	f001 ff2c 	bl	8003358 <HAL_TIM_Base_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001506:	f7ff fe5f 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	4619      	mov	r1, r3
 8001516:	480d      	ldr	r0, [pc, #52]	@ (800154c <MX_TIM2_Init+0x98>)
 8001518:	f002 fb1e 	bl	8003b58 <HAL_TIM_ConfigClockSource>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001522:	f7ff fe51 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152e:	463b      	mov	r3, r7
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	@ (800154c <MX_TIM2_Init+0x98>)
 8001534:	f002 fee2 	bl	80042fc <HAL_TIMEx_MasterConfigSynchronization>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800153e:	f7ff fe43 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000088 	.word	0x20000088

08001550 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800156c:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <MX_TIM5_Init+0x94>)
 800156e:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <MX_TIM5_Init+0x98>)
 8001570:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40000-1;
 8001572:	4b1c      	ldr	r3, [pc, #112]	@ (80015e4 <MX_TIM5_Init+0x94>)
 8001574:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 8001578:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b1a      	ldr	r3, [pc, #104]	@ (80015e4 <MX_TIM5_Init+0x94>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001580:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <MX_TIM5_Init+0x94>)
 8001582:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <MX_TIM5_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <MX_TIM5_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001594:	4813      	ldr	r0, [pc, #76]	@ (80015e4 <MX_TIM5_Init+0x94>)
 8001596:	f001 fedf 	bl	8003358 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015a0:	f7ff fe12 	bl	80011c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <MX_TIM5_Init+0x94>)
 80015b2:	f002 fad1 	bl	8003b58 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015bc:	f7ff fe04 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c0:	2300      	movs	r3, #0
 80015c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	@ (80015e4 <MX_TIM5_Init+0x94>)
 80015ce:	f002 fe95 	bl	80042fc <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015d8:	f7ff fdf6 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000d0 	.word	0x200000d0
 80015e8:	40000c00 	.word	0x40000c00

080015ec <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]
 8001602:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001604:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <MX_TIM10_Init+0x90>)
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <MX_TIM10_Init+0x94>)
 8001608:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 100-1;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_TIM10_Init+0x90>)
 800160c:	2263      	movs	r2, #99	@ 0x63
 800160e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_TIM10_Init+0x90>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 100-1;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_TIM10_Init+0x90>)
 8001618:	2263      	movs	r2, #99	@ 0x63
 800161a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161c:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_TIM10_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <MX_TIM10_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001628:	4814      	ldr	r0, [pc, #80]	@ (800167c <MX_TIM10_Init+0x90>)
 800162a:	f001 fe95 	bl	8003358 <HAL_TIM_Base_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001634:	f7ff fdc8 	bl	80011c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001638:	4810      	ldr	r0, [pc, #64]	@ (800167c <MX_TIM10_Init+0x90>)
 800163a:	f001 ff6e 	bl	800351a <HAL_TIM_PWM_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8001644:	f7ff fdc0 	bl	80011c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	@ 0x60
 800164a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 800164c:	2363      	movs	r3, #99	@ 0x63
 800164e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	4807      	ldr	r0, [pc, #28]	@ (800167c <MX_TIM10_Init+0x90>)
 8001660:	f002 f9b8 	bl	80039d4 <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM10_Init+0x82>
  {
    Error_Handler();
 800166a:	f7ff fdad 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800166e:	4803      	ldr	r0, [pc, #12]	@ (800167c <MX_TIM10_Init+0x90>)
 8001670:	f000 f8a8 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000118 	.word	0x20000118
 8001680:	40014400 	.word	0x40014400

08001684 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 031c 	add.w	r3, r7, #28
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016a4:	d134      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	4b42      	ldr	r3, [pc, #264]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a41      	ldr	r2, [pc, #260]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b3f      	ldr	r3, [pc, #252]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	61bb      	str	r3, [r7, #24]
 80016c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a3a      	ldr	r2, [pc, #232]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016de:	2302      	movs	r3, #2
 80016e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ee:	2301      	movs	r3, #1
 80016f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	4619      	mov	r1, r3
 80016f8:	482f      	ldr	r0, [pc, #188]	@ (80017b8 <HAL_TIM_Base_MspInit+0x134>)
 80016fa:	f000 ffdf 	bl	80026bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2101      	movs	r1, #1
 8001702:	201c      	movs	r0, #28
 8001704:	f000 fba1 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001708:	201c      	movs	r0, #28
 800170a:	f000 fbba 	bl	8001e82 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800170e:	e04c      	b.n	80017aa <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM5)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a29      	ldr	r2, [pc, #164]	@ (80017bc <HAL_TIM_Base_MspInit+0x138>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d134      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b25      	ldr	r3, [pc, #148]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a24      	ldr	r2, [pc, #144]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b22      	ldr	r3, [pc, #136]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001752:	2304      	movs	r3, #4
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001762:	2302      	movs	r3, #2
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4812      	ldr	r0, [pc, #72]	@ (80017b8 <HAL_TIM_Base_MspInit+0x134>)
 800176e:	f000 ffa5 	bl	80026bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2102      	movs	r1, #2
 8001776:	2032      	movs	r0, #50	@ 0x32
 8001778:	f000 fb67 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800177c:	2032      	movs	r0, #50	@ 0x32
 800177e:	f000 fb80 	bl	8001e82 <HAL_NVIC_EnableIRQ>
}
 8001782:	e012      	b.n	80017aa <HAL_TIM_Base_MspInit+0x126>
  else if(tim_baseHandle->Instance==TIM10)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_TIM_Base_MspInit+0x13c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10d      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_TIM_Base_MspInit+0x130>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	@ 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40000c00 	.word	0x40000c00
 80017c0:	40014400 	.word	0x40014400

080017c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM10)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_TIM_MspPostInit+0x68>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d11e      	bne.n	8001824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	4a10      	ldr	r2, [pc, #64]	@ (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <HAL_TIM_MspPostInit+0x6c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PB8     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001802:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001806:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001814:	2303      	movs	r3, #3
 8001816:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	@ (8001834 <HAL_TIM_MspPostInit+0x70>)
 8001820:	f000 ff4c 	bl	80026bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40014400 	.word	0x40014400
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400

08001838 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 800183e:	4a12      	ldr	r2, [pc, #72]	@ (8001888 <MX_USART1_UART_Init+0x50>)
 8001840:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186e:	4805      	ldr	r0, [pc, #20]	@ (8001884 <MX_USART1_UART_Init+0x4c>)
 8001870:	f002 fdc6 	bl	8004400 <HAL_UART_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800187a:	f7ff fca5 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000194 	.word	0x20000194
 8001888:	40011000 	.word	0x40011000

0800188c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	@ (80019dc <HAL_UART_MspInit+0x150>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f040 8091 	bne.w	80019d2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	4b4a      	ldr	r3, [pc, #296]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b8:	4a49      	ldr	r2, [pc, #292]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c0:	4b47      	ldr	r3, [pc, #284]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4b43      	ldr	r3, [pc, #268]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d4:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6313      	str	r3, [r2, #48]	@ 0x30
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <HAL_UART_MspInit+0x154>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018e8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f6:	2303      	movs	r3, #3
 80018f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018fa:	2307      	movs	r3, #7
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	4619      	mov	r1, r3
 8001904:	4837      	ldr	r0, [pc, #220]	@ (80019e4 <HAL_UART_MspInit+0x158>)
 8001906:	f000 fed9 	bl	80026bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800190c:	4a37      	ldr	r2, [pc, #220]	@ (80019ec <HAL_UART_MspInit+0x160>)
 800190e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001912:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001916:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192c:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800192e:	2200      	movs	r2, #0
 8001930:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193e:	4b2a      	ldr	r3, [pc, #168]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001940:	2200      	movs	r2, #0
 8001942:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001946:	2200      	movs	r2, #0
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800194a:	4827      	ldr	r0, [pc, #156]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800194c:	f000 fab4 	bl	8001eb8 <HAL_DMA_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001956:	f7ff fc37 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a22      	ldr	r2, [pc, #136]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 800195e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001960:	4a21      	ldr	r2, [pc, #132]	@ (80019e8 <HAL_UART_MspInit+0x15c>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 8001968:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_UART_MspInit+0x168>)
 800196a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800196c:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001972:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001974:	4b1e      	ldr	r3, [pc, #120]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 8001976:	2240      	movs	r2, #64	@ 0x40
 8001978:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001980:	4b1b      	ldr	r3, [pc, #108]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 8001982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001986:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001988:	4b19      	ldr	r3, [pc, #100]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800198e:	4b18      	ldr	r3, [pc, #96]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800199a:	4b15      	ldr	r3, [pc, #84]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80019a6:	4812      	ldr	r0, [pc, #72]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 80019a8:	f000 fa86 	bl	8001eb8 <HAL_DMA_Init>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80019b2:	f7ff fc09 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 80019ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80019bc:	4a0c      	ldr	r2, [pc, #48]	@ (80019f0 <HAL_UART_MspInit+0x164>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	210a      	movs	r1, #10
 80019c6:	2025      	movs	r0, #37	@ 0x25
 80019c8:	f000 fa3f 	bl	8001e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019cc:	2025      	movs	r0, #37	@ 0x25
 80019ce:	f000 fa58 	bl	8001e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	@ 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40011000 	.word	0x40011000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	200001dc 	.word	0x200001dc
 80019ec:	40026440 	.word	0x40026440
 80019f0:	2000023c 	.word	0x2000023c
 80019f4:	400264b8 	.word	0x400264b8

080019f8 <HAL_UART_TxCpltCallback>:


/*串口结束传输中断*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_UARTEx_RxEventCallback>:



/*串口接收完成中断*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]

    if (huart->Instance == USART1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a35      	ldr	r2, [pc, #212]	@ (8001af4 <HAL_UARTEx_RxEventCallback+0xe8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d163      	bne.n	8001aea <HAL_UARTEx_RxEventCallback+0xde>
    {
    	dataLength = size;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001a28:	701a      	strb	r2, [r3, #0]
    	if(rxData[0] =='[' && rxData[dataLength-1] == ']'){
 8001a2a:	4b34      	ldr	r3, [pc, #208]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b5b      	cmp	r3, #91	@ 0x5b
 8001a30:	d127      	bne.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	4a30      	ldr	r2, [pc, #192]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a3a:	5cd3      	ldrb	r3, [r2, r3]
 8001a3c:	2b5d      	cmp	r3, #93	@ 0x5d
 8001a3e:	d120      	bne.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
    		switch(rxData[1]){
 8001a40:	4b2e      	ldr	r3, [pc, #184]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	3b30      	subs	r3, #48	@ 0x30
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d81a      	bhi.n	8001a80 <HAL_UARTEx_RxEventCallback+0x74>
 8001a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a50 <HAL_UARTEx_RxEventCallback+0x44>)
 8001a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a50:	08001a61 	.word	0x08001a61
 8001a54:	08001a69 	.word	0x08001a69
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a79 	.word	0x08001a79
    		case '0':
    			mode = START;
 8001a60:	4b27      	ldr	r3, [pc, #156]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
    			break;
 8001a66:	e00c      	b.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
    		case '1':
    			mode = RUNNING;
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
    			break;
 8001a6e:	e008      	b.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
    		case '2':
    			mode = PAUSE;
 8001a70:	4b23      	ldr	r3, [pc, #140]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001a72:	2202      	movs	r2, #2
 8001a74:	701a      	strb	r2, [r3, #0]
    			break;
 8001a76:	e004      	b.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
    		case '3':
    			mode = END;
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_UARTEx_RxEventCallback+0xf4>)
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	701a      	strb	r2, [r3, #0]
    			break;
 8001a7e:	e000      	b.n	8001a82 <HAL_UARTEx_RxEventCallback+0x76>
    		default:
    			break;
 8001a80:	bf00      	nop
    		}
    	}
    	if(rxData[0] =='[' && rxData[dataLength-1] == ']'){
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b5b      	cmp	r3, #91	@ 0x5b
 8001a88:	d11f      	bne.n	8001aca <HAL_UARTEx_RxEventCallback+0xbe>
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_UARTEx_RxEventCallback+0xec>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	4a1a      	ldr	r2, [pc, #104]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
 8001a94:	2b5d      	cmp	r3, #93	@ 0x5d
 8001a96:	d118      	bne.n	8001aca <HAL_UARTEx_RxEventCallback+0xbe>
    	    		switch(rxData[2]){
 8001a98:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001a9a:	789b      	ldrb	r3, [r3, #2]
 8001a9c:	2b32      	cmp	r3, #50	@ 0x32
 8001a9e:	d00e      	beq.n	8001abe <HAL_UARTEx_RxEventCallback+0xb2>
 8001aa0:	2b32      	cmp	r3, #50	@ 0x32
 8001aa2:	dc10      	bgt.n	8001ac6 <HAL_UARTEx_RxEventCallback+0xba>
 8001aa4:	2b30      	cmp	r3, #48	@ 0x30
 8001aa6:	d002      	beq.n	8001aae <HAL_UARTEx_RxEventCallback+0xa2>
 8001aa8:	2b31      	cmp	r3, #49	@ 0x31
 8001aaa:	d004      	beq.n	8001ab6 <HAL_UARTEx_RxEventCallback+0xaa>
    	    			break;
    	    		case '2':
    	    			difficulty = HARD;
    	    			break;
    	    		default:
    	    			break;
 8001aac:	e00b      	b.n	8001ac6 <HAL_UARTEx_RxEventCallback+0xba>
    	    			difficulty = EASY;
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	701a      	strb	r2, [r3, #0]
    	    			break;
 8001ab4:	e008      	b.n	8001ac8 <HAL_UARTEx_RxEventCallback+0xbc>
    	    			difficulty = NORMAL;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	701a      	strb	r2, [r3, #0]
    	    			break;
 8001abc:	e004      	b.n	8001ac8 <HAL_UARTEx_RxEventCallback+0xbc>
    	    			difficulty = HARD;
 8001abe:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_UARTEx_RxEventCallback+0xf8>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	701a      	strb	r2, [r3, #0]
    	    			break;
 8001ac4:	e000      	b.n	8001ac8 <HAL_UARTEx_RxEventCallback+0xbc>
    	    			break;
 8001ac6:	bf00      	nop
    	    		switch(rxData[2]){
 8001ac8:	e002      	b.n	8001ad0 <HAL_UARTEx_RxEventCallback+0xc4>
    	    		}
    	    	}
    	else{
    		printf("Transmit ERROR!\r\n");
 8001aca:	480f      	ldr	r0, [pc, #60]	@ (8001b08 <HAL_UARTEx_RxEventCallback+0xfc>)
 8001acc:	f004 fe10 	bl	80066f0 <puts>
    		 }
    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxData, sizeof(rxData));
 8001ad0:	2232      	movs	r2, #50	@ 0x32
 8001ad2:	490a      	ldr	r1, [pc, #40]	@ (8001afc <HAL_UARTEx_RxEventCallback+0xf0>)
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <HAL_UARTEx_RxEventCallback+0x100>)
 8001ad6:	f002 fd6e 	bl	80045b6 <HAL_UARTEx_ReceiveToIdle_DMA>
    	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_UARTEx_RxEventCallback+0x104>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_UARTEx_RxEventCallback+0x104>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0208 	bic.w	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]


    }

}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40011000 	.word	0x40011000
 8001af8:	20000192 	.word	0x20000192
 8001afc:	20000160 	.word	0x20000160
 8001b00:	200002ae 	.word	0x200002ae
 8001b04:	20000009 	.word	0x20000009
 8001b08:	080070d4 	.word	0x080070d4
 8001b0c:	20000194 	.word	0x20000194
 8001b10:	200001dc 	.word	0x200001dc

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b18:	f7ff fcba 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f004 ff19 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7ff fa37 	bl	8000fb8 <main>
  bx  lr    
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b58:	080072a0 	.word	0x080072a0
  ldr r2, =_sbss
 8001b5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b60:	2000040c 	.word	0x2000040c

08001b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC_IRQHandler>
	...

08001b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_Init+0x40>)
 8001b72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_Init+0x40>)
 8001b7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b84:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <HAL_Init+0x40>)
 8001b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f000 f94f 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b96:	200f      	movs	r0, #15
 8001b98:	f000 f808 	bl	8001bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b9c:	f7ff fb1a 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_InitTick+0x54>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x58>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f967 	bl	8001e9e <HAL_SYSTICK_Config>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00e      	b.n	8001bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b0f      	cmp	r3, #15
 8001bde:	d80a      	bhi.n	8001bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 f92f 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bec:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <HAL_InitTick+0x5c>)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000008 	.word	0x20000008
 8001c08:	20000004 	.word	0x20000004

08001c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c10:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_IncTick+0x20>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_IncTick+0x24>)
 8001c1e:	6013      	str	r3, [r2, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	2000029c 	.word	0x2000029c

08001c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  return uwTick;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_GetTick+0x14>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	2000029c 	.word	0x2000029c

08001c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff ffee 	bl	8001c34 <HAL_GetTick>
 8001c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d005      	beq.n	8001c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c66:	4b0a      	ldr	r3, [pc, #40]	@ (8001c90 <HAL_Delay+0x44>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4413      	add	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c72:	bf00      	nop
 8001c74:	f7ff ffde 	bl	8001c34 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d8f7      	bhi.n	8001c74 <HAL_Delay+0x28>
  {
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000008 	.word	0x20000008

08001c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	60d3      	str	r3, [r2, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	@ (8001cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 0307 	and.w	r3, r3, #7
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db0b      	blt.n	8001d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 021f 	and.w	r2, r3, #31
 8001d10:	4907      	ldr	r1, [pc, #28]	@ (8001d30 <__NVIC_EnableIRQ+0x38>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	2001      	movs	r0, #1
 8001d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000e100 	.word	0xe000e100

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	@ (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	@ (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	@ 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	@ 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff29 	bl	8001c94 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff3e 	bl	8001cdc <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff31 	bl	8001cf8 <__NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff ffa2 	bl	8001df0 <SysTick_Config>
 8001eac:	4603      	mov	r3, r0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff feb6 	bl	8001c34 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e099      	b.n	8002008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef4:	e00f      	b.n	8001f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef6:	f7ff fe9d 	bl	8001c34 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d908      	bls.n	8001f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2220      	movs	r2, #32
 8001f08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e078      	b.n	8002008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e8      	bne.n	8001ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	4b38      	ldr	r3, [pc, #224]	@ (8002010 <HAL_DMA_Init+0x158>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d107      	bne.n	8001f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f023 0307 	bic.w	r3, r3, #7
 8001f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d117      	bne.n	8001fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fb01 	bl	80025c4 <DMA_CheckFifoParam>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2240      	movs	r2, #64	@ 0x40
 8001fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e016      	b.n	8002008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fab8 	bl	8002558 <DMA_CalcBaseAndBitshift>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff0:	223f      	movs	r2, #63	@ 0x3f
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	f010803f 	.word	0xf010803f

08002014 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
 8002020:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_DMA_Start_IT+0x26>
 8002036:	2302      	movs	r3, #2
 8002038:	e040      	b.n	80020bc <HAL_DMA_Start_IT+0xa8>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12f      	bne.n	80020ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2202      	movs	r2, #2
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa4a 	bl	80024fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	223f      	movs	r2, #63	@ 0x3f
 800206e:	409a      	lsls	r2, r3
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0216 	orr.w	r2, r2, #22
 8002082:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0208 	orr.w	r2, r2, #8
 800209a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e005      	b.n	80020ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
 80020b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020d2:	f7ff fdaf 	bl	8001c34 <HAL_GetTick>
 80020d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d008      	beq.n	80020f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2280      	movs	r2, #128	@ 0x80
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e052      	b.n	800219c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0216 	bic.w	r2, r2, #22
 8002104:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695a      	ldr	r2, [r3, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002114:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_DMA_Abort+0x62>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0208 	bic.w	r2, r2, #8
 8002134:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 0201 	bic.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002146:	e013      	b.n	8002170 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002148:	f7ff fd74 	bl	8001c34 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b05      	cmp	r3, #5
 8002154:	d90c      	bls.n	8002170 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2220      	movs	r2, #32
 800215a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2203      	movs	r2, #3
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e015      	b.n	800219c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1e4      	bne.n	8002148 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002182:	223f      	movs	r2, #63	@ 0x3f
 8002184:	409a      	lsls	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d004      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00c      	b.n	80021dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2205      	movs	r2, #5
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0201 	bic.w	r2, r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002430 <HAL_DMA_IRQHandler+0x248>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a8e      	ldr	r2, [pc, #568]	@ (8002434 <HAL_DMA_IRQHandler+0x24c>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a9b      	lsrs	r3, r3, #10
 8002200:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002206:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002212:	2208      	movs	r2, #8
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01a      	beq.n	8002254 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d013      	beq.n	8002254 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0204 	bic.w	r2, r2, #4
 800223a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002240:	2208      	movs	r2, #8
 8002242:	409a      	lsls	r2, r3
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002258:	2201      	movs	r2, #1
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002276:	2201      	movs	r2, #1
 8002278:	409a      	lsls	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002282:	f043 0202 	orr.w	r2, r3, #2
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	2204      	movs	r2, #4
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ac:	2204      	movs	r2, #4
 80022ae:	409a      	lsls	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b8:	f043 0204 	orr.w	r2, r3, #4
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c4:	2210      	movs	r2, #16
 80022c6:	409a      	lsls	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d043      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d03c      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e2:	2210      	movs	r2, #16
 80022e4:	409a      	lsls	r2, r3
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d018      	beq.n	800232a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d108      	bne.n	8002318 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d024      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4798      	blx	r3
 8002316:	e01f      	b.n	8002358 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01b      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	4798      	blx	r3
 8002328:	e016      	b.n	8002358 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0208 	bic.w	r2, r2, #8
 8002346:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235c:	2220      	movs	r2, #32
 800235e:	409a      	lsls	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 808f 	beq.w	8002488 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0310 	and.w	r3, r3, #16
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 8087 	beq.w	8002488 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237e:	2220      	movs	r2, #32
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b05      	cmp	r3, #5
 8002390:	d136      	bne.n	8002400 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0216 	bic.w	r2, r2, #22
 80023a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d103      	bne.n	80023c2 <HAL_DMA_IRQHandler+0x1da>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d6:	223f      	movs	r2, #63	@ 0x3f
 80023d8:	409a      	lsls	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d07e      	beq.n	80024f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	4798      	blx	r3
        }
        return;
 80023fe:	e079      	b.n	80024f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01d      	beq.n	800244a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10d      	bne.n	8002438 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002420:	2b00      	cmp	r3, #0
 8002422:	d031      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	4798      	blx	r3
 800242c:	e02c      	b.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
 800242e:	bf00      	nop
 8002430:	20000000 	.word	0x20000000
 8002434:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d023      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
 8002448:	e01e      	b.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0210 	bic.w	r2, r2, #16
 8002466:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248c:	2b00      	cmp	r3, #0
 800248e:	d032      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d022      	beq.n	80024e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3301      	adds	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d307      	bcc.n	80024d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f2      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x2cc>
 80024ce:	e000      	b.n	80024d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	4798      	blx	r3
 80024f2:	e000      	b.n	80024f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024f4:	bf00      	nop
    }
  }
}
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b40      	cmp	r3, #64	@ 0x40
 8002528:	d108      	bne.n	800253c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800253a:	e007      	b.n	800254c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	60da      	str	r2, [r3, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	3b10      	subs	r3, #16
 8002568:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <DMA_CalcBaseAndBitshift+0x64>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	091b      	lsrs	r3, r3, #4
 8002570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002572:	4a13      	ldr	r2, [pc, #76]	@ (80025c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d909      	bls.n	800259a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	659a      	str	r2, [r3, #88]	@ 0x58
 8002598:	e007      	b.n	80025aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025a2:	f023 0303 	bic.w	r3, r3, #3
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	aaaaaaab 	.word	0xaaaaaaab
 80025c0:	08007100 	.word	0x08007100

080025c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d11f      	bne.n	800261e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d856      	bhi.n	8002692 <DMA_CheckFifoParam+0xce>
 80025e4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ec <DMA_CheckFifoParam+0x28>)
 80025e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ea:	bf00      	nop
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	0800260f 	.word	0x0800260f
 80025f4:	080025fd 	.word	0x080025fd
 80025f8:	08002693 	.word	0x08002693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d046      	beq.n	8002696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e043      	b.n	8002696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002612:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002616:	d140      	bne.n	800269a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261c:	e03d      	b.n	800269a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002626:	d121      	bne.n	800266c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d837      	bhi.n	800269e <DMA_CheckFifoParam+0xda>
 800262e:	a201      	add	r2, pc, #4	@ (adr r2, 8002634 <DMA_CheckFifoParam+0x70>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002645 	.word	0x08002645
 8002638:	0800264b 	.word	0x0800264b
 800263c:	08002645 	.word	0x08002645
 8002640:	0800265d 	.word	0x0800265d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e030      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d025      	beq.n	80026a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265a:	e022      	b.n	80026a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002664:	d11f      	bne.n	80026a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800266a:	e01c      	b.n	80026a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d903      	bls.n	800267a <DMA_CheckFifoParam+0xb6>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d003      	beq.n	8002680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002678:	e018      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	73fb      	strb	r3, [r7, #15]
      break;
 800267e:	e015      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00e      	beq.n	80026aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e00b      	b.n	80026aa <DMA_CheckFifoParam+0xe6>
      break;
 8002692:	bf00      	nop
 8002694:	e00a      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 8002696:	bf00      	nop
 8002698:	e008      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 800269a:	bf00      	nop
 800269c:	e006      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 800269e:	bf00      	nop
 80026a0:	e004      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e002      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;   
 80026a6:	bf00      	nop
 80026a8:	e000      	b.n	80026ac <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
    }
  } 
  
  return status; 
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e159      	b.n	800298c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026d8:	2201      	movs	r2, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	f040 8148 	bne.w	8002986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d005      	beq.n	800270e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800270a:	2b02      	cmp	r3, #2
 800270c:	d130      	bne.n	8002770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	2203      	movs	r2, #3
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4013      	ands	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4313      	orrs	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 0201 	and.w	r2, r3, #1
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b03      	cmp	r3, #3
 800277a:	d017      	beq.n	80027ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f003 0303 	and.w	r3, r3, #3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d123      	bne.n	8002800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	08da      	lsrs	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3208      	adds	r2, #8
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	08da      	lsrs	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3208      	adds	r2, #8
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	2203      	movs	r2, #3
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0203 	and.w	r2, r3, #3
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a2 	beq.w	8002986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b57      	ldr	r3, [pc, #348]	@ (80029a4 <HAL_GPIO_Init+0x2e8>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a56      	ldr	r2, [pc, #344]	@ (80029a4 <HAL_GPIO_Init+0x2e8>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b54      	ldr	r3, [pc, #336]	@ (80029a4 <HAL_GPIO_Init+0x2e8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800285e:	4a52      	ldr	r2, [pc, #328]	@ (80029a8 <HAL_GPIO_Init+0x2ec>)
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	089b      	lsrs	r3, r3, #2
 8002864:	3302      	adds	r3, #2
 8002866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	220f      	movs	r2, #15
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a49      	ldr	r2, [pc, #292]	@ (80029ac <HAL_GPIO_Init+0x2f0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x202>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a48      	ldr	r2, [pc, #288]	@ (80029b0 <HAL_GPIO_Init+0x2f4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x1fe>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a47      	ldr	r2, [pc, #284]	@ (80029b4 <HAL_GPIO_Init+0x2f8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x1fa>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a46      	ldr	r2, [pc, #280]	@ (80029b8 <HAL_GPIO_Init+0x2fc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x1f6>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a45      	ldr	r2, [pc, #276]	@ (80029bc <HAL_GPIO_Init+0x300>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x1f2>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x204>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_GPIO_Init+0x2ec>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a2f      	ldr	r2, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b23      	ldr	r3, [pc, #140]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1a      	ldr	r2, [pc, #104]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <HAL_GPIO_Init+0x304>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f aea2 	bls.w	80026d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40013c00 	.word	0x40013c00

080029c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
 80029e0:	e001      	b.n	80029e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e267      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a46:	4b88      	ldr	r3, [pc, #544]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4b85      	ldr	r3, [pc, #532]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b82      	ldr	r3, [pc, #520]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e242      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b76      	ldr	r3, [pc, #472]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a75      	ldr	r2, [pc, #468]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6c      	ldr	r2, [pc, #432]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a65      	ldr	r2, [pc, #404]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7ff f8a8 	bl	8001c34 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7ff f8a4 	bl	8001c34 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	@ 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e207      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7ff f894 	bl	8001c34 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7ff f890 	bl	8001c34 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	@ 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f3      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b47      	ldr	r3, [pc, #284]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b44      	ldr	r3, [pc, #272]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c7      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4937      	ldr	r1, [pc, #220]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f849 	bl	8001c34 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7ff f845 	bl	8001c34 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a8      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4925      	ldr	r1, [pc, #148]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b24      	ldr	r3, [pc, #144]	@ (8002c6c <HAL_RCC_OscConfig+0x244>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7ff f828 	bl	8001c34 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7ff f824 	bl	8001c34 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e187      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d036      	beq.n	8002c80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7ff f808 	bl	8001c34 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c28:	f7ff f804 	bl	8001c34 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e167      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e01b      	b.n	8002c80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_OscConfig+0x248>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fff1 	bl	8001c34 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e00e      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe ffed 	bl	8001c34 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d907      	bls.n	8002c74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e150      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	42470000 	.word	0x42470000
 8002c70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b88      	ldr	r3, [pc, #544]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1ea      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8097 	beq.w	8002dbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b81      	ldr	r3, [pc, #516]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b7d      	ldr	r3, [pc, #500]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cae:	4b7a      	ldr	r3, [pc, #488]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b77      	ldr	r3, [pc, #476]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d118      	bne.n	8002cfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b74      	ldr	r3, [pc, #464]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a73      	ldr	r2, [pc, #460]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe ffad 	bl	8001c34 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cde:	f7fe ffa9 	bl	8001c34 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e10c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_OscConfig+0x474>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d106      	bne.n	8002d12 <HAL_RCC_OscConfig+0x2ea>
 8002d04:	4b64      	ldr	r3, [pc, #400]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a63      	ldr	r2, [pc, #396]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	e01c      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x30c>
 8002d1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d26:	4b5c      	ldr	r3, [pc, #368]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0x324>
 8002d34:	4b58      	ldr	r3, [pc, #352]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d38:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 0301 	bic.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d40:	4b55      	ldr	r3, [pc, #340]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a54      	ldr	r2, [pc, #336]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0304 	bic.w	r3, r3, #4
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d015      	beq.n	8002d80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe ff6e 	bl	8001c34 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5c:	f7fe ff6a 	bl	8001c34 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e0cb      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d72:	4b49      	ldr	r3, [pc, #292]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0ee      	beq.n	8002d5c <HAL_RCC_OscConfig+0x334>
 8002d7e:	e014      	b.n	8002daa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d80:	f7fe ff58 	bl	8001c34 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d88:	f7fe ff54 	bl	8001c34 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0b5      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1ee      	bne.n	8002d88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d105      	bne.n	8002dbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db0:	4b39      	ldr	r3, [pc, #228]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	4a38      	ldr	r2, [pc, #224]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a1 	beq.w	8002f08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dc6:	4b34      	ldr	r3, [pc, #208]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d05c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d141      	bne.n	8002e5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dda:	4b31      	ldr	r3, [pc, #196]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe ff28 	bl	8001c34 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de8:	f7fe ff24 	bl	8001c34 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e087      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dfa:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69da      	ldr	r2, [r3, #28]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	019b      	lsls	r3, r3, #6
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1c:	085b      	lsrs	r3, r3, #1
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	041b      	lsls	r3, r3, #16
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	491b      	ldr	r1, [pc, #108]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fefd 	bl	8001c34 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe fef9 	bl	8001c34 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e05c      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x416>
 8002e5c:	e054      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <HAL_RCC_OscConfig+0x478>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fee6 	bl	8001c34 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7fe fee2 	bl	8001c34 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e045      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_OscConfig+0x470>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x444>
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e038      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d028      	beq.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d121      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d11a      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d111      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	3b01      	subs	r3, #1
 8002eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d107      	bne.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3718      	adds	r7, #24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fe14 	bl	8001c34 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fe10 	bl	8001c34 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	@ (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fd74 	bl	8001bac <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	080070e8 	.word	0x080070e8
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e8:	b094      	sub	sp, #80	@ 0x50
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b79      	ldr	r3, [pc, #484]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80e1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0db      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b73      	ldr	r3, [pc, #460]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800311c:	e0db      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b73      	ldr	r3, [pc, #460]	@ (80032ec <HAL_RCC_GetSysClockFreq+0x208>)
 8003120:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003122:	e0d8      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b6f      	ldr	r3, [pc, #444]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800312c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	2200      	movs	r2, #0
 8003142:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003144:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314c:	633b      	str	r3, [r7, #48]	@ 0x30
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	@ 0x34
 8003152:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003156:	4622      	mov	r2, r4
 8003158:	462b      	mov	r3, r5
 800315a:	f04f 0000 	mov.w	r0, #0
 800315e:	f04f 0100 	mov.w	r1, #0
 8003162:	0159      	lsls	r1, r3, #5
 8003164:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003168:	0150      	lsls	r0, r2, #5
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4621      	mov	r1, r4
 8003170:	1a51      	subs	r1, r2, r1
 8003172:	6139      	str	r1, [r7, #16]
 8003174:	4629      	mov	r1, r5
 8003176:	eb63 0301 	sbc.w	r3, r3, r1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003188:	4659      	mov	r1, fp
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	4651      	mov	r1, sl
 800318e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003192:	4651      	mov	r1, sl
 8003194:	018a      	lsls	r2, r1, #6
 8003196:	4651      	mov	r1, sl
 8003198:	ebb2 0801 	subs.w	r8, r2, r1
 800319c:	4659      	mov	r1, fp
 800319e:	eb63 0901 	sbc.w	r9, r3, r1
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b6:	4690      	mov	r8, r2
 80031b8:	4699      	mov	r9, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	eb18 0303 	adds.w	r3, r8, r3
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	462b      	mov	r3, r5
 80031c4:	eb49 0303 	adc.w	r3, r9, r3
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031d6:	4629      	mov	r1, r5
 80031d8:	024b      	lsls	r3, r1, #9
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031e0:	4621      	mov	r1, r4
 80031e2:	024a      	lsls	r2, r1, #9
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031f4:	f7fd fc7c 	bl	8000af0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003200:	e058      	b.n	80032b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003202:	4b38      	ldr	r3, [pc, #224]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	099b      	lsrs	r3, r3, #6
 8003208:	2200      	movs	r2, #0
 800320a:	4618      	mov	r0, r3
 800320c:	4611      	mov	r1, r2
 800320e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003212:	623b      	str	r3, [r7, #32]
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	@ 0x24
 8003218:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800321c:	4642      	mov	r2, r8
 800321e:	464b      	mov	r3, r9
 8003220:	f04f 0000 	mov.w	r0, #0
 8003224:	f04f 0100 	mov.w	r1, #0
 8003228:	0159      	lsls	r1, r3, #5
 800322a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322e:	0150      	lsls	r0, r2, #5
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4641      	mov	r1, r8
 8003236:	ebb2 0a01 	subs.w	sl, r2, r1
 800323a:	4649      	mov	r1, r9
 800323c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800324c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003250:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003254:	ebb2 040a 	subs.w	r4, r2, sl
 8003258:	eb63 050b 	sbc.w	r5, r3, fp
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	464b      	mov	r3, r9
 8003278:	eb45 0303 	adc.w	r3, r5, r3
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	e9d7 4500 	ldrd	r4, r5, [r7]
 800328a:	4629      	mov	r1, r5
 800328c:	028b      	lsls	r3, r1, #10
 800328e:	4621      	mov	r1, r4
 8003290:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003294:	4621      	mov	r1, r4
 8003296:	028a      	lsls	r2, r1, #10
 8003298:	4610      	mov	r0, r2
 800329a:	4619      	mov	r1, r3
 800329c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	61bb      	str	r3, [r7, #24]
 80032a2:	61fa      	str	r2, [r7, #28]
 80032a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a8:	f7fd fc22 	bl	8000af0 <__aeabi_uldivmod>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4613      	mov	r3, r2
 80032b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80032c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032ce:	e002      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3750      	adds	r7, #80	@ 0x50
 80032dc:	46bd      	mov	sp, r7
 80032de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	00f42400 	.word	0x00f42400
 80032ec:	007a1200 	.word	0x007a1200

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f4:	4b03      	ldr	r3, [pc, #12]	@ (8003304 <HAL_RCC_GetHCLKFreq+0x14>)
 80032f6:	681b      	ldr	r3, [r3, #0]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000000 	.word	0x20000000

08003308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800330c:	f7ff fff0 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b05      	ldr	r3, [pc, #20]	@ (8003328 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4903      	ldr	r1, [pc, #12]	@ (800332c <HAL_RCC_GetPCLK1Freq+0x24>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	080070f8 	.word	0x080070f8

08003330 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003334:	f7ff ffdc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_GetPCLK2Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0b5b      	lsrs	r3, r3, #13
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	@ (8003354 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	080070f8 	.word	0x080070f8

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e041      	b.n	80033ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f7fe f980 	bl	8001684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fcd8 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
	...

080033f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d001      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e044      	b.n	800349a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	@ (80034a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d018      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800343a:	d013      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_TIM_Base_Start_IT+0xb4>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d00e      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a19      	ldr	r2, [pc, #100]	@ (80034b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d009      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a17      	ldr	r2, [pc, #92]	@ (80034b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start_IT+0x6c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a16      	ldr	r2, [pc, #88]	@ (80034b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d111      	bne.n	8003488 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d010      	beq.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e007      	b.n	8003498 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40014000 	.word	0x40014000

080034bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6a1a      	ldr	r2, [r3, #32]
 80034da:	f241 1311 	movw	r3, #4369	@ 0x1111
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10f      	bne.n	8003504 <HAL_TIM_Base_Stop_IT+0x48>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	f240 4344 	movw	r3, #1092	@ 0x444
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d107      	bne.n	8003504 <HAL_TIM_Base_Stop_IT+0x48>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0201 	bic.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e041      	b.n	80035b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f839 	bl	80035b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fbf7 	bl	8003d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_TIM_PWM_Start+0x24>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e022      	b.n	8003636 <HAL_TIM_PWM_Start+0x6a>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d109      	bne.n	800360a <HAL_TIM_PWM_Start+0x3e>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	e015      	b.n	8003636 <HAL_TIM_PWM_Start+0x6a>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d109      	bne.n	8003624 <HAL_TIM_PWM_Start+0x58>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e008      	b.n	8003636 <HAL_TIM_PWM_Start+0x6a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e068      	b.n	8003710 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Start+0x82>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800364c:	e013      	b.n	8003676 <HAL_TIM_PWM_Start+0xaa>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Start+0x92>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800365c:	e00b      	b.n	8003676 <HAL_TIM_PWM_Start+0xaa>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b08      	cmp	r3, #8
 8003662:	d104      	bne.n	800366e <HAL_TIM_PWM_Start+0xa2>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800366c:	e003      	b.n	8003676 <HAL_TIM_PWM_Start+0xaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2202      	movs	r2, #2
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2201      	movs	r2, #1
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fe16 	bl	80042b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a23      	ldr	r2, [pc, #140]	@ (8003718 <HAL_TIM_PWM_Start+0x14c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d107      	bne.n	800369e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003718 <HAL_TIM_PWM_Start+0x14c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d018      	beq.n	80036da <HAL_TIM_PWM_Start+0x10e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d013      	beq.n	80036da <HAL_TIM_PWM_Start+0x10e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	@ (800371c <HAL_TIM_PWM_Start+0x150>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d00e      	beq.n	80036da <HAL_TIM_PWM_Start+0x10e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a17      	ldr	r2, [pc, #92]	@ (8003720 <HAL_TIM_PWM_Start+0x154>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_TIM_PWM_Start+0x10e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_TIM_PWM_Start+0x158>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d004      	beq.n	80036da <HAL_TIM_PWM_Start+0x10e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a14      	ldr	r2, [pc, #80]	@ (8003728 <HAL_TIM_PWM_Start+0x15c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d111      	bne.n	80036fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b06      	cmp	r3, #6
 80036ea:	d010      	beq.n	800370e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036fc:	e007      	b.n	800370e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0201 	orr.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40014000 	.word	0x40014000

0800372c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fdb6 	bl	80042b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a29      	ldr	r2, [pc, #164]	@ (80037f0 <HAL_TIM_PWM_Stop+0xc4>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d117      	bne.n	800377e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <HAL_TIM_PWM_Stop+0x52>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	f240 4344 	movw	r3, #1092	@ 0x444
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_TIM_PWM_Stop+0x52>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_TIM_PWM_Stop+0x82>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	f240 4344 	movw	r3, #1092	@ 0x444
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_TIM_PWM_Stop+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Stop+0x92>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037bc:	e013      	b.n	80037e6 <HAL_TIM_PWM_Stop+0xba>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Stop+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_PWM_Stop+0xba>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Stop+0xb2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037dc:	e003      	b.n	80037e6 <HAL_TIM_PWM_Stop+0xba>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010000 	.word	0x40010000

080037f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0202 	mvn.w	r2, #2
 8003828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa65 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa57 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fa68 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d020      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0204 	mvn.w	r2, #4
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2202      	movs	r2, #2
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fa3f 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fa31 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fa42 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d020      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01b      	beq.n	80038f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0208 	mvn.w	r2, #8
 80038c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2204      	movs	r2, #4
 80038c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fa19 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa0b 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fa1c 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d020      	beq.n	800393c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01b      	beq.n	800393c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f06f 0210 	mvn.w	r2, #16
 800390c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2208      	movs	r2, #8
 8003912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f9f3 	bl	8003d0e <HAL_TIM_IC_CaptureCallback>
 8003928:	e005      	b.n	8003936 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f9e5 	bl	8003cfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9f6 	bl	8003d22 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9c3 	bl	8003ce6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00c      	beq.n	8003984 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fd34 	bl	80043ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9c7 	bl	8003d36 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f003 0320 	and.w	r3, r3, #32
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d007      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f06f 0220 	mvn.w	r2, #32
 80039c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fd06 	bl	80043d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0ae      	b.n	8003b50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	f200 809f 	bhi.w	8003b40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a02:	a201      	add	r2, pc, #4	@ (adr r2, 8003a08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003b41 	.word	0x08003b41
 8003a10:	08003b41 	.word	0x08003b41
 8003a14:	08003b41 	.word	0x08003b41
 8003a18:	08003a7d 	.word	0x08003a7d
 8003a1c:	08003b41 	.word	0x08003b41
 8003a20:	08003b41 	.word	0x08003b41
 8003a24:	08003b41 	.word	0x08003b41
 8003a28:	08003abf 	.word	0x08003abf
 8003a2c:	08003b41 	.word	0x08003b41
 8003a30:	08003b41 	.word	0x08003b41
 8003a34:	08003b41 	.word	0x08003b41
 8003a38:	08003aff 	.word	0x08003aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fa0e 	bl	8003e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0208 	orr.w	r2, r2, #8
 8003a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0204 	bic.w	r2, r2, #4
 8003a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6999      	ldr	r1, [r3, #24]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	619a      	str	r2, [r3, #24]
      break;
 8003a7a:	e064      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68b9      	ldr	r1, [r7, #8]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fa54 	bl	8003f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6999      	ldr	r1, [r3, #24]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	021a      	lsls	r2, r3, #8
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
      break;
 8003abc:	e043      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa9f 	bl	8004008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0208 	orr.w	r2, r2, #8
 8003ad8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0204 	bic.w	r2, r2, #4
 8003ae8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69d9      	ldr	r1, [r3, #28]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	61da      	str	r2, [r3, #28]
      break;
 8003afc:	e023      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 fae9 	bl	80040dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69da      	ldr	r2, [r3, #28]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	69d9      	ldr	r1, [r3, #28]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	021a      	lsls	r2, r3, #8
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	61da      	str	r2, [r3, #28]
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	75fb      	strb	r3, [r7, #23]
      break;
 8003b44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_TIM_ConfigClockSource+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e0b4      	b.n	8003cde <HAL_TIM_ConfigClockSource+0x186>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bac:	d03e      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0xd4>
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb2:	f200 8087 	bhi.w	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bba:	f000 8086 	beq.w	8003cca <HAL_TIM_ConfigClockSource+0x172>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc2:	d87f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b70      	cmp	r3, #112	@ 0x70
 8003bc6:	d01a      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0xa6>
 8003bc8:	2b70      	cmp	r3, #112	@ 0x70
 8003bca:	d87b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b60      	cmp	r3, #96	@ 0x60
 8003bce:	d050      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd0:	2b60      	cmp	r3, #96	@ 0x60
 8003bd2:	d877      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b50      	cmp	r3, #80	@ 0x50
 8003bd6:	d03c      	beq.n	8003c52 <HAL_TIM_ConfigClockSource+0xfa>
 8003bd8:	2b50      	cmp	r3, #80	@ 0x50
 8003bda:	d873      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b40      	cmp	r3, #64	@ 0x40
 8003bde:	d058      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x13a>
 8003be0:	2b40      	cmp	r3, #64	@ 0x40
 8003be2:	d86f      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b30      	cmp	r3, #48	@ 0x30
 8003be6:	d064      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b30      	cmp	r3, #48	@ 0x30
 8003bea:	d86b      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d060      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d867      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05c      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d05a      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfc:	e062      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c0e:	f000 fb2f 	bl	8004270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003c20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	609a      	str	r2, [r3, #8]
      break;
 8003c2a:	e04f      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c3c:	f000 fb18 	bl	8004270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c4e:	609a      	str	r2, [r3, #8]
      break;
 8003c50:	e03c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f000 fa8c 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2150      	movs	r1, #80	@ 0x50
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fae5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003c70:	e02c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 faab 	bl	80041da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2160      	movs	r1, #96	@ 0x60
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 fad5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003c90:	e01c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 fa6c 	bl	800417c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2140      	movs	r1, #64	@ 0x40
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fac5 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e00c      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f000 fabc 	bl	800423a <TIM_ITRx_SetConfig>
      break;
 8003cc2:	e003      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc8:	e000      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00f      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d6a:	d00b      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a37      	ldr	r2, [pc, #220]	@ (8003e4c <TIM_Base_SetConfig+0x100>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a36      	ldr	r2, [pc, #216]	@ (8003e50 <TIM_Base_SetConfig+0x104>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_Base_SetConfig+0x38>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a35      	ldr	r2, [pc, #212]	@ (8003e54 <TIM_Base_SetConfig+0x108>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d108      	bne.n	8003d96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a2b      	ldr	r2, [pc, #172]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da4:	d017      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a28      	ldr	r2, [pc, #160]	@ (8003e4c <TIM_Base_SetConfig+0x100>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d013      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a27      	ldr	r2, [pc, #156]	@ (8003e50 <TIM_Base_SetConfig+0x104>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00f      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a26      	ldr	r2, [pc, #152]	@ (8003e54 <TIM_Base_SetConfig+0x108>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00b      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	@ (8003e58 <TIM_Base_SetConfig+0x10c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d007      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a24      	ldr	r2, [pc, #144]	@ (8003e5c <TIM_Base_SetConfig+0x110>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d003      	beq.n	8003dd6 <TIM_Base_SetConfig+0x8a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a23      	ldr	r2, [pc, #140]	@ (8003e60 <TIM_Base_SetConfig+0x114>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d108      	bne.n	8003de8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e48 <TIM_Base_SetConfig+0xfc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d103      	bne.n	8003e1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691a      	ldr	r2, [r3, #16]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d105      	bne.n	8003e3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f023 0201 	bic.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	611a      	str	r2, [r3, #16]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40010000 	.word	0x40010000
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800

08003e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f023 0201 	bic.w	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0302 	bic.w	r3, r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d10c      	bne.n	8003eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f023 0308 	bic.w	r3, r3, #8
 8003ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <TIM_OC1_SetConfig+0xc8>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	621a      	str	r2, [r3, #32]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 0210 	bic.w	r2, r3, #16
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0320 	bic.w	r3, r3, #32
 8003f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d10d      	bne.n	8003fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a15      	ldr	r2, [pc, #84]	@ (8004004 <TIM_OC2_SetConfig+0xd4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d113      	bne.n	8003fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	621a      	str	r2, [r3, #32]
}
 8003ff6:	bf00      	nop
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000

08004008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	021b      	lsls	r3, r3, #8
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	4313      	orrs	r3, r2
 800405c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10d      	bne.n	8004082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <TIM_OC3_SetConfig+0xd0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d113      	bne.n	80040b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	621a      	str	r2, [r3, #32]
}
 80040cc:	bf00      	nop
 80040ce:	371c      	adds	r7, #28
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr
 80040d8:	40010000 	.word	0x40010000

080040dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800410a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	031b      	lsls	r3, r3, #12
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <TIM_OC4_SetConfig+0x9c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d109      	bne.n	8004150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000

0800417c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f023 0201 	bic.w	r2, r3, #1
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f023 030a 	bic.w	r3, r3, #10
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041da:	b480      	push	{r7}
 80041dc:	b087      	sub	sp, #28
 80041de:	af00      	add	r7, sp, #0
 80041e0:	60f8      	str	r0, [r7, #12]
 80041e2:	60b9      	str	r1, [r7, #8]
 80041e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	f023 0210 	bic.w	r2, r3, #16
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	031b      	lsls	r3, r3, #12
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	621a      	str	r2, [r3, #32]
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	f043 0307 	orr.w	r3, r3, #7
 800425c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	609a      	str	r2, [r3, #8]
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800428a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	021a      	lsls	r2, r3, #8
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	431a      	orrs	r2, r3
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	609a      	str	r2, [r3, #8]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 031f 	and.w	r3, r3, #31
 80042c2:	2201      	movs	r2, #1
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	401a      	ands	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	431a      	orrs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004310:	2302      	movs	r3, #2
 8004312:	e050      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d018      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004360:	d013      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a18      	ldr	r2, [pc, #96]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00e      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a16      	ldr	r2, [pc, #88]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d009      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a15      	ldr	r2, [pc, #84]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a13      	ldr	r2, [pc, #76]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40000400 	.word	0x40000400
 80043cc:	40000800 	.word	0x40000800
 80043d0:	40000c00 	.word	0x40000c00
 80043d4:	40014000 	.word	0x40014000

080043d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e042      	b.n	8004498 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd fa30 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2224      	movs	r2, #36	@ 0x24
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 ff7b 	bl	8005340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	691a      	ldr	r2, [r3, #16]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08a      	sub	sp, #40	@ 0x28
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	603b      	str	r3, [r7, #0]
 80044ac:	4613      	mov	r3, r2
 80044ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d175      	bne.n	80045ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Transmit+0x2c>
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e06e      	b.n	80045ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2221      	movs	r2, #33	@ 0x21
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044de:	f7fd fba9 	bl	8001c34 <HAL_GetTick>
 80044e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f8:	d108      	bne.n	800450c <HAL_UART_Transmit+0x6c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e003      	b.n	8004514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004514:	e02e      	b.n	8004574 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fc53 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03a      	b.n	80045ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10b      	bne.n	8004556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3302      	adds	r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e007      	b.n	8004566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	3301      	adds	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1cb      	bne.n	8004516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2140      	movs	r1, #64	@ 0x40
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fc1f 	bl	8004dcc <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b08c      	sub	sp, #48	@ 0x30
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	60b9      	str	r1, [r7, #8]
 80045c0:	4613      	mov	r3, r2
 80045c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d14a      	bne.n	8004666 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e043      	b.n	8004668 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045ec:	88fb      	ldrh	r3, [r7, #6]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 fc44 	bl	8004e80 <UART_Start_Receive_DMA>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80045fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004602:	2b00      	cmp	r3, #0
 8004604:	d12c      	bne.n	8004660 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460a:	2b01      	cmp	r3, #1
 800460c:	d125      	bne.n	800465a <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	613b      	str	r3, [r7, #16]
 8004622:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	617b      	str	r3, [r7, #20]
   return(result);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f043 0310 	orr.w	r3, r3, #16
 800463a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004644:	627a      	str	r2, [r7, #36]	@ 0x24
 8004646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6a39      	ldr	r1, [r7, #32]
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	61fb      	str	r3, [r7, #28]
   return(result);
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004658:	e002      	b.n	8004660 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004660:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004664:	e000      	b.n	8004668 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	@ 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0ba      	sub	sp, #232	@ 0xe8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80046ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
 80046c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fd77 	bl	80051c2 <UART_Receive_IT>
      return;
 80046d4:	e25b      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80de 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
 80046e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80d1 	beq.w	800489c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
 8004706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d005      	beq.n	800471e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	f043 0201 	orr.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800471e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00b      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
 800472a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473a:	f043 0202 	orr.w	r2, r3, #2
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
 800474e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d005      	beq.n	8004766 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475e:	f043 0204 	orr.w	r2, r3, #4
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
 8004772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800477e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800478e:	f043 0208 	orr.w	r2, r3, #8
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 81f2 	beq.w	8004b84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
 80047ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fd02 	bl	80051c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c8:	2b40      	cmp	r3, #64	@ 0x40
 80047ca:	bf0c      	ite	eq
 80047cc:	2301      	moveq	r3, #1
 80047ce:	2300      	movne	r3, #0
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d103      	bne.n	80047ea <HAL_UART_IRQHandler+0x17a>
 80047e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04f      	beq.n	800488a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fc0a 	bl	8005004 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fa:	2b40      	cmp	r3, #64	@ 0x40
 80047fc:	d141      	bne.n	8004882 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3314      	adds	r3, #20
 8004804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3314      	adds	r3, #20
 8004826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800482a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800482e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d013      	beq.n	800487a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004856:	4a7e      	ldr	r2, [pc, #504]	@ (8004a50 <HAL_UART_IRQHandler+0x3e0>)
 8004858:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fca0 	bl	80021a4 <HAL_DMA_Abort_IT>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d016      	beq.n	8004898 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004874:	4610      	mov	r0, r2
 8004876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004878:	e00e      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f99e 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004880:	e00a      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f99a 	bl	8004bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004888:	e006      	b.n	8004898 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f996 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004896:	e175      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	bf00      	nop
    return;
 800489a:	e173      	b.n	8004b84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	f040 814f 	bne.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8148 	beq.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80048b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b8:	f003 0310 	and.w	r3, r3, #16
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8141 	beq.w	8004b44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c2:	2300      	movs	r3, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	f040 80b6 	bne.w	8004a54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8145 	beq.w	8004b88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004906:	429a      	cmp	r2, r3
 8004908:	f080 813e 	bcs.w	8004b88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004912:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800491e:	f000 8088 	beq.w	8004a32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800493c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004940:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800494e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800495a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004966:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1d9      	bne.n	8004922 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004976:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004978:	e853 3f00 	ldrex	r3, [r3]
 800497c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800497e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004980:	f023 0301 	bic.w	r3, r3, #1
 8004984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3314      	adds	r3, #20
 800498e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004992:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004996:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800499a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800499e:	e841 2300 	strex	r3, r2, [r1]
 80049a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1e1      	bne.n	800496e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80049ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3314      	adds	r3, #20
 80049ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049d6:	e841 2300 	strex	r3, r2, [r1]
 80049da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1e3      	bne.n	80049aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a02:	f023 0310 	bic.w	r3, r3, #16
 8004a06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004a14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e3      	bne.n	80049f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fd fb49 	bl	80020c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2202      	movs	r2, #2
 8004a36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fc ffdf 	bl	8001a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a4e:	e09b      	b.n	8004b88 <HAL_UART_IRQHandler+0x518>
 8004a50:	080050cb 	.word	0x080050cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 808e 	beq.w	8004b8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8089 	beq.w	8004b8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004aa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa6:	e841 2300 	strex	r3, r2, [r1]
 8004aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1e3      	bne.n	8004a7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3314      	adds	r3, #20
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f023 0301 	bic.w	r3, r3, #1
 8004ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ad6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ade:	e841 2300 	strex	r3, r2, [r1]
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e3      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	330c      	adds	r3, #12
 8004afe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	330c      	adds	r3, #12
 8004b18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004b1c:	61fa      	str	r2, [r7, #28]
 8004b1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	69b9      	ldr	r1, [r7, #24]
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	617b      	str	r3, [r7, #20]
   return(result);
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e3      	bne.n	8004af8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fc ff65 	bl	8001a0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b42:	e023      	b.n	8004b8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <HAL_UART_IRQHandler+0x4f4>
 8004b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fac8 	bl	80050f2 <UART_Transmit_IT>
    return;
 8004b62:	e014      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <HAL_UART_IRQHandler+0x51e>
 8004b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fb08 	bl	8005192 <UART_EndTransmit_IT>
    return;
 8004b82:	e004      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
    return;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b88:	bf00      	nop
 8004b8a:	e000      	b.n	8004b8e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b8c:	bf00      	nop
  }
}
 8004b8e:	37e8      	adds	r7, #232	@ 0xe8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b09c      	sub	sp, #112	@ 0x70
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d172      	bne.n	8004cd2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bee:	2200      	movs	r2, #0
 8004bf0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004c12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3314      	adds	r3, #20
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c38:	f023 0301 	bic.w	r3, r3, #1
 8004c3c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3314      	adds	r3, #20
 8004c44:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e5      	bne.n	8004c26 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d119      	bne.n	8004cd2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f023 0310 	bic.w	r3, r3, #16
 8004cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	330c      	adds	r3, #12
 8004cbc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004cbe:	61fa      	str	r2, [r7, #28]
 8004cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	69b9      	ldr	r1, [r7, #24]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	617b      	str	r3, [r7, #20]
   return(result);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e5      	bne.n	8004c9e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004ce8:	f7fc fe90 	bl	8001a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004cec:	e002      	b.n	8004cf4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004cee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004cf0:	f7ff ff50 	bl	8004b94 <HAL_UART_RxCpltCallback>
}
 8004cf4:	bf00      	nop
 8004cf6:	3770      	adds	r7, #112	@ 0x70
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d108      	bne.n	8004d2a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	4619      	mov	r1, r3
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fc fe72 	bl	8001a0c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d28:	e002      	b.n	8004d30 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff ff3c 	bl	8004ba8 <HAL_UART_RxHalfCpltCallback>
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d48:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d54:	2b80      	cmp	r3, #128	@ 0x80
 8004d56:	bf0c      	ite	eq
 8004d58:	2301      	moveq	r3, #1
 8004d5a:	2300      	movne	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b21      	cmp	r3, #33	@ 0x21
 8004d6a:	d108      	bne.n	8004d7e <UART_DMAError+0x46>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2200      	movs	r2, #0
 8004d76:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004d78:	68b8      	ldr	r0, [r7, #8]
 8004d7a:	f000 f91b 	bl	8004fb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	bf0c      	ite	eq
 8004d8c:	2301      	moveq	r3, #1
 8004d8e:	2300      	movne	r3, #0
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b22      	cmp	r3, #34	@ 0x22
 8004d9e:	d108      	bne.n	8004db2 <UART_DMAError+0x7a>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d005      	beq.n	8004db2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2200      	movs	r2, #0
 8004daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004dac:	68b8      	ldr	r0, [r7, #8]
 8004dae:	f000 f929 	bl	8005004 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	f043 0210 	orr.w	r2, r3, #16
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dbe:	68b8      	ldr	r0, [r7, #8]
 8004dc0:	f7ff fefc 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ddc:	e03b      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d037      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de6:	f7fc ff25 	bl	8001c34 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	6a3a      	ldr	r2, [r7, #32]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d302      	bcc.n	8004dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03a      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d023      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b80      	cmp	r3, #128	@ 0x80
 8004e12:	d020      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b40      	cmp	r3, #64	@ 0x40
 8004e18:	d01d      	beq.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d116      	bne.n	8004e56 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f8e0 	bl	8005004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2208      	movs	r2, #8
 8004e48:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e00f      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	bf0c      	ite	eq
 8004e66:	2301      	moveq	r3, #1
 8004e68:	2300      	movne	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d0b4      	beq.n	8004dde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b098      	sub	sp, #96	@ 0x60
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	88fa      	ldrh	r2, [r7, #6]
 8004e98:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2222      	movs	r2, #34	@ 0x22
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa8 <UART_Start_Receive_DMA+0x128>)
 8004eae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fac <UART_Start_Receive_DMA+0x12c>)
 8004eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebc:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb0 <UART_Start_Receive_DMA+0x130>)
 8004ebe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004ec8:	f107 0308 	add.w	r3, r7, #8
 8004ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	f7fd f898 	bl	8002014 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d019      	beq.n	8004f36 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f0c:	e853 3f00 	ldrex	r3, [r3]
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	330c      	adds	r3, #12
 8004f20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f22:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004f24:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e5      	bne.n	8004f02 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f40:	e853 3f00 	ldrex	r3, [r3]
 8004f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f56:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004f5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e5      	bne.n	8004f36 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3314      	adds	r3, #20
 8004f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f80:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3314      	adds	r3, #20
 8004f88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f8a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6a39      	ldr	r1, [r7, #32]
 8004f90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e5      	bne.n	8004f6a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3760      	adds	r7, #96	@ 0x60
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	08004bd1 	.word	0x08004bd1
 8004fac:	08004cfd 	.word	0x08004cfd
 8004fb0:	08004d39 	.word	0x08004d39

08004fb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	@ 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	e853 3f00 	ldrex	r3, [r3]
 8004fca:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	61ba      	str	r2, [r7, #24]
 8004fde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe0:	6979      	ldr	r1, [r7, #20]
 8004fe2:	69ba      	ldr	r2, [r7, #24]
 8004fe4:	e841 2300 	strex	r3, r2, [r1]
 8004fe8:	613b      	str	r3, [r7, #16]
   return(result);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1e5      	bne.n	8004fbc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004ff8:	bf00      	nop
 8004ffa:	3724      	adds	r7, #36	@ 0x24
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b095      	sub	sp, #84	@ 0x54
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	330c      	adds	r3, #12
 8005012:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005016:	e853 3f00 	ldrex	r3, [r3]
 800501a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800501c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800502c:	643a      	str	r2, [r7, #64]	@ 0x40
 800502e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800503a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e5      	bne.n	800500c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3314      	adds	r3, #20
 800505e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005068:	e841 2300 	strex	r3, r2, [r1]
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1e5      	bne.n	8005040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	d119      	bne.n	80050b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	60bb      	str	r3, [r7, #8]
   return(result);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	647b      	str	r3, [r7, #68]	@ 0x44
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800509c:	61ba      	str	r2, [r7, #24]
 800509e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6979      	ldr	r1, [r7, #20]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	613b      	str	r3, [r7, #16]
   return(result);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e5      	bne.n	800507c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050be:	bf00      	nop
 80050c0:	3754      	adds	r7, #84	@ 0x54
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b084      	sub	sp, #16
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fd69 	bl	8004bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b21      	cmp	r3, #33	@ 0x21
 8005104:	d13e      	bne.n	8005184 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800510e:	d114      	bne.n	800513a <UART_Transmit_IT+0x48>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d110      	bne.n	800513a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	881b      	ldrh	r3, [r3, #0]
 8005122:	461a      	mov	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800512c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	1c9a      	adds	r2, r3, #2
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	621a      	str	r2, [r3, #32]
 8005138:	e008      	b.n	800514c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	1c59      	adds	r1, r3, #1
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6211      	str	r1, [r2, #32]
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29b      	uxth	r3, r3
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4619      	mov	r1, r3
 800515a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10f      	bne.n	8005180 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800516e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800517e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e000      	b.n	8005186 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005184:	2302      	movs	r3, #2
  }
}
 8005186:	4618      	mov	r0, r3
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fc20 	bl	80019f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051c2:	b580      	push	{r7, lr}
 80051c4:	b08c      	sub	sp, #48	@ 0x30
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b22      	cmp	r3, #34	@ 0x22
 80051d4:	f040 80ae 	bne.w	8005334 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051e0:	d117      	bne.n	8005212 <UART_Receive_IT+0x50>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d113      	bne.n	8005212 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005200:	b29a      	uxth	r2, r3
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800520a:	1c9a      	adds	r2, r3, #2
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005210:	e026      	b.n	8005260 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005216:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005224:	d007      	beq.n	8005236 <UART_Receive_IT+0x74>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <UART_Receive_IT+0x82>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	b2da      	uxtb	r2, r3
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	701a      	strb	r2, [r3, #0]
 8005242:	e008      	b.n	8005256 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	b2db      	uxtb	r3, r3
 800524c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005254:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29b      	uxth	r3, r3
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4619      	mov	r1, r3
 800526e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005270:	2b00      	cmp	r3, #0
 8005272:	d15d      	bne.n	8005330 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0220 	bic.w	r2, r2, #32
 8005282:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005292:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d135      	bne.n	8005326 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	613b      	str	r3, [r7, #16]
   return(result);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e0:	623a      	str	r2, [r7, #32]
 80052e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	69f9      	ldr	r1, [r7, #28]
 80052e6:	6a3a      	ldr	r2, [r7, #32]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d10a      	bne.n	8005318 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fc fb74 	bl	8001a0c <HAL_UARTEx_RxEventCallback>
 8005324:	e002      	b.n	800532c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fc34 	bl	8004b94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800532c:	2300      	movs	r3, #0
 800532e:	e002      	b.n	8005336 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3730      	adds	r7, #48	@ 0x30
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b0c0      	sub	sp, #256	@ 0x100
 8005346:	af00      	add	r7, sp, #0
 8005348:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	68d9      	ldr	r1, [r3, #12]
 800535e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	ea40 0301 	orr.w	r3, r0, r1
 8005368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	431a      	orrs	r2, r3
 8005378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	431a      	orrs	r2, r3
 8005380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800538c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005398:	f021 010c 	bic.w	r1, r1, #12
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80053a6:	430b      	orrs	r3, r1
 80053a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80053b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ba:	6999      	ldr	r1, [r3, #24]
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	ea40 0301 	orr.w	r3, r0, r1
 80053c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b8f      	ldr	r3, [pc, #572]	@ (800560c <UART_SetConfig+0x2cc>)
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d005      	beq.n	80053e0 <UART_SetConfig+0xa0>
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4b8d      	ldr	r3, [pc, #564]	@ (8005610 <UART_SetConfig+0x2d0>)
 80053dc:	429a      	cmp	r2, r3
 80053de:	d104      	bne.n	80053ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e0:	f7fd ffa6 	bl	8003330 <HAL_RCC_GetPCLK2Freq>
 80053e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053e8:	e003      	b.n	80053f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053ea:	f7fd ff8d 	bl	8003308 <HAL_RCC_GetPCLK1Freq>
 80053ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f6:	69db      	ldr	r3, [r3, #28]
 80053f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053fc:	f040 810c 	bne.w	8005618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800540a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800540e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005412:	4622      	mov	r2, r4
 8005414:	462b      	mov	r3, r5
 8005416:	1891      	adds	r1, r2, r2
 8005418:	65b9      	str	r1, [r7, #88]	@ 0x58
 800541a:	415b      	adcs	r3, r3
 800541c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800541e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005422:	4621      	mov	r1, r4
 8005424:	eb12 0801 	adds.w	r8, r2, r1
 8005428:	4629      	mov	r1, r5
 800542a:	eb43 0901 	adc.w	r9, r3, r1
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800543a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800543e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005442:	4690      	mov	r8, r2
 8005444:	4699      	mov	r9, r3
 8005446:	4623      	mov	r3, r4
 8005448:	eb18 0303 	adds.w	r3, r8, r3
 800544c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005450:	462b      	mov	r3, r5
 8005452:	eb49 0303 	adc.w	r3, r9, r3
 8005456:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005466:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800546a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800546e:	460b      	mov	r3, r1
 8005470:	18db      	adds	r3, r3, r3
 8005472:	653b      	str	r3, [r7, #80]	@ 0x50
 8005474:	4613      	mov	r3, r2
 8005476:	eb42 0303 	adc.w	r3, r2, r3
 800547a:	657b      	str	r3, [r7, #84]	@ 0x54
 800547c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005484:	f7fb fb34 	bl	8000af0 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b61      	ldr	r3, [pc, #388]	@ (8005614 <UART_SetConfig+0x2d4>)
 800548e:	fba3 2302 	umull	r2, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	011c      	lsls	r4, r3, #4
 8005496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80054a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80054a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80054b0:	415b      	adcs	r3, r3
 80054b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054b8:	4641      	mov	r1, r8
 80054ba:	eb12 0a01 	adds.w	sl, r2, r1
 80054be:	4649      	mov	r1, r9
 80054c0:	eb43 0b01 	adc.w	fp, r3, r1
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054d8:	4692      	mov	sl, r2
 80054da:	469b      	mov	fp, r3
 80054dc:	4643      	mov	r3, r8
 80054de:	eb1a 0303 	adds.w	r3, sl, r3
 80054e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054e6:	464b      	mov	r3, r9
 80054e8:	eb4b 0303 	adc.w	r3, fp, r3
 80054ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	643b      	str	r3, [r7, #64]	@ 0x40
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	647b      	str	r3, [r7, #68]	@ 0x44
 8005512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800551a:	f7fb fae9 	bl	8000af0 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4611      	mov	r1, r2
 8005524:	4b3b      	ldr	r3, [pc, #236]	@ (8005614 <UART_SetConfig+0x2d4>)
 8005526:	fba3 2301 	umull	r2, r3, r3, r1
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	2264      	movs	r2, #100	@ 0x64
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	1acb      	subs	r3, r1, r3
 8005534:	00db      	lsls	r3, r3, #3
 8005536:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800553a:	4b36      	ldr	r3, [pc, #216]	@ (8005614 <UART_SetConfig+0x2d4>)
 800553c:	fba3 2302 	umull	r2, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005548:	441c      	add	r4, r3
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554e:	2200      	movs	r2, #0
 8005550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005554:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	1891      	adds	r1, r2, r2
 8005562:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005564:	415b      	adcs	r3, r3
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800556c:	4641      	mov	r1, r8
 800556e:	1851      	adds	r1, r2, r1
 8005570:	6339      	str	r1, [r7, #48]	@ 0x30
 8005572:	4649      	mov	r1, r9
 8005574:	414b      	adcs	r3, r1
 8005576:	637b      	str	r3, [r7, #52]	@ 0x34
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005584:	4659      	mov	r1, fp
 8005586:	00cb      	lsls	r3, r1, #3
 8005588:	4651      	mov	r1, sl
 800558a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558e:	4651      	mov	r1, sl
 8005590:	00ca      	lsls	r2, r1, #3
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	4603      	mov	r3, r0
 8005598:	4642      	mov	r2, r8
 800559a:	189b      	adds	r3, r3, r2
 800559c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055a0:	464b      	mov	r3, r9
 80055a2:	460a      	mov	r2, r1
 80055a4:	eb42 0303 	adc.w	r3, r2, r3
 80055a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055c0:	460b      	mov	r3, r1
 80055c2:	18db      	adds	r3, r3, r3
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055c6:	4613      	mov	r3, r2
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055d6:	f7fb fa8b 	bl	8000af0 <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <UART_SetConfig+0x2d4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	@ 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	3332      	adds	r3, #50	@ 0x32
 80055f2:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <UART_SetConfig+0x2d4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 0207 	and.w	r2, r3, #7
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4422      	add	r2, r4
 8005606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005608:	e106      	b.n	8005818 <UART_SetConfig+0x4d8>
 800560a:	bf00      	nop
 800560c:	40011000 	.word	0x40011000
 8005610:	40011400 	.word	0x40011400
 8005614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561c:	2200      	movs	r2, #0
 800561e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005622:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800562a:	4642      	mov	r2, r8
 800562c:	464b      	mov	r3, r9
 800562e:	1891      	adds	r1, r2, r2
 8005630:	6239      	str	r1, [r7, #32]
 8005632:	415b      	adcs	r3, r3
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
 8005636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563a:	4641      	mov	r1, r8
 800563c:	1854      	adds	r4, r2, r1
 800563e:	4649      	mov	r1, r9
 8005640:	eb43 0501 	adc.w	r5, r3, r1
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	00eb      	lsls	r3, r5, #3
 800564e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005652:	00e2      	lsls	r2, r4, #3
 8005654:	4614      	mov	r4, r2
 8005656:	461d      	mov	r5, r3
 8005658:	4643      	mov	r3, r8
 800565a:	18e3      	adds	r3, r4, r3
 800565c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005660:	464b      	mov	r3, r9
 8005662:	eb45 0303 	adc.w	r3, r5, r3
 8005666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005676:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005686:	4629      	mov	r1, r5
 8005688:	008b      	lsls	r3, r1, #2
 800568a:	4621      	mov	r1, r4
 800568c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005690:	4621      	mov	r1, r4
 8005692:	008a      	lsls	r2, r1, #2
 8005694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005698:	f7fb fa2a 	bl	8000af0 <__aeabi_uldivmod>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	4b60      	ldr	r3, [pc, #384]	@ (8005824 <UART_SetConfig+0x4e4>)
 80056a2:	fba3 2302 	umull	r2, r3, r3, r2
 80056a6:	095b      	lsrs	r3, r3, #5
 80056a8:	011c      	lsls	r4, r3, #4
 80056aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056bc:	4642      	mov	r2, r8
 80056be:	464b      	mov	r3, r9
 80056c0:	1891      	adds	r1, r2, r2
 80056c2:	61b9      	str	r1, [r7, #24]
 80056c4:	415b      	adcs	r3, r3
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056cc:	4641      	mov	r1, r8
 80056ce:	1851      	adds	r1, r2, r1
 80056d0:	6139      	str	r1, [r7, #16]
 80056d2:	4649      	mov	r1, r9
 80056d4:	414b      	adcs	r3, r1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e4:	4659      	mov	r1, fp
 80056e6:	00cb      	lsls	r3, r1, #3
 80056e8:	4651      	mov	r1, sl
 80056ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ee:	4651      	mov	r1, sl
 80056f0:	00ca      	lsls	r2, r1, #3
 80056f2:	4610      	mov	r0, r2
 80056f4:	4619      	mov	r1, r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	4642      	mov	r2, r8
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005700:	464b      	mov	r3, r9
 8005702:	460a      	mov	r2, r1
 8005704:	eb42 0303 	adc.w	r3, r2, r3
 8005708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800570c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	f04f 0300 	mov.w	r3, #0
 8005720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005724:	4649      	mov	r1, r9
 8005726:	008b      	lsls	r3, r1, #2
 8005728:	4641      	mov	r1, r8
 800572a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800572e:	4641      	mov	r1, r8
 8005730:	008a      	lsls	r2, r1, #2
 8005732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005736:	f7fb f9db 	bl	8000af0 <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4611      	mov	r1, r2
 8005740:	4b38      	ldr	r3, [pc, #224]	@ (8005824 <UART_SetConfig+0x4e4>)
 8005742:	fba3 2301 	umull	r2, r3, r3, r1
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2264      	movs	r2, #100	@ 0x64
 800574a:	fb02 f303 	mul.w	r3, r2, r3
 800574e:	1acb      	subs	r3, r1, r3
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	3332      	adds	r3, #50	@ 0x32
 8005754:	4a33      	ldr	r2, [pc, #204]	@ (8005824 <UART_SetConfig+0x4e4>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005760:	441c      	add	r4, r3
 8005762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005766:	2200      	movs	r2, #0
 8005768:	673b      	str	r3, [r7, #112]	@ 0x70
 800576a:	677a      	str	r2, [r7, #116]	@ 0x74
 800576c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	415b      	adcs	r3, r3
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005780:	4641      	mov	r1, r8
 8005782:	1851      	adds	r1, r2, r1
 8005784:	6039      	str	r1, [r7, #0]
 8005786:	4649      	mov	r1, r9
 8005788:	414b      	adcs	r3, r1
 800578a:	607b      	str	r3, [r7, #4]
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005798:	4659      	mov	r1, fp
 800579a:	00cb      	lsls	r3, r1, #3
 800579c:	4651      	mov	r1, sl
 800579e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a2:	4651      	mov	r1, sl
 80057a4:	00ca      	lsls	r2, r1, #3
 80057a6:	4610      	mov	r0, r2
 80057a8:	4619      	mov	r1, r3
 80057aa:	4603      	mov	r3, r0
 80057ac:	4642      	mov	r2, r8
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057b2:	464b      	mov	r3, r9
 80057b4:	460a      	mov	r2, r1
 80057b6:	eb42 0303 	adc.w	r3, r2, r3
 80057ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80057c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057d4:	4649      	mov	r1, r9
 80057d6:	008b      	lsls	r3, r1, #2
 80057d8:	4641      	mov	r1, r8
 80057da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057de:	4641      	mov	r1, r8
 80057e0:	008a      	lsls	r2, r1, #2
 80057e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057e6:	f7fb f983 	bl	8000af0 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005824 <UART_SetConfig+0x4e4>)
 80057f0:	fba3 1302 	umull	r1, r3, r3, r2
 80057f4:	095b      	lsrs	r3, r3, #5
 80057f6:	2164      	movs	r1, #100	@ 0x64
 80057f8:	fb01 f303 	mul.w	r3, r1, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	3332      	adds	r3, #50	@ 0x32
 8005802:	4a08      	ldr	r2, [pc, #32]	@ (8005824 <UART_SetConfig+0x4e4>)
 8005804:	fba2 2303 	umull	r2, r3, r2, r3
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	f003 020f 	and.w	r2, r3, #15
 800580e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4422      	add	r2, r4
 8005816:	609a      	str	r2, [r3, #8]
}
 8005818:	bf00      	nop
 800581a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800581e:	46bd      	mov	sp, r7
 8005820:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005824:	51eb851f 	.word	0x51eb851f

08005828 <beepInit>:
#include "beep.h"

void beepInit(){
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 800582c:	2100      	movs	r1, #0
 800582e:	4802      	ldr	r0, [pc, #8]	@ (8005838 <beepInit+0x10>)
 8005830:	f7fd fecc 	bl	80035cc <HAL_TIM_PWM_Start>
}
 8005834:	bf00      	nop
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000118 	.word	0x20000118

0800583c <beepStop>:
void beepStop(){
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim10, TIM_CHANNEL_1);
 8005840:	2100      	movs	r1, #0
 8005842:	4802      	ldr	r0, [pc, #8]	@ (800584c <beepStop+0x10>)
 8005844:	f7fd ff72 	bl	800372c <HAL_TIM_PWM_Stop>
}
 8005848:	bf00      	nop
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000118 	.word	0x20000118

08005850 <eatMusic>:

void eatMusic(){
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 100; i++){
 8005856:	2300      	movs	r3, #0
 8005858:	71fb      	strb	r3, [r7, #7]
 800585a:	e009      	b.n	8005870 <eatMusic+0x20>
	HAL_Delay(1);
 800585c:	2001      	movs	r0, #1
 800585e:	f7fc f9f5 	bl	8001c4c <HAL_Delay>
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, i);
 8005862:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <eatMusic+0x30>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	79fa      	ldrb	r2, [r7, #7]
 8005868:	635a      	str	r2, [r3, #52]	@ 0x34
	for(uint8_t i = 0; i < 100; i++){
 800586a:	79fb      	ldrb	r3, [r7, #7]
 800586c:	3301      	adds	r3, #1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	2b63      	cmp	r3, #99	@ 0x63
 8005874:	d9f2      	bls.n	800585c <eatMusic+0xc>
	}
}
 8005876:	bf00      	nop
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000118 	.word	0x20000118

08005884 <putData>:
{
  digitron_buf[numb] = section;
}


void putData(uint8_t segments) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	4603      	mov	r3, r0
 800588c:	71fb      	strb	r3, [r7, #7]
    for(uint8_t i = 0; i < 8; i++) {
 800588e:	2300      	movs	r3, #0
 8005890:	73fb      	strb	r3, [r7, #15]
 8005892:	e013      	b.n	80058bc <putData+0x38>
        HAL_GPIO_WritePin(HC595[0].port, HC595[0].pin, (segments >> (7-i)) & 0x01);
 8005894:	480d      	ldr	r0, [pc, #52]	@ (80058cc <putData+0x48>)
 8005896:	2108      	movs	r1, #8
 8005898:	79fa      	ldrb	r2, [r7, #7]
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	f1c3 0307 	rsb	r3, r3, #7
 80058a0:	fa42 f303 	asr.w	r3, r2, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	f7fd f8a1 	bl	80029f4 <HAL_GPIO_WritePin>
        sftClk();
 80058b2:	f000 f80d 	bl	80058d0 <sftClk>
    for(uint8_t i = 0; i < 8; i++) {
 80058b6:	7bfb      	ldrb	r3, [r7, #15]
 80058b8:	3301      	adds	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	2b07      	cmp	r3, #7
 80058c0:	d9e8      	bls.n	8005894 <putData+0x10>
    }
}
 80058c2:	bf00      	nop
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40020400 	.word	0x40020400

080058d0 <sftClk>:

//给PB5引脚一个上升沿
void sftClk(void){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC595[2].port, HC595[2].pin, RESET);
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <sftClk+0x20>)
 80058d6:	2120      	movs	r1, #32
 80058d8:	2200      	movs	r2, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fd f88a 	bl	80029f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC595[2].port, HC595[2].pin, SET);
 80058e0:	4b03      	ldr	r3, [pc, #12]	@ (80058f0 <sftClk+0x20>)
 80058e2:	2120      	movs	r1, #32
 80058e4:	2201      	movs	r2, #1
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fd f884 	bl	80029f4 <HAL_GPIO_WritePin>
}
 80058ec:	bf00      	nop
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40020400 	.word	0x40020400

080058f4 <latchClk>:

//给PB4引脚一个上升沿
void latchClk(void){
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HC595[1].port, HC595[1].pin, RESET);
 80058f8:	4b06      	ldr	r3, [pc, #24]	@ (8005914 <latchClk+0x20>)
 80058fa:	2110      	movs	r1, #16
 80058fc:	2200      	movs	r2, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd f878 	bl	80029f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HC595[1].port, HC595[1].pin, SET);
 8005904:	4b03      	ldr	r3, [pc, #12]	@ (8005914 <latchClk+0x20>)
 8005906:	2110      	movs	r1, #16
 8005908:	2201      	movs	r2, #1
 800590a:	4618      	mov	r0, r3
 800590c:	f7fd f872 	bl	80029f4 <HAL_GPIO_WritePin>
}
 8005910:	bf00      	nop
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40020400 	.word	0x40020400

08005918 <chooseDigitron>:

/*----------------------实现数码管段选后显示任意一段-------------------------------*/
void chooseDigitron(uint8_t position){
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
	for(uint16_t i = 0; i < 3; i++){
 8005922:	2300      	movs	r3, #0
 8005924:	81fb      	strh	r3, [r7, #14]
 8005926:	e016      	b.n	8005956 <chooseDigitron+0x3e>
		HAL_GPIO_WritePin(HC183[i].port, HC183[i].pin, (position >> i) & 0x01);
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	4a0f      	ldr	r2, [pc, #60]	@ (8005968 <chooseDigitron+0x50>)
 800592c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	4a0d      	ldr	r2, [pc, #52]	@ (8005968 <chooseDigitron+0x50>)
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	8899      	ldrh	r1, [r3, #4]
 800593a:	79fa      	ldrb	r2, [r7, #7]
 800593c:	89fb      	ldrh	r3, [r7, #14]
 800593e:	fa42 f303 	asr.w	r3, r2, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	b2db      	uxtb	r3, r3
 800594a:	461a      	mov	r2, r3
 800594c:	f7fd f852 	bl	80029f4 <HAL_GPIO_WritePin>
	for(uint16_t i = 0; i < 3; i++){
 8005950:	89fb      	ldrh	r3, [r7, #14]
 8005952:	3301      	adds	r3, #1
 8005954:	81fb      	strh	r3, [r7, #14]
 8005956:	89fb      	ldrh	r3, [r7, #14]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d9e5      	bls.n	8005928 <chooseDigitron+0x10>
	}
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	08007108 	.word	0x08007108

0800596c <displayToken>:



/*----------------------更新显示到缓冲区----------------------*/
void displayToken(uint8_t n, uint8_t section) {
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	4603      	mov	r3, r0
 8005974:	460a      	mov	r2, r1
 8005976:	71fb      	strb	r3, [r7, #7]
 8005978:	4613      	mov	r3, r2
 800597a:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(0.5);
 800597c:	2000      	movs	r0, #0
 800597e:	f7fc f965 	bl	8001c4c <HAL_Delay>
	putData(section);
 8005982:	79bb      	ldrb	r3, [r7, #6]
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff ff7d 	bl	8005884 <putData>
	latchClk();
 800598a:	f7ff ffb3 	bl	80058f4 <latchClk>
    chooseDigitron(n);
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	4618      	mov	r0, r3
 8005992:	f7ff ffc1 	bl	8005918 <chooseDigitron>

}
 8005996:	bf00      	nop
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <showStart>:
/*显示开始界面
 *
 */
void showStart(){
 800599e:	b580      	push	{r7, lr}
 80059a0:	af00      	add	r7, sp, #0
	 displayToken(0, 0x40);
 80059a2:	2140      	movs	r1, #64	@ 0x40
 80059a4:	2000      	movs	r0, #0
 80059a6:	f7ff ffe1 	bl	800596c <displayToken>
	 displayToken(1, 0x40);
 80059aa:	2140      	movs	r1, #64	@ 0x40
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7ff ffdd 	bl	800596c <displayToken>
	 displayToken(2, 0x76);
 80059b2:	2176      	movs	r1, #118	@ 0x76
 80059b4:	2002      	movs	r0, #2
 80059b6:	f7ff ffd9 	bl	800596c <displayToken>
	 displayToken(3, 0x79);
 80059ba:	2179      	movs	r1, #121	@ 0x79
 80059bc:	2003      	movs	r0, #3
 80059be:	f7ff ffd5 	bl	800596c <displayToken>
	 displayToken(4, 0x38);
 80059c2:	2138      	movs	r1, #56	@ 0x38
 80059c4:	2004      	movs	r0, #4
 80059c6:	f7ff ffd1 	bl	800596c <displayToken>
	 displayToken(5, 0x38);
 80059ca:	2138      	movs	r1, #56	@ 0x38
 80059cc:	2005      	movs	r0, #5
 80059ce:	f7ff ffcd 	bl	800596c <displayToken>
	 displayToken(6, 0x3f);
 80059d2:	213f      	movs	r1, #63	@ 0x3f
 80059d4:	2006      	movs	r0, #6
 80059d6:	f7ff ffc9 	bl	800596c <displayToken>
	 displayToken(7, 0x40);
 80059da:	2140      	movs	r1, #64	@ 0x40
 80059dc:	2007      	movs	r0, #7
 80059de:	f7ff ffc5 	bl	800596c <displayToken>
}
 80059e2:	bf00      	nop
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <showPause>:


/*显示暂停界面
 *
 */
void showPause(){
 80059e6:	b580      	push	{r7, lr}
 80059e8:	af00      	add	r7, sp, #0
	 displayToken(2, 0x73);
 80059ea:	2173      	movs	r1, #115	@ 0x73
 80059ec:	2002      	movs	r0, #2
 80059ee:	f7ff ffbd 	bl	800596c <displayToken>
	 displayToken(3, 0x77);
 80059f2:	2177      	movs	r1, #119	@ 0x77
 80059f4:	2003      	movs	r0, #3
 80059f6:	f7ff ffb9 	bl	800596c <displayToken>
	 displayToken(4, 0x3E);
 80059fa:	213e      	movs	r1, #62	@ 0x3e
 80059fc:	2004      	movs	r0, #4
 80059fe:	f7ff ffb5 	bl	800596c <displayToken>
	 displayToken(5, 0x6D);
 8005a02:	216d      	movs	r1, #109	@ 0x6d
 8005a04:	2005      	movs	r0, #5
 8005a06:	f7ff ffb1 	bl	800596c <displayToken>
	 displayToken(6, 0x79);
 8005a0a:	2179      	movs	r1, #121	@ 0x79
 8005a0c:	2006      	movs	r0, #6
 8005a0e:	f7ff ffad 	bl	800596c <displayToken>
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <showEnd>:

/*显示Lose
 *
 */
void showEnd(){
 8005a16:	b580      	push	{r7, lr}
 8005a18:	af00      	add	r7, sp, #0
	 displayToken(2, 0x38);
 8005a1a:	2138      	movs	r1, #56	@ 0x38
 8005a1c:	2002      	movs	r0, #2
 8005a1e:	f7ff ffa5 	bl	800596c <displayToken>
	 displayToken(3, 0x3f);
 8005a22:	213f      	movs	r1, #63	@ 0x3f
 8005a24:	2003      	movs	r0, #3
 8005a26:	f7ff ffa1 	bl	800596c <displayToken>
	 displayToken(4, 0x6D);
 8005a2a:	216d      	movs	r1, #109	@ 0x6d
 8005a2c:	2004      	movs	r0, #4
 8005a2e:	f7ff ff9d 	bl	800596c <displayToken>
	 displayToken(5, 0x79);
 8005a32:	2179      	movs	r1, #121	@ 0x79
 8005a34:	2005      	movs	r0, #5
 8005a36:	f7ff ff99 	bl	800596c <displayToken>
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <keyInit>:
static enum KEY key = KEY_NULL;


/*----------初始化按键----------------*/

void keyInit(void){
 8005a40:	b580      	push	{r7, lr}
 8005a42:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8005a44:	4802      	ldr	r0, [pc, #8]	@ (8005a50 <keyInit+0x10>)
 8005a46:	f7fd fcd7 	bl	80033f8 <HAL_TIM_Base_Start_IT>
}
 8005a4a:	bf00      	nop
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000088 	.word	0x20000088

08005a54 <keyRead>:

/*---------读取按键值---------------*/
enum KEY keyRead(){
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
	enum KEY k;
	if(key >= KEY_UP_SHORT)
 8005a5a:	4b09      	ldr	r3, [pc, #36]	@ (8005a80 <keyRead+0x2c>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d903      	bls.n	8005a6a <keyRead+0x16>
	{
		k = key;
 8005a62:	4b07      	ldr	r3, [pc, #28]	@ (8005a80 <keyRead+0x2c>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	71fb      	strb	r3, [r7, #7]
 8005a68:	e002      	b.n	8005a70 <keyRead+0x1c>
	}
	else
		{
			k = key;
 8005a6a:	4b05      	ldr	r3, [pc, #20]	@ (8005a80 <keyRead+0x2c>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	71fb      	strb	r3, [r7, #7]
		}
	return k;
 8005a70:	79fb      	ldrb	r3, [r7, #7]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	200002a0 	.word	0x200002a0

08005a84 <keyResponse>:

/*---------按键响应函数------------*/
void keyResponse(){
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
	static uint32_t currentTic = 0;
	static uint32_t lastTic = 0;
	static uint8_t keyIndex = 0;
	currentTic++;
 8005a8a:	4b58      	ldr	r3, [pc, #352]	@ (8005bec <keyResponse+0x168>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	4a56      	ldr	r2, [pc, #344]	@ (8005bec <keyResponse+0x168>)
 8005a92:	6013      	str	r3, [r2, #0]
	switch(key){
 8005a94:	4b56      	ldr	r3, [pc, #344]	@ (8005bf0 <keyResponse+0x16c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	f000 8082 	beq.w	8005ba2 <keyResponse+0x11e>
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	f300 8094 	bgt.w	8005bcc <keyResponse+0x148>
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <keyResponse+0x2a>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d03e      	beq.n	8005b2a <keyResponse+0xa6>
 8005aac:	e08e      	b.n	8005bcc <keyResponse+0x148>
	case KEY_NULL:
		for(uint8_t i = 0; i<NUM_KEYS; i++){
 8005aae:	2300      	movs	r3, #0
 8005ab0:	71fb      	strb	r3, [r7, #7]
 8005ab2:	e035      	b.n	8005b20 <keyResponse+0x9c>
			if(i != 0)
 8005ab4:	79fb      	ldrb	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d017      	beq.n	8005aea <keyResponse+0x66>
				{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 0)
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	4a4d      	ldr	r2, [pc, #308]	@ (8005bf4 <keyResponse+0x170>)
 8005abe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005ac2:	79fb      	ldrb	r3, [r7, #7]
 8005ac4:	494b      	ldr	r1, [pc, #300]	@ (8005bf4 <keyResponse+0x170>)
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	889b      	ldrh	r3, [r3, #4]
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fc ff78 	bl	80029c4 <HAL_GPIO_ReadPin>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11f      	bne.n	8005b1a <keyResponse+0x96>
					{
						key = KEY_DOWN;		//记录按键被按下
 8005ada:	4b45      	ldr	r3, [pc, #276]	@ (8005bf0 <keyResponse+0x16c>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	701a      	strb	r2, [r3, #0]
						lastTic = currentTic;
 8005ae0:	4b42      	ldr	r3, [pc, #264]	@ (8005bec <keyResponse+0x168>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a44      	ldr	r2, [pc, #272]	@ (8005bf8 <keyResponse+0x174>)
 8005ae6:	6013      	str	r3, [r2, #0]
						break;
 8005ae8:	e01e      	b.n	8005b28 <keyResponse+0xa4>
					}
				}
			else{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 1)
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	4a41      	ldr	r2, [pc, #260]	@ (8005bf4 <keyResponse+0x170>)
 8005aee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	493f      	ldr	r1, [pc, #252]	@ (8005bf4 <keyResponse+0x170>)
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	440b      	add	r3, r1
 8005afa:	889b      	ldrh	r3, [r3, #4]
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f7fc ff60 	bl	80029c4 <HAL_GPIO_ReadPin>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d107      	bne.n	8005b1a <keyResponse+0x96>
					{
						key = KEY_DOWN;		//按键Up按下是为1
 8005b0a:	4b39      	ldr	r3, [pc, #228]	@ (8005bf0 <keyResponse+0x16c>)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	701a      	strb	r2, [r3, #0]
						lastTic = currentTic;
 8005b10:	4b36      	ldr	r3, [pc, #216]	@ (8005bec <keyResponse+0x168>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a38      	ldr	r2, [pc, #224]	@ (8005bf8 <keyResponse+0x174>)
 8005b16:	6013      	str	r3, [r2, #0]
						break;
 8005b18:	e006      	b.n	8005b28 <keyResponse+0xa4>
		for(uint8_t i = 0; i<NUM_KEYS; i++){
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	71fb      	strb	r3, [r7, #7]
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d9c6      	bls.n	8005ab4 <keyResponse+0x30>
					}
			}
		}
		break;
 8005b26:	e05c      	b.n	8005be2 <keyResponse+0x15e>
 8005b28:	e05b      	b.n	8005be2 <keyResponse+0x15e>
	case KEY_DOWN:
		for(uint8_t i = 0; i< NUM_KEYS; i++){
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	71bb      	strb	r3, [r7, #6]
 8005b2e:	e033      	b.n	8005b98 <keyResponse+0x114>
			if(i != 0){
 8005b30:	79bb      	ldrb	r3, [r7, #6]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d013      	beq.n	8005b5e <keyResponse+0xda>
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 0)
 8005b36:	79bb      	ldrb	r3, [r7, #6]
 8005b38:	4a2e      	ldr	r2, [pc, #184]	@ (8005bf4 <keyResponse+0x170>)
 8005b3a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005b3e:	79bb      	ldrb	r3, [r7, #6]
 8005b40:	492c      	ldr	r1, [pc, #176]	@ (8005bf4 <keyResponse+0x170>)
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	889b      	ldrh	r3, [r3, #4]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4610      	mov	r0, r2
 8005b4c:	f7fc ff3a 	bl	80029c4 <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d117      	bne.n	8005b86 <keyResponse+0x102>
				{
					keyIndex = i;	//按键未抬起，记录该键值
 8005b56:	4a29      	ldr	r2, [pc, #164]	@ (8005bfc <keyResponse+0x178>)
 8005b58:	79bb      	ldrb	r3, [r7, #6]
 8005b5a:	7013      	strb	r3, [r2, #0]
					break;
 8005b5c:	e020      	b.n	8005ba0 <keyResponse+0x11c>
				}
			}
			else{
				if(HAL_GPIO_ReadPin(keyPort[i].port, keyPort[i].pin) == 1)
 8005b5e:	79bb      	ldrb	r3, [r7, #6]
 8005b60:	4a24      	ldr	r2, [pc, #144]	@ (8005bf4 <keyResponse+0x170>)
 8005b62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8005b66:	79bb      	ldrb	r3, [r7, #6]
 8005b68:	4922      	ldr	r1, [pc, #136]	@ (8005bf4 <keyResponse+0x170>)
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	889b      	ldrh	r3, [r3, #4]
 8005b70:	4619      	mov	r1, r3
 8005b72:	4610      	mov	r0, r2
 8005b74:	f7fc ff26 	bl	80029c4 <HAL_GPIO_ReadPin>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d103      	bne.n	8005b86 <keyResponse+0x102>
				{
					keyIndex = i;	//按键未抬起，记录该键值
 8005b7e:	4a1f      	ldr	r2, [pc, #124]	@ (8005bfc <keyResponse+0x178>)
 8005b80:	79bb      	ldrb	r3, [r7, #6]
 8005b82:	7013      	strb	r3, [r2, #0]
					break;
 8005b84:	e00c      	b.n	8005ba0 <keyResponse+0x11c>
				}

			}
			if(i >= NUM_KEYS-1)
 8005b86:	79bb      	ldrb	r3, [r7, #6]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d902      	bls.n	8005b92 <keyResponse+0x10e>
			{
				key = KEY_UP;	//遍历完4个按键后发现没有按下的按键后切换状态
 8005b8c:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <keyResponse+0x16c>)
 8005b8e:	2202      	movs	r2, #2
 8005b90:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i< NUM_KEYS; i++){
 8005b92:	79bb      	ldrb	r3, [r7, #6]
 8005b94:	3301      	adds	r3, #1
 8005b96:	71bb      	strb	r3, [r7, #6]
 8005b98:	79bb      	ldrb	r3, [r7, #6]
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d9c8      	bls.n	8005b30 <keyResponse+0xac>

			}
		}
		break;
 8005b9e:	e020      	b.n	8005be2 <keyResponse+0x15e>
 8005ba0:	e01f      	b.n	8005be2 <keyResponse+0x15e>
	case KEY_UP:
		if((currentTic - lastTic) > KEY_LONG_THRESHOLD){
 8005ba2:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <keyResponse+0x168>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	4b14      	ldr	r3, [pc, #80]	@ (8005bf8 <keyResponse+0x174>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b50      	cmp	r3, #80	@ 0x50
 8005bae:	d906      	bls.n	8005bbe <keyResponse+0x13a>
			key = (enum KEY) (keyIndex+KEY_UP_LONG);		//记录长按键状态
 8005bb0:	4b12      	ldr	r3, [pc, #72]	@ (8005bfc <keyResponse+0x178>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	3307      	adds	r3, #7
 8005bb6:	b2da      	uxtb	r2, r3
 8005bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf0 <keyResponse+0x16c>)
 8005bba:	701a      	strb	r2, [r3, #0]
		}
		else{
			key = (enum KEY) (keyIndex+KEY_UP_SHORT);		//记录短按键状态

		}
		break;
 8005bbc:	e011      	b.n	8005be2 <keyResponse+0x15e>
			key = (enum KEY) (keyIndex+KEY_UP_SHORT);		//记录短按键状态
 8005bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <keyResponse+0x178>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	3303      	adds	r3, #3
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8005bf0 <keyResponse+0x16c>)
 8005bc8:	701a      	strb	r2, [r3, #0]
		break;
 8005bca:	e00a      	b.n	8005be2 <keyResponse+0x15e>
	default:
		if(!moveOneStep){
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <keyResponse+0x17c>)
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d005      	beq.n	8005be0 <keyResponse+0x15c>

			break;
		}
		recordStep();
 8005bd4:	f000 f8be 	bl	8005d54 <recordStep>
		key = KEY_NULL;
 8005bd8:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <keyResponse+0x16c>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
}
}
 8005bde:	e000      	b.n	8005be2 <keyResponse+0x15e>
			break;
 8005be0:	bf00      	nop
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	200002a4 	.word	0x200002a4
 8005bf0:	200002a0 	.word	0x200002a0
 8005bf4:	08007120 	.word	0x08007120
 8005bf8:	200002a8 	.word	0x200002a8
 8005bfc:	200002ac 	.word	0x200002ac
 8005c00:	200002b8 	.word	0x200002b8

08005c04 <ledOn>:
};

#define NUM_LEDS sizeof(led) / sizeof(struct GPIO_LED)


void ledOn(uint8_t val){
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 8005c0e:	2300      	movs	r3, #0
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e017      	b.n	8005c44 <ledOn+0x40>
		if(val & (0x01 << i))
 8005c14:	79fa      	ldrb	r2, [r7, #7]
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	fa42 f303 	asr.w	r3, r2, r3
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <ledOn+0x3a>
			{HAL_GPIO_WritePin(led[i].port, led[i].pin, RESET);}
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4a0b      	ldr	r2, [pc, #44]	@ (8005c54 <ledOn+0x50>)
 8005c28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	4a09      	ldr	r2, [pc, #36]	@ (8005c54 <ledOn+0x50>)
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	889b      	ldrh	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f7fc fedb 	bl	80029f4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	3301      	adds	r3, #1
 8005c42:	73fb      	strb	r3, [r7, #15]
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	2b07      	cmp	r3, #7
 8005c48:	d9e4      	bls.n	8005c14 <ledOn+0x10>
	}


}
 8005c4a:	bf00      	nop
 8005c4c:	bf00      	nop
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	08007140 	.word	0x08007140

08005c58 <ledOff>:

void ledOff(uint8_t val){
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	e017      	b.n	8005c98 <ledOff+0x40>
			if(val & (0x01 << i))
 8005c68:	79fa      	ldrb	r2, [r7, #7]
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	fa42 f303 	asr.w	r3, r2, r3
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00c      	beq.n	8005c92 <ledOff+0x3a>
				{HAL_GPIO_WritePin(led[i].port, led[i].pin, SET);}
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ca8 <ledOff+0x50>)
 8005c7c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <ledOff+0x50>)
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	4413      	add	r3, r2
 8005c88:	889b      	ldrh	r3, [r3, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	f7fc feb1 	bl	80029f4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < NUM_LEDS; i++){
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	3301      	adds	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b07      	cmp	r3, #7
 8005c9c:	d9e4      	bls.n	8005c68 <ledOff+0x10>
		}

}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	08007140 	.word	0x08007140

08005cac <ledScore>:
				if(val & (0x01 << i))
					{HAL_GPIO_TogglePin(led[i].port, led[i].pin);}
			}
}

void ledScore(uint8_t score){
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	71fb      	strb	r3, [r7, #7]
	ledOff(score-1);
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ffcb 	bl	8005c58 <ledOff>
	ledOn(score);
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff ff9d 	bl	8005c04 <ledOn>
}
 8005cca:	bf00      	nop
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <createSnakeNode>:
        }
    }
};

/*--------------创建蛇的每个块----------------*/
struct SNAKE_STATUS *createSnakeNode(Position pos, Direction dir){
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	80b8      	strh	r0, [r7, #4]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	70fb      	strb	r3, [r7, #3]
	struct SNAKE_STATUS* headNode = (struct SNAKE_STATUS *)malloc(sizeof(struct SNAKE_STATUS));
 8005cde:	2008      	movs	r0, #8
 8005ce0:	f000 fb38 	bl	8006354 <malloc>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	60fb      	str	r3, [r7, #12]
	if(headNode == NULL){
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <createSnakeNode+0x20>
		return NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e00c      	b.n	8005d0c <createSnakeNode+0x3a>
	}
	headNode->position.n = pos.n;
 8005cf2:	793a      	ldrb	r2, [r7, #4]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	701a      	strb	r2, [r3, #0]
	headNode->position.section = pos.section;
 8005cf8:	797a      	ldrb	r2, [r7, #5]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	705a      	strb	r2, [r3, #1]
	headNode->towards = dir;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	709a      	strb	r2, [r3, #2]
	headNode->next = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	605a      	str	r2, [r3, #4]
	return headNode;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <addBlock>:

/*---------在蛇尾添加新的块-------------*/
struct SNAKE_STATUS *addBlock(struct SNAKE_STATUS* head, struct SNAKE_STATUS* tail){
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]

	struct SNAKE_STATUS* currentNode = head;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	60fb      	str	r3, [r7, #12]
	//找到最后的节点
	while(currentNode->next != NULL){
 8005d22:	e002      	b.n	8005d2a <addBlock+0x16>
		currentNode = currentNode->next;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
	while(currentNode->next != NULL){
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f8      	bne.n	8005d24 <addBlock+0x10>
	}
	struct SNAKE_STATUS* bodyNode = createSnakeNode(tail->position, tail->towards);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	789a      	ldrb	r2, [r3, #2]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	4611      	mov	r1, r2
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	f7ff ffc9 	bl	8005cd2 <createSnakeNode>
 8005d40:	60b8      	str	r0, [r7, #8]
	currentNode->next = bodyNode;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	605a      	str	r2, [r3, #4]
	return head;
 8005d48:	687b      	ldr	r3, [r7, #4]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <recordStep>:


/*---------记录蛇是否动了一步---------*/
void recordStep(void){
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
	moveOneStep = !moveOneStep;
 8005d58:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <recordStep+0x24>)
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b03      	ldr	r3, [pc, #12]	@ (8005d78 <recordStep+0x24>)
 8005d6a:	801a      	strh	r2, [r3, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	200002b8 	.word	0x200002b8

08005d7c <snakeInit>:
		currentBlock = currentBlock->next;
	} while (currentBlock != NULL);

}
/*-------------------初始化蛇在左上角且长度为一-------------------*/
void snakeInit(void) {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
    if (mainSnake == NULL) {
 8005d80:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <snakeInit+0x30>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10f      	bne.n	8005da8 <snakeInit+0x2c>
        mainSnake = createSnakeNode(startPos, RIGHT); // 仅在第一次调用时创建
 8005d88:	4b09      	ldr	r3, [pc, #36]	@ (8005db0 <snakeInit+0x34>)
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	f7ff ffa0 	bl	8005cd2 <createSnakeNode>
 8005d92:	4603      	mov	r3, r0
 8005d94:	4a05      	ldr	r2, [pc, #20]	@ (8005dac <snakeInit+0x30>)
 8005d96:	6013      	str	r3, [r2, #0]
        copySnake = createSnakeNode(startPos, RIGHT);
 8005d98:	4b05      	ldr	r3, [pc, #20]	@ (8005db0 <snakeInit+0x34>)
 8005d9a:	2103      	movs	r1, #3
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f7ff ff98 	bl	8005cd2 <createSnakeNode>
 8005da2:	4603      	mov	r3, r0
 8005da4:	4a03      	ldr	r2, [pc, #12]	@ (8005db4 <snakeInit+0x38>)
 8005da6:	6013      	str	r3, [r2, #0]

    }
}
 8005da8:	bf00      	nop
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200002b0 	.word	0x200002b0
 8005db0:	08007180 	.word	0x08007180
 8005db4:	200002b4 	.word	0x200002b4

08005db8 <snakeBlockUpdate>:


/*-------------------更新每个块的移动-----------------------------*/
void snakeBlockUpdate(struct SNAKE_STATUS* snake){
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake;  // 使用一个临时指针遍历
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]
	do{
		displayToken(currentBlock->position.n, currentBlock->position.section);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	785b      	ldrb	r3, [r3, #1]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f7ff fdcc 	bl	800596c <displayToken>
		currentBlock = currentBlock->next;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	60fb      	str	r3, [r7, #12]
		//HAL_Delay(0.1);
	} while (currentBlock != NULL);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f1      	bne.n	8005dc4 <snakeBlockUpdate+0xc>

}
 8005de0:	bf00      	nop
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <snakeDirectionUpdated>:


/*------------更改按下按键后蛇头的朝向--------------------*/
void snakeDirectionUpdated(struct SNAKE_STATUS* snake) {
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake;  // 使用一个临时指针遍历
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60fb      	str	r3, [r7, #12]
	enum KEY status = keyRead();
 8005df8:	f7ff fe2c 	bl	8005a54 <keyRead>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	72fb      	strb	r3, [r7, #11]
	switch(status){
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	3b03      	subs	r3, #3
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d863      	bhi.n	8005ed0 <snakeDirectionUpdated+0xe4>
 8005e08:	a201      	add	r2, pc, #4	@ (adr r2, 8005e10 <snakeDirectionUpdated+0x24>)
 8005e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0e:	bf00      	nop
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e4f 	.word	0x08005e4f
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005ea7 	.word	0x08005ea7
	case KEY_UP_SHORT:
		if(currentBlock->position.section == 0x40 || currentBlock->position.section == 0x08){
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b40      	cmp	r3, #64	@ 0x40
 8005e26:	d003      	beq.n	8005e30 <snakeDirectionUpdated+0x44>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d151      	bne.n	8005ed4 <snakeDirectionUpdated+0xe8>
		currentBlock->towards = (currentBlock->towards==LEFT || currentBlock->towards == RIGHT) ? UP : currentBlock->towards;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	789b      	ldrb	r3, [r3, #2]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d006      	beq.n	8005e46 <snakeDirectionUpdated+0x5a>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	789b      	ldrb	r3, [r3, #2]
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d002      	beq.n	8005e46 <snakeDirectionUpdated+0x5a>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	789a      	ldrb	r2, [r3, #2]
 8005e44:	e000      	b.n	8005e48 <snakeDirectionUpdated+0x5c>
 8005e46:	2200      	movs	r2, #0
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005e4c:	e042      	b.n	8005ed4 <snakeDirectionUpdated+0xe8>
	case KEY_DOWN_SHORT:
		if(currentBlock->position.section == 0x40 || currentBlock->position.section == 0x01){
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	785b      	ldrb	r3, [r3, #1]
 8005e52:	2b40      	cmp	r3, #64	@ 0x40
 8005e54:	d003      	beq.n	8005e5e <snakeDirectionUpdated+0x72>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d13c      	bne.n	8005ed8 <snakeDirectionUpdated+0xec>
		currentBlock->towards = (currentBlock->towards==LEFT || currentBlock->towards == RIGHT) ? DOWN : currentBlock->towards;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	789b      	ldrb	r3, [r3, #2]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d006      	beq.n	8005e74 <snakeDirectionUpdated+0x88>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	789b      	ldrb	r3, [r3, #2]
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d002      	beq.n	8005e74 <snakeDirectionUpdated+0x88>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	789a      	ldrb	r2, [r3, #2]
 8005e72:	e000      	b.n	8005e76 <snakeDirectionUpdated+0x8a>
 8005e74:	2201      	movs	r2, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005e7a:	e02d      	b.n	8005ed8 <snakeDirectionUpdated+0xec>
	case KEY_LEFT_SHORT:
		if((currentBlock->position.section & 0x36) != 0){
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	f003 0336 	and.w	r3, r3, #54	@ 0x36
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d029      	beq.n	8005edc <snakeDirectionUpdated+0xf0>
		currentBlock->towards = (currentBlock->towards==UP || currentBlock->towards == DOWN) ? LEFT : currentBlock->towards;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <snakeDirectionUpdated+0xb2>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d002      	beq.n	8005e9e <snakeDirectionUpdated+0xb2>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	789a      	ldrb	r2, [r3, #2]
 8005e9c:	e000      	b.n	8005ea0 <snakeDirectionUpdated+0xb4>
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005ea4:	e01a      	b.n	8005edc <snakeDirectionUpdated+0xf0>
	case KEY_RIGHT_SHORT:
		if((currentBlock->position.section & 0x36) != 0){
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	f003 0336 	and.w	r3, r3, #54	@ 0x36
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <snakeDirectionUpdated+0xf4>
		currentBlock->towards = (currentBlock->towards==UP || currentBlock->towards == DOWN) ? RIGHT : currentBlock->towards;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	789b      	ldrb	r3, [r3, #2]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <snakeDirectionUpdated+0xdc>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	789b      	ldrb	r3, [r3, #2]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d002      	beq.n	8005ec8 <snakeDirectionUpdated+0xdc>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	789a      	ldrb	r2, [r3, #2]
 8005ec6:	e000      	b.n	8005eca <snakeDirectionUpdated+0xde>
 8005ec8:	2203      	movs	r2, #3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	709a      	strb	r2, [r3, #2]
		}
		break;
 8005ece:	e007      	b.n	8005ee0 <snakeDirectionUpdated+0xf4>
	default:

		break;
 8005ed0:	bf00      	nop
 8005ed2:	e006      	b.n	8005ee2 <snakeDirectionUpdated+0xf6>
		break;
 8005ed4:	bf00      	nop
 8005ed6:	e004      	b.n	8005ee2 <snakeDirectionUpdated+0xf6>
		break;
 8005ed8:	bf00      	nop
 8005eda:	e002      	b.n	8005ee2 <snakeDirectionUpdated+0xf6>
		break;
 8005edc:	bf00      	nop
 8005ede:	e000      	b.n	8005ee2 <snakeDirectionUpdated+0xf6>
		break;
 8005ee0:	bf00      	nop
	};

}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	0000      	movs	r0, r0
	...

08005ef0 <snakePositionUpdated>:



/*------------更改按下按键后蛇头和所有段的位置--------------------*/
void snakePositionUpdated(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy) {
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	617b      	str	r3, [r7, #20]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	613b      	str	r3, [r7, #16]
	Direction lastDic = lastBlock->towards;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	789b      	ldrb	r3, [r3, #2]
 8005f06:	73fb      	strb	r3, [r7, #15]
	updatedDir = currentBlock->towards;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	789a      	ldrb	r2, [r3, #2]
 8005f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8005ff8 <snakePositionUpdated+0x108>)
 8005f0e:	701a      	strb	r2, [r3, #0]
	currentBlock->position.n = (TRANSITION_MAP[(uint8_t)log2(currentBlock->position.section)][lastDic][updatedDir].newIndex+currentBlock->position.n)%8;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fa faa1 	bl	800045c <__aeabi_ui2d>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	ec43 2b10 	vmov	d0, r2, r3
 8005f22:	f000 fecd 	bl	8006cc0 <log>
 8005f26:	ec51 0b10 	vmov	r0, r1, d0
 8005f2a:	a331      	add	r3, pc, #196	@ (adr r3, 8005ff0 <snakePositionUpdated+0x100>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fc38 	bl	80007a4 <__aeabi_ddiv>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f7fa fdb8 	bl	8000ab0 <__aeabi_d2uiz>
 8005f40:	4603      	mov	r3, r0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461c      	mov	r4, r3
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff8 <snakePositionUpdated+0x108>)
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	492b      	ldr	r1, [pc, #172]	@ (8005ffc <snakePositionUpdated+0x10c>)
 8005f50:	00a2      	lsls	r2, r4, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4403      	add	r3, r0
 8005f58:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	701a      	strb	r2, [r3, #0]
	currentBlock->position.section = TRANSITION_MAP[(uint8_t)log2(currentBlock->position.section)][lastDic][updatedDir].nextSegment;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa fa72 	bl	800045c <__aeabi_ui2d>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	ec43 2b10 	vmov	d0, r2, r3
 8005f80:	f000 fe9e 	bl	8006cc0 <log>
 8005f84:	ec51 0b10 	vmov	r0, r1, d0
 8005f88:	a319      	add	r3, pc, #100	@ (adr r3, 8005ff0 <snakePositionUpdated+0x100>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa fc09 	bl	80007a4 <__aeabi_ddiv>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	4610      	mov	r0, r2
 8005f98:	4619      	mov	r1, r3
 8005f9a:	f7fa fd89 	bl	8000ab0 <__aeabi_d2uiz>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	4a14      	ldr	r2, [pc, #80]	@ (8005ff8 <snakePositionUpdated+0x108>)
 8005fa8:	7812      	ldrb	r2, [r2, #0]
 8005faa:	4610      	mov	r0, r2
 8005fac:	4913      	ldr	r1, [pc, #76]	@ (8005ffc <snakePositionUpdated+0x10c>)
 8005fae:	00a2      	lsls	r2, r4, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4403      	add	r3, r0
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	440b      	add	r3, r1
 8005fba:	785a      	ldrb	r2, [r3, #1]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	705a      	strb	r2, [r3, #1]
    while(currentBlock->next != NULL){
 8005fc0:	e00d      	b.n	8005fde <snakePositionUpdated+0xee>
    	currentBlock = currentBlock->next;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
    	currentBlock->position = lastBlock->position;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	801a      	strh	r2, [r3, #0]
    	currentBlock->towards = lastBlock->towards;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	789a      	ldrb	r2, [r3, #2]
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	709a      	strb	r2, [r3, #2]
    	lastBlock =  lastBlock->next;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]
    while(currentBlock->next != NULL){
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1ed      	bne.n	8005fc2 <snakePositionUpdated+0xd2>
    }
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	fefa39ef 	.word	0xfefa39ef
 8005ff4:	3fe62e42 	.word	0x3fe62e42
 8005ff8:	2000000a 	.word	0x2000000a
 8005ffc:	08007184 	.word	0x08007184

08006000 <copySnakeReset>:



/*------------重置copySnake为mainSnake-------------*/
void copySnakeReset(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy){
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60fb      	str	r3, [r7, #12]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	60bb      	str	r3, [r7, #8]
	while (currentBlock != NULL) {
 8006012:	e02b      	b.n	800606c <copySnakeReset+0x6c>
		lastBlock->towards = currentBlock->towards;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	789a      	ldrb	r2, [r3, #2]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	709a      	strb	r2, [r3, #2]
		lastBlock->position = currentBlock->position;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	8812      	ldrh	r2, [r2, #0]
 8006022:	801a      	strh	r2, [r3, #0]
		if (currentBlock->next != NULL && lastBlock->next != NULL) {
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <copySnakeReset+0x3c>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <copySnakeReset+0x3c>
			lastBlock = lastBlock->next;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	e014      	b.n	8006066 <copySnakeReset+0x66>
		}
		else if(currentBlock->next != NULL && lastBlock->next == NULL)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d010      	beq.n	8006066 <copySnakeReset+0x66>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10c      	bne.n	8006066 <copySnakeReset+0x66>
		{
			lastBlock->next = createSnakeNode(currentBlock->next->position, currentBlock->next->towards);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	6852      	ldr	r2, [r2, #4]
 8006054:	7892      	ldrb	r2, [r2, #2]
 8006056:	4611      	mov	r1, r2
 8006058:	6818      	ldr	r0, [r3, #0]
 800605a:	f7ff fe3a 	bl	8005cd2 <createSnakeNode>
 800605e:	4602      	mov	r2, r0
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	605a      	str	r2, [r3, #4]
			break;
 8006064:	e006      	b.n	8006074 <copySnakeReset+0x74>
		}
		currentBlock = currentBlock->next;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	60fb      	str	r3, [r7, #12]
	while (currentBlock != NULL) {
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1d0      	bne.n	8006014 <copySnakeReset+0x14>

	}
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <foodGen>:

/*----------随机生成食物的位置----------------------*/
void foodGen(struct SNAKE_STATUS* snake_main){
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake_main;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60fb      	str	r3, [r7, #12]
	do{
	repeatFlag = 0;
 8006088:	4b22      	ldr	r3, [pc, #136]	@ (8006114 <foodGen+0x98>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
	randNum = HAL_GetTick() % 8;
 800608e:	f7fb fdd1 	bl	8001c34 <HAL_GetTick>
 8006092:	4603      	mov	r3, r0
 8006094:	b2db      	uxtb	r3, r3
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	b2da      	uxtb	r2, r3
 800609c:	4b1e      	ldr	r3, [pc, #120]	@ (8006118 <foodGen+0x9c>)
 800609e:	701a      	strb	r2, [r3, #0]
	randNumSec =  HAL_GetTick() % 7;
 80060a0:	f7fb fdc8 	bl	8001c34 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b1d      	ldr	r3, [pc, #116]	@ (800611c <foodGen+0xa0>)
 80060a8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ac:	1ad1      	subs	r1, r2, r3
 80060ae:	0849      	lsrs	r1, r1, #1
 80060b0:	440b      	add	r3, r1
 80060b2:	0899      	lsrs	r1, r3, #2
 80060b4:	460b      	mov	r3, r1
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	1a5b      	subs	r3, r3, r1
 80060ba:	1ad1      	subs	r1, r2, r3
 80060bc:	b2ca      	uxtb	r2, r1
 80060be:	4b18      	ldr	r3, [pc, #96]	@ (8006120 <foodGen+0xa4>)
 80060c0:	701a      	strb	r2, [r3, #0]
	while(currentBlock != NULL){
 80060c2:	e015      	b.n	80060f0 <foodGen+0x74>
		if(currentBlock->position.n == randNum && (0x01 << randNumSec) == currentBlock->position.section ){
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	4b13      	ldr	r3, [pc, #76]	@ (8006118 <foodGen+0x9c>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d10c      	bne.n	80060ea <foodGen+0x6e>
 80060d0:	4b13      	ldr	r3, [pc, #76]	@ (8006120 <foodGen+0xa4>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	2301      	movs	r3, #1
 80060d8:	4093      	lsls	r3, r2
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	7852      	ldrb	r2, [r2, #1]
 80060de:	4293      	cmp	r3, r2
 80060e0:	d103      	bne.n	80060ea <foodGen+0x6e>
			repeatFlag = 1;
 80060e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006114 <foodGen+0x98>)
 80060e4:	2201      	movs	r2, #1
 80060e6:	701a      	strb	r2, [r3, #0]
			break;
 80060e8:	e005      	b.n	80060f6 <foodGen+0x7a>
		}
		currentBlock = currentBlock->next;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	60fb      	str	r3, [r7, #12]
	while(currentBlock != NULL){
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e6      	bne.n	80060c4 <foodGen+0x48>
	}

	}while(repeatFlag);
 80060f6:	4b07      	ldr	r3, [pc, #28]	@ (8006114 <foodGen+0x98>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1c4      	bne.n	8006088 <foodGen+0xc>
	foodGenFlag = 1;
 80060fe:	4b09      	ldr	r3, [pc, #36]	@ (8006124 <foodGen+0xa8>)
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]
	foodDispFlag = 0;
 8006104:	4b08      	ldr	r3, [pc, #32]	@ (8006128 <foodGen+0xac>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]

};
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	200002bc 	.word	0x200002bc
 8006118:	200002bd 	.word	0x200002bd
 800611c:	24924925 	.word	0x24924925
 8006120:	200002be 	.word	0x200002be
 8006124:	200002ba 	.word	0x200002ba
 8006128:	200002bb 	.word	0x200002bb

0800612c <foodDisplay>:

/*--------------显示食物的位置--------------------*/
void foodDisplay(void){
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
	if(!foodDispFlag){
 8006130:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <foodDisplay+0x28>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <foodDisplay+0x24>
	displayToken(randNum, 0x01<<randNumSec);
 8006138:	4b07      	ldr	r3, [pc, #28]	@ (8006158 <foodDisplay+0x2c>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	4a07      	ldr	r2, [pc, #28]	@ (800615c <foodDisplay+0x30>)
 800613e:	7812      	ldrb	r2, [r2, #0]
 8006140:	4611      	mov	r1, r2
 8006142:	2201      	movs	r2, #1
 8006144:	408a      	lsls	r2, r1
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	4611      	mov	r1, r2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fc0e 	bl	800596c <displayToken>
	}

}
 8006150:	bf00      	nop
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200002bb 	.word	0x200002bb
 8006158:	200002bd 	.word	0x200002bd
 800615c:	200002be 	.word	0x200002be

08006160 <ifAteFood>:

/*---------------判断食物是否被吃掉并长度加一-------------*/
void ifAteFood(struct SNAKE_STATUS* snake_main, struct SNAKE_STATUS* snake_copy){
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	struct SNAKE_STATUS* currentBlock = snake_main;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	60bb      	str	r3, [r7, #8]
	struct SNAKE_STATUS* lastBlock = snake_copy;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	60fb      	str	r3, [r7, #12]

	if(randNum==currentBlock->position.n && ((0x01 <<randNumSec) == currentBlock->position.section) ){
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781a      	ldrb	r2, [r3, #0]
 8006176:	4b14      	ldr	r3, [pc, #80]	@ (80061c8 <ifAteFood+0x68>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	429a      	cmp	r2, r3
 800617c:	d120      	bne.n	80061c0 <ifAteFood+0x60>
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <ifAteFood+0x6c>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	2301      	movs	r3, #1
 8006186:	4093      	lsls	r3, r2
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	7852      	ldrb	r2, [r2, #1]
 800618c:	4293      	cmp	r3, r2
 800618e:	d117      	bne.n	80061c0 <ifAteFood+0x60>

		foodGenFlag = 0;
 8006190:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <ifAteFood+0x70>)
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
		foodDispFlag = 1;
 8006196:	4b0f      	ldr	r3, [pc, #60]	@ (80061d4 <ifAteFood+0x74>)
 8006198:	2201      	movs	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
		score++;
 800619c:	4b0e      	ldr	r3, [pc, #56]	@ (80061d8 <ifAteFood+0x78>)
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	3301      	adds	r3, #1
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <ifAteFood+0x78>)
 80061a6:	701a      	strb	r2, [r3, #0]

		while(lastBlock->next!= NULL){
 80061a8:	e002      	b.n	80061b0 <ifAteFood+0x50>
			lastBlock = lastBlock->next;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	60fb      	str	r3, [r7, #12]
		while(lastBlock->next!= NULL){
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f8      	bne.n	80061aa <ifAteFood+0x4a>
		}
		addBlock(snake_main, lastBlock);
 80061b8:	68f9      	ldr	r1, [r7, #12]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fdaa 	bl	8005d14 <addBlock>

	}


}
 80061c0:	bf00      	nop
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	200002bd 	.word	0x200002bd
 80061cc:	200002be 	.word	0x200002be
 80061d0:	200002ba 	.word	0x200002ba
 80061d4:	200002bb 	.word	0x200002bb
 80061d8:	200002ad 	.word	0x200002ad

080061dc <ifHitWall>:
/**判断蛇头是否撞墙一段时间
 * 即第二段蛇身是否与蛇头重合
 */
void ifHitWall(struct SNAKE_STATUS* snake_main){
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake_main;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60fb      	str	r3, [r7, #12]
	struct SNAKE_STATUS* lastBlock = currentBlock->next;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	60bb      	str	r3, [r7, #8]
	if(lastBlock->position.n == currentBlock->position.n && lastBlock->position.section == currentBlock->position.section){
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d108      	bne.n	800620c <ifHitWall+0x30>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	785a      	ldrb	r2, [r3, #1]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	785b      	ldrb	r3, [r3, #1]
 8006202:	429a      	cmp	r2, r3
 8006204:	d102      	bne.n	800620c <ifHitWall+0x30>
		mode = END;
 8006206:	4b04      	ldr	r3, [pc, #16]	@ (8006218 <ifHitWall+0x3c>)
 8006208:	2203      	movs	r2, #3
 800620a:	701a      	strb	r2, [r3, #0]
	}
}
 800620c:	bf00      	nop
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	200002ae 	.word	0x200002ae

0800621c <ifHitSelf>:

void ifHitSelf(struct SNAKE_STATUS* snake_main){
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	struct SNAKE_STATUS* currentBlock = snake_main;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	617b      	str	r3, [r7, #20]
	Point2D head = get_segment_coordinates(currentBlock->position.n, currentBlock->position.section, currentBlock->towards);
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	7818      	ldrb	r0, [r3, #0]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	7859      	ldrb	r1, [r3, #1]
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	789b      	ldrb	r3, [r3, #2]
 8006234:	461a      	mov	r2, r3
 8006236:	f000 f827 	bl	8006288 <get_segment_coordinates>
 800623a:	4603      	mov	r3, r0
 800623c:	823b      	strh	r3, [r7, #16]
	while(currentBlock->next != NULL){
 800623e:	e019      	b.n	8006274 <ifHitSelf+0x58>
		currentBlock = currentBlock->next;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	617b      	str	r3, [r7, #20]
		Point2D body = get_segment_coordinates(currentBlock->position.n, currentBlock->position.section, currentBlock->towards);
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	7818      	ldrb	r0, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	7859      	ldrb	r1, [r3, #1]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	789b      	ldrb	r3, [r3, #2]
 8006252:	461a      	mov	r2, r3
 8006254:	f000 f818 	bl	8006288 <get_segment_coordinates>
 8006258:	4603      	mov	r3, r0
 800625a:	81bb      	strh	r3, [r7, #12]
		if((body.x == head.x) && (body.y == head.y)){
 800625c:	7b3a      	ldrb	r2, [r7, #12]
 800625e:	7c3b      	ldrb	r3, [r7, #16]
 8006260:	429a      	cmp	r2, r3
 8006262:	d107      	bne.n	8006274 <ifHitSelf+0x58>
 8006264:	7b7a      	ldrb	r2, [r7, #13]
 8006266:	7c7b      	ldrb	r3, [r7, #17]
 8006268:	429a      	cmp	r2, r3
 800626a:	d103      	bne.n	8006274 <ifHitSelf+0x58>
			mode = END;
 800626c:	4b05      	ldr	r3, [pc, #20]	@ (8006284 <ifHitSelf+0x68>)
 800626e:	2203      	movs	r2, #3
 8006270:	701a      	strb	r2, [r3, #0]
			break;
		}
	}

}
 8006272:	e003      	b.n	800627c <ifHitSelf+0x60>
	while(currentBlock->next != NULL){
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e1      	bne.n	8006240 <ifHitSelf+0x24>
}
 800627c:	bf00      	nop
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	200002ae 	.word	0x200002ae

08006288 <get_segment_coordinates>:
        .coords = {{0,1}, {1,1}}  // 左右方向的坐标
    }
};

// 获取段的坐标
Point2D get_segment_coordinates(uint8_t digit, uint8_t segment, Direction direction) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4603      	mov	r3, r0
 8006290:	71fb      	strb	r3, [r7, #7]
 8006292:	460b      	mov	r3, r1
 8006294:	71bb      	strb	r3, [r7, #6]
 8006296:	4613      	mov	r3, r2
 8006298:	717b      	strb	r3, [r7, #5]
    Point2D result = {0, 0};  // 默认无效坐标
 800629a:	2300      	movs	r3, #0
 800629c:	723b      	strb	r3, [r7, #8]
 800629e:	2300      	movs	r3, #0
 80062a0:	727b      	strb	r3, [r7, #9]
    segment = (uint8_t)log2(segment);
 80062a2:	79bb      	ldrb	r3, [r7, #6]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fa f8d9 	bl	800045c <__aeabi_ui2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	ec43 2b10 	vmov	d0, r2, r3
 80062b2:	f000 fd05 	bl	8006cc0 <log>
 80062b6:	ec51 0b10 	vmov	r0, r1, d0
 80062ba:	a324      	add	r3, pc, #144	@ (adr r3, 800634c <get_segment_coordinates+0xc4>)
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f7fa fa70 	bl	80007a4 <__aeabi_ddiv>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	f7fa fbf0 	bl	8000ab0 <__aeabi_d2uiz>
 80062d0:	4603      	mov	r3, r0
 80062d2:	71bb      	strb	r3, [r7, #6]


    // 查找方向对应的坐标索引
    uint8_t coord_index = -1;
 80062d4:	23ff      	movs	r3, #255	@ 0xff
 80062d6:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < 2; i++) {
 80062d8:	2300      	movs	r3, #0
 80062da:	73bb      	strb	r3, [r7, #14]
 80062dc:	e012      	b.n	8006304 <get_segment_coordinates+0x7c>
        if(segment_map[segment].valid_dirs[i] == direction) {
 80062de:	79ba      	ldrb	r2, [r7, #6]
 80062e0:	7bb9      	ldrb	r1, [r7, #14]
 80062e2:	4819      	ldr	r0, [pc, #100]	@ (8006348 <get_segment_coordinates+0xc0>)
 80062e4:	4613      	mov	r3, r2
 80062e6:	005b      	lsls	r3, r3, #1
 80062e8:	4413      	add	r3, r2
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4403      	add	r3, r0
 80062ee:	440b      	add	r3, r1
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	797a      	ldrb	r2, [r7, #5]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d102      	bne.n	80062fe <get_segment_coordinates+0x76>
            coord_index = i;
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	73fb      	strb	r3, [r7, #15]
            break;
 80062fc:	e005      	b.n	800630a <get_segment_coordinates+0x82>
    for(uint8_t i = 0; i < 2; i++) {
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	3301      	adds	r3, #1
 8006302:	73bb      	strb	r3, [r7, #14]
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d9e9      	bls.n	80062de <get_segment_coordinates+0x56>
        }
    }

    // 如果找到有效方向
    if(coord_index != -1) {
        result = segment_map[segment].coords[coord_index];
 800630a:	79ba      	ldrb	r2, [r7, #6]
 800630c:	7bf9      	ldrb	r1, [r7, #15]
 800630e:	480e      	ldr	r0, [pc, #56]	@ (8006348 <get_segment_coordinates+0xc0>)
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	440b      	add	r3, r1
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4403      	add	r3, r0
 800631c:	885b      	ldrh	r3, [r3, #2]
 800631e:	813b      	strh	r3, [r7, #8]
        // 根据数码管序号偏移坐标
        result.x += 2*digit;  // 假设数码管间距为3个单位
 8006320:	7a3a      	ldrb	r2, [r7, #8]
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	4413      	add	r3, r2
 800632a:	b2db      	uxtb	r3, r3
 800632c:	723b      	strb	r3, [r7, #8]





    return result;
 800632e:	893b      	ldrh	r3, [r7, #8]
 8006330:	81bb      	strh	r3, [r7, #12]
 8006332:	2300      	movs	r3, #0
 8006334:	7b3a      	ldrb	r2, [r7, #12]
 8006336:	f362 0307 	bfi	r3, r2, #0, #8
 800633a:	7b7a      	ldrb	r2, [r7, #13]
 800633c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	08007264 	.word	0x08007264
 800634c:	fefa39ef 	.word	0xfefa39ef
 8006350:	3fe62e42 	.word	0x3fe62e42

08006354 <malloc>:
 8006354:	4b02      	ldr	r3, [pc, #8]	@ (8006360 <malloc+0xc>)
 8006356:	4601      	mov	r1, r0
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f000 b825 	b.w	80063a8 <_malloc_r>
 800635e:	bf00      	nop
 8006360:	20000018 	.word	0x20000018

08006364 <sbrk_aligned>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4e0f      	ldr	r6, [pc, #60]	@ (80063a4 <sbrk_aligned+0x40>)
 8006368:	460c      	mov	r4, r1
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	4605      	mov	r5, r0
 800636e:	b911      	cbnz	r1, 8006376 <sbrk_aligned+0x12>
 8006370:	f000 fada 	bl	8006928 <_sbrk_r>
 8006374:	6030      	str	r0, [r6, #0]
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f000 fad5 	bl	8006928 <_sbrk_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d103      	bne.n	800638a <sbrk_aligned+0x26>
 8006382:	f04f 34ff 	mov.w	r4, #4294967295
 8006386:	4620      	mov	r0, r4
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	1cc4      	adds	r4, r0, #3
 800638c:	f024 0403 	bic.w	r4, r4, #3
 8006390:	42a0      	cmp	r0, r4
 8006392:	d0f8      	beq.n	8006386 <sbrk_aligned+0x22>
 8006394:	1a21      	subs	r1, r4, r0
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fac6 	bl	8006928 <_sbrk_r>
 800639c:	3001      	adds	r0, #1
 800639e:	d1f2      	bne.n	8006386 <sbrk_aligned+0x22>
 80063a0:	e7ef      	b.n	8006382 <sbrk_aligned+0x1e>
 80063a2:	bf00      	nop
 80063a4:	200002c0 	.word	0x200002c0

080063a8 <_malloc_r>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4606      	mov	r6, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d904      	bls.n	80063ce <_malloc_r+0x26>
 80063c4:	230c      	movs	r3, #12
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	2000      	movs	r0, #0
 80063ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064a4 <_malloc_r+0xfc>
 80063d2:	f000 f869 	bl	80064a8 <__malloc_lock>
 80063d6:	f8d8 3000 	ldr.w	r3, [r8]
 80063da:	461c      	mov	r4, r3
 80063dc:	bb44      	cbnz	r4, 8006430 <_malloc_r+0x88>
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff ffbf 	bl	8006364 <sbrk_aligned>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	4604      	mov	r4, r0
 80063ea:	d158      	bne.n	800649e <_malloc_r+0xf6>
 80063ec:	f8d8 4000 	ldr.w	r4, [r8]
 80063f0:	4627      	mov	r7, r4
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	d143      	bne.n	800647e <_malloc_r+0xd6>
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d04b      	beq.n	8006492 <_malloc_r+0xea>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4639      	mov	r1, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	eb04 0903 	add.w	r9, r4, r3
 8006404:	f000 fa90 	bl	8006928 <_sbrk_r>
 8006408:	4581      	cmp	r9, r0
 800640a:	d142      	bne.n	8006492 <_malloc_r+0xea>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	1a6d      	subs	r5, r5, r1
 8006410:	4629      	mov	r1, r5
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffa6 	bl	8006364 <sbrk_aligned>
 8006418:	3001      	adds	r0, #1
 800641a:	d03a      	beq.n	8006492 <_malloc_r+0xea>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	442b      	add	r3, r5
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f8d8 3000 	ldr.w	r3, [r8]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	bb62      	cbnz	r2, 8006484 <_malloc_r+0xdc>
 800642a:	f8c8 7000 	str.w	r7, [r8]
 800642e:	e00f      	b.n	8006450 <_malloc_r+0xa8>
 8006430:	6822      	ldr	r2, [r4, #0]
 8006432:	1b52      	subs	r2, r2, r5
 8006434:	d420      	bmi.n	8006478 <_malloc_r+0xd0>
 8006436:	2a0b      	cmp	r2, #11
 8006438:	d917      	bls.n	800646a <_malloc_r+0xc2>
 800643a:	1961      	adds	r1, r4, r5
 800643c:	42a3      	cmp	r3, r4
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	6059      	strne	r1, [r3, #4]
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	bf08      	it	eq
 8006448:	f8c8 1000 	streq.w	r1, [r8]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 f82f 	bl	80064b4 <__malloc_unlock>
 8006456:	f104 000b 	add.w	r0, r4, #11
 800645a:	1d23      	adds	r3, r4, #4
 800645c:	f020 0007 	bic.w	r0, r0, #7
 8006460:	1ac2      	subs	r2, r0, r3
 8006462:	bf1c      	itt	ne
 8006464:	1a1b      	subne	r3, r3, r0
 8006466:	50a3      	strne	r3, [r4, r2]
 8006468:	e7af      	b.n	80063ca <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	f8c8 2000 	streq.w	r2, [r8]
 8006474:	605a      	strne	r2, [r3, #4]
 8006476:	e7eb      	b.n	8006450 <_malloc_r+0xa8>
 8006478:	4623      	mov	r3, r4
 800647a:	6864      	ldr	r4, [r4, #4]
 800647c:	e7ae      	b.n	80063dc <_malloc_r+0x34>
 800647e:	463c      	mov	r4, r7
 8006480:	687f      	ldr	r7, [r7, #4]
 8006482:	e7b6      	b.n	80063f2 <_malloc_r+0x4a>
 8006484:	461a      	mov	r2, r3
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	42a3      	cmp	r3, r4
 800648a:	d1fb      	bne.n	8006484 <_malloc_r+0xdc>
 800648c:	2300      	movs	r3, #0
 800648e:	6053      	str	r3, [r2, #4]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa8>
 8006492:	230c      	movs	r3, #12
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f80c 	bl	80064b4 <__malloc_unlock>
 800649c:	e794      	b.n	80063c8 <_malloc_r+0x20>
 800649e:	6005      	str	r5, [r0, #0]
 80064a0:	e7d6      	b.n	8006450 <_malloc_r+0xa8>
 80064a2:	bf00      	nop
 80064a4:	200002c4 	.word	0x200002c4

080064a8 <__malloc_lock>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__malloc_lock+0x8>)
 80064aa:	f000 ba8a 	b.w	80069c2 <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	20000408 	.word	0x20000408

080064b4 <__malloc_unlock>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__malloc_unlock+0x8>)
 80064b6:	f000 ba85 	b.w	80069c4 <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	20000408 	.word	0x20000408

080064c0 <std>:
 80064c0:	2300      	movs	r3, #0
 80064c2:	b510      	push	{r4, lr}
 80064c4:	4604      	mov	r4, r0
 80064c6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ce:	6083      	str	r3, [r0, #8]
 80064d0:	8181      	strh	r1, [r0, #12]
 80064d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80064d4:	81c2      	strh	r2, [r0, #14]
 80064d6:	6183      	str	r3, [r0, #24]
 80064d8:	4619      	mov	r1, r3
 80064da:	2208      	movs	r2, #8
 80064dc:	305c      	adds	r0, #92	@ 0x5c
 80064de:	f000 f9e7 	bl	80068b0 <memset>
 80064e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006518 <std+0x58>)
 80064e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80064e6:	4b0d      	ldr	r3, [pc, #52]	@ (800651c <std+0x5c>)
 80064e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <std+0x60>)
 80064ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006524 <std+0x64>)
 80064f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <std+0x68>)
 80064f4:	6224      	str	r4, [r4, #32]
 80064f6:	429c      	cmp	r4, r3
 80064f8:	d006      	beq.n	8006508 <std+0x48>
 80064fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064fe:	4294      	cmp	r4, r2
 8006500:	d002      	beq.n	8006508 <std+0x48>
 8006502:	33d0      	adds	r3, #208	@ 0xd0
 8006504:	429c      	cmp	r4, r3
 8006506:	d105      	bne.n	8006514 <std+0x54>
 8006508:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006510:	f000 ba56 	b.w	80069c0 <__retarget_lock_init_recursive>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	bf00      	nop
 8006518:	08006701 	.word	0x08006701
 800651c:	08006723 	.word	0x08006723
 8006520:	0800675b 	.word	0x0800675b
 8006524:	0800677f 	.word	0x0800677f
 8006528:	200002c8 	.word	0x200002c8

0800652c <stdio_exit_handler>:
 800652c:	4a02      	ldr	r2, [pc, #8]	@ (8006538 <stdio_exit_handler+0xc>)
 800652e:	4903      	ldr	r1, [pc, #12]	@ (800653c <stdio_exit_handler+0x10>)
 8006530:	4803      	ldr	r0, [pc, #12]	@ (8006540 <stdio_exit_handler+0x14>)
 8006532:	f000 b869 	b.w	8006608 <_fwalk_sglue>
 8006536:	bf00      	nop
 8006538:	2000000c 	.word	0x2000000c
 800653c:	08006b65 	.word	0x08006b65
 8006540:	2000001c 	.word	0x2000001c

08006544 <cleanup_stdio>:
 8006544:	6841      	ldr	r1, [r0, #4]
 8006546:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <cleanup_stdio+0x34>)
 8006548:	4299      	cmp	r1, r3
 800654a:	b510      	push	{r4, lr}
 800654c:	4604      	mov	r4, r0
 800654e:	d001      	beq.n	8006554 <cleanup_stdio+0x10>
 8006550:	f000 fb08 	bl	8006b64 <_fflush_r>
 8006554:	68a1      	ldr	r1, [r4, #8]
 8006556:	4b09      	ldr	r3, [pc, #36]	@ (800657c <cleanup_stdio+0x38>)
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <cleanup_stdio+0x1e>
 800655c:	4620      	mov	r0, r4
 800655e:	f000 fb01 	bl	8006b64 <_fflush_r>
 8006562:	68e1      	ldr	r1, [r4, #12]
 8006564:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <cleanup_stdio+0x3c>)
 8006566:	4299      	cmp	r1, r3
 8006568:	d004      	beq.n	8006574 <cleanup_stdio+0x30>
 800656a:	4620      	mov	r0, r4
 800656c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006570:	f000 baf8 	b.w	8006b64 <_fflush_r>
 8006574:	bd10      	pop	{r4, pc}
 8006576:	bf00      	nop
 8006578:	200002c8 	.word	0x200002c8
 800657c:	20000330 	.word	0x20000330
 8006580:	20000398 	.word	0x20000398

08006584 <global_stdio_init.part.0>:
 8006584:	b510      	push	{r4, lr}
 8006586:	4b0b      	ldr	r3, [pc, #44]	@ (80065b4 <global_stdio_init.part.0+0x30>)
 8006588:	4c0b      	ldr	r4, [pc, #44]	@ (80065b8 <global_stdio_init.part.0+0x34>)
 800658a:	4a0c      	ldr	r2, [pc, #48]	@ (80065bc <global_stdio_init.part.0+0x38>)
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	4620      	mov	r0, r4
 8006590:	2200      	movs	r2, #0
 8006592:	2104      	movs	r1, #4
 8006594:	f7ff ff94 	bl	80064c0 <std>
 8006598:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800659c:	2201      	movs	r2, #1
 800659e:	2109      	movs	r1, #9
 80065a0:	f7ff ff8e 	bl	80064c0 <std>
 80065a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065a8:	2202      	movs	r2, #2
 80065aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ae:	2112      	movs	r1, #18
 80065b0:	f7ff bf86 	b.w	80064c0 <std>
 80065b4:	20000400 	.word	0x20000400
 80065b8:	200002c8 	.word	0x200002c8
 80065bc:	0800652d 	.word	0x0800652d

080065c0 <__sfp_lock_acquire>:
 80065c0:	4801      	ldr	r0, [pc, #4]	@ (80065c8 <__sfp_lock_acquire+0x8>)
 80065c2:	f000 b9fe 	b.w	80069c2 <__retarget_lock_acquire_recursive>
 80065c6:	bf00      	nop
 80065c8:	20000409 	.word	0x20000409

080065cc <__sfp_lock_release>:
 80065cc:	4801      	ldr	r0, [pc, #4]	@ (80065d4 <__sfp_lock_release+0x8>)
 80065ce:	f000 b9f9 	b.w	80069c4 <__retarget_lock_release_recursive>
 80065d2:	bf00      	nop
 80065d4:	20000409 	.word	0x20000409

080065d8 <__sinit>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	4604      	mov	r4, r0
 80065dc:	f7ff fff0 	bl	80065c0 <__sfp_lock_acquire>
 80065e0:	6a23      	ldr	r3, [r4, #32]
 80065e2:	b11b      	cbz	r3, 80065ec <__sinit+0x14>
 80065e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e8:	f7ff bff0 	b.w	80065cc <__sfp_lock_release>
 80065ec:	4b04      	ldr	r3, [pc, #16]	@ (8006600 <__sinit+0x28>)
 80065ee:	6223      	str	r3, [r4, #32]
 80065f0:	4b04      	ldr	r3, [pc, #16]	@ (8006604 <__sinit+0x2c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1f5      	bne.n	80065e4 <__sinit+0xc>
 80065f8:	f7ff ffc4 	bl	8006584 <global_stdio_init.part.0>
 80065fc:	e7f2      	b.n	80065e4 <__sinit+0xc>
 80065fe:	bf00      	nop
 8006600:	08006545 	.word	0x08006545
 8006604:	20000400 	.word	0x20000400

08006608 <_fwalk_sglue>:
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	4607      	mov	r7, r0
 800660e:	4688      	mov	r8, r1
 8006610:	4614      	mov	r4, r2
 8006612:	2600      	movs	r6, #0
 8006614:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006618:	f1b9 0901 	subs.w	r9, r9, #1
 800661c:	d505      	bpl.n	800662a <_fwalk_sglue+0x22>
 800661e:	6824      	ldr	r4, [r4, #0]
 8006620:	2c00      	cmp	r4, #0
 8006622:	d1f7      	bne.n	8006614 <_fwalk_sglue+0xc>
 8006624:	4630      	mov	r0, r6
 8006626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662a:	89ab      	ldrh	r3, [r5, #12]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d907      	bls.n	8006640 <_fwalk_sglue+0x38>
 8006630:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006634:	3301      	adds	r3, #1
 8006636:	d003      	beq.n	8006640 <_fwalk_sglue+0x38>
 8006638:	4629      	mov	r1, r5
 800663a:	4638      	mov	r0, r7
 800663c:	47c0      	blx	r8
 800663e:	4306      	orrs	r6, r0
 8006640:	3568      	adds	r5, #104	@ 0x68
 8006642:	e7e9      	b.n	8006618 <_fwalk_sglue+0x10>

08006644 <_puts_r>:
 8006644:	6a03      	ldr	r3, [r0, #32]
 8006646:	b570      	push	{r4, r5, r6, lr}
 8006648:	6884      	ldr	r4, [r0, #8]
 800664a:	4605      	mov	r5, r0
 800664c:	460e      	mov	r6, r1
 800664e:	b90b      	cbnz	r3, 8006654 <_puts_r+0x10>
 8006650:	f7ff ffc2 	bl	80065d8 <__sinit>
 8006654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006656:	07db      	lsls	r3, r3, #31
 8006658:	d405      	bmi.n	8006666 <_puts_r+0x22>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	0598      	lsls	r0, r3, #22
 800665e:	d402      	bmi.n	8006666 <_puts_r+0x22>
 8006660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006662:	f000 f9ae 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8006666:	89a3      	ldrh	r3, [r4, #12]
 8006668:	0719      	lsls	r1, r3, #28
 800666a:	d502      	bpl.n	8006672 <_puts_r+0x2e>
 800666c:	6923      	ldr	r3, [r4, #16]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d135      	bne.n	80066de <_puts_r+0x9a>
 8006672:	4621      	mov	r1, r4
 8006674:	4628      	mov	r0, r5
 8006676:	f000 f8c5 	bl	8006804 <__swsetup_r>
 800667a:	b380      	cbz	r0, 80066de <_puts_r+0x9a>
 800667c:	f04f 35ff 	mov.w	r5, #4294967295
 8006680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d405      	bmi.n	8006692 <_puts_r+0x4e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d402      	bmi.n	8006692 <_puts_r+0x4e>
 800668c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800668e:	f000 f999 	bl	80069c4 <__retarget_lock_release_recursive>
 8006692:	4628      	mov	r0, r5
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	2b00      	cmp	r3, #0
 8006698:	da04      	bge.n	80066a4 <_puts_r+0x60>
 800669a:	69a2      	ldr	r2, [r4, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	dc17      	bgt.n	80066d0 <_puts_r+0x8c>
 80066a0:	290a      	cmp	r1, #10
 80066a2:	d015      	beq.n	80066d0 <_puts_r+0x8c>
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	1c5a      	adds	r2, r3, #1
 80066a8:	6022      	str	r2, [r4, #0]
 80066aa:	7019      	strb	r1, [r3, #0]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066b2:	3b01      	subs	r3, #1
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	2900      	cmp	r1, #0
 80066b8:	d1ed      	bne.n	8006696 <_puts_r+0x52>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	da11      	bge.n	80066e2 <_puts_r+0x9e>
 80066be:	4622      	mov	r2, r4
 80066c0:	210a      	movs	r1, #10
 80066c2:	4628      	mov	r0, r5
 80066c4:	f000 f85f 	bl	8006786 <__swbuf_r>
 80066c8:	3001      	adds	r0, #1
 80066ca:	d0d7      	beq.n	800667c <_puts_r+0x38>
 80066cc:	250a      	movs	r5, #10
 80066ce:	e7d7      	b.n	8006680 <_puts_r+0x3c>
 80066d0:	4622      	mov	r2, r4
 80066d2:	4628      	mov	r0, r5
 80066d4:	f000 f857 	bl	8006786 <__swbuf_r>
 80066d8:	3001      	adds	r0, #1
 80066da:	d1e7      	bne.n	80066ac <_puts_r+0x68>
 80066dc:	e7ce      	b.n	800667c <_puts_r+0x38>
 80066de:	3e01      	subs	r6, #1
 80066e0:	e7e4      	b.n	80066ac <_puts_r+0x68>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	1c5a      	adds	r2, r3, #1
 80066e6:	6022      	str	r2, [r4, #0]
 80066e8:	220a      	movs	r2, #10
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e7ee      	b.n	80066cc <_puts_r+0x88>
	...

080066f0 <puts>:
 80066f0:	4b02      	ldr	r3, [pc, #8]	@ (80066fc <puts+0xc>)
 80066f2:	4601      	mov	r1, r0
 80066f4:	6818      	ldr	r0, [r3, #0]
 80066f6:	f7ff bfa5 	b.w	8006644 <_puts_r>
 80066fa:	bf00      	nop
 80066fc:	20000018 	.word	0x20000018

08006700 <__sread>:
 8006700:	b510      	push	{r4, lr}
 8006702:	460c      	mov	r4, r1
 8006704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006708:	f000 f8fc 	bl	8006904 <_read_r>
 800670c:	2800      	cmp	r0, #0
 800670e:	bfab      	itete	ge
 8006710:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006712:	89a3      	ldrhlt	r3, [r4, #12]
 8006714:	181b      	addge	r3, r3, r0
 8006716:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800671a:	bfac      	ite	ge
 800671c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800671e:	81a3      	strhlt	r3, [r4, #12]
 8006720:	bd10      	pop	{r4, pc}

08006722 <__swrite>:
 8006722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006726:	461f      	mov	r7, r3
 8006728:	898b      	ldrh	r3, [r1, #12]
 800672a:	05db      	lsls	r3, r3, #23
 800672c:	4605      	mov	r5, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4616      	mov	r6, r2
 8006732:	d505      	bpl.n	8006740 <__swrite+0x1e>
 8006734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006738:	2302      	movs	r3, #2
 800673a:	2200      	movs	r2, #0
 800673c:	f000 f8d0 	bl	80068e0 <_lseek_r>
 8006740:	89a3      	ldrh	r3, [r4, #12]
 8006742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006746:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	4632      	mov	r2, r6
 800674e:	463b      	mov	r3, r7
 8006750:	4628      	mov	r0, r5
 8006752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006756:	f000 b8f7 	b.w	8006948 <_write_r>

0800675a <__sseek>:
 800675a:	b510      	push	{r4, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006762:	f000 f8bd 	bl	80068e0 <_lseek_r>
 8006766:	1c43      	adds	r3, r0, #1
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	bf15      	itete	ne
 800676c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800676e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006772:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006776:	81a3      	strheq	r3, [r4, #12]
 8006778:	bf18      	it	ne
 800677a:	81a3      	strhne	r3, [r4, #12]
 800677c:	bd10      	pop	{r4, pc}

0800677e <__sclose>:
 800677e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006782:	f000 b89d 	b.w	80068c0 <_close_r>

08006786 <__swbuf_r>:
 8006786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006788:	460e      	mov	r6, r1
 800678a:	4614      	mov	r4, r2
 800678c:	4605      	mov	r5, r0
 800678e:	b118      	cbz	r0, 8006798 <__swbuf_r+0x12>
 8006790:	6a03      	ldr	r3, [r0, #32]
 8006792:	b90b      	cbnz	r3, 8006798 <__swbuf_r+0x12>
 8006794:	f7ff ff20 	bl	80065d8 <__sinit>
 8006798:	69a3      	ldr	r3, [r4, #24]
 800679a:	60a3      	str	r3, [r4, #8]
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	071a      	lsls	r2, r3, #28
 80067a0:	d501      	bpl.n	80067a6 <__swbuf_r+0x20>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	b943      	cbnz	r3, 80067b8 <__swbuf_r+0x32>
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f82b 	bl	8006804 <__swsetup_r>
 80067ae:	b118      	cbz	r0, 80067b8 <__swbuf_r+0x32>
 80067b0:	f04f 37ff 	mov.w	r7, #4294967295
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	6922      	ldr	r2, [r4, #16]
 80067bc:	1a98      	subs	r0, r3, r2
 80067be:	6963      	ldr	r3, [r4, #20]
 80067c0:	b2f6      	uxtb	r6, r6
 80067c2:	4283      	cmp	r3, r0
 80067c4:	4637      	mov	r7, r6
 80067c6:	dc05      	bgt.n	80067d4 <__swbuf_r+0x4e>
 80067c8:	4621      	mov	r1, r4
 80067ca:	4628      	mov	r0, r5
 80067cc:	f000 f9ca 	bl	8006b64 <_fflush_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	d1ed      	bne.n	80067b0 <__swbuf_r+0x2a>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	3b01      	subs	r3, #1
 80067d8:	60a3      	str	r3, [r4, #8]
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	6022      	str	r2, [r4, #0]
 80067e0:	701e      	strb	r6, [r3, #0]
 80067e2:	6962      	ldr	r2, [r4, #20]
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d004      	beq.n	80067f4 <__swbuf_r+0x6e>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	07db      	lsls	r3, r3, #31
 80067ee:	d5e1      	bpl.n	80067b4 <__swbuf_r+0x2e>
 80067f0:	2e0a      	cmp	r6, #10
 80067f2:	d1df      	bne.n	80067b4 <__swbuf_r+0x2e>
 80067f4:	4621      	mov	r1, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f9b4 	bl	8006b64 <_fflush_r>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d0d9      	beq.n	80067b4 <__swbuf_r+0x2e>
 8006800:	e7d6      	b.n	80067b0 <__swbuf_r+0x2a>
	...

08006804 <__swsetup_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4b29      	ldr	r3, [pc, #164]	@ (80068ac <__swsetup_r+0xa8>)
 8006808:	4605      	mov	r5, r0
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	460c      	mov	r4, r1
 800680e:	b118      	cbz	r0, 8006818 <__swsetup_r+0x14>
 8006810:	6a03      	ldr	r3, [r0, #32]
 8006812:	b90b      	cbnz	r3, 8006818 <__swsetup_r+0x14>
 8006814:	f7ff fee0 	bl	80065d8 <__sinit>
 8006818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681c:	0719      	lsls	r1, r3, #28
 800681e:	d422      	bmi.n	8006866 <__swsetup_r+0x62>
 8006820:	06da      	lsls	r2, r3, #27
 8006822:	d407      	bmi.n	8006834 <__swsetup_r+0x30>
 8006824:	2209      	movs	r2, #9
 8006826:	602a      	str	r2, [r5, #0]
 8006828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	e033      	b.n	800689c <__swsetup_r+0x98>
 8006834:	0758      	lsls	r0, r3, #29
 8006836:	d512      	bpl.n	800685e <__swsetup_r+0x5a>
 8006838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800683a:	b141      	cbz	r1, 800684e <__swsetup_r+0x4a>
 800683c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006840:	4299      	cmp	r1, r3
 8006842:	d002      	beq.n	800684a <__swsetup_r+0x46>
 8006844:	4628      	mov	r0, r5
 8006846:	f000 f8bf 	bl	80069c8 <_free_r>
 800684a:	2300      	movs	r3, #0
 800684c:	6363      	str	r3, [r4, #52]	@ 0x34
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	2300      	movs	r3, #0
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f043 0308 	orr.w	r3, r3, #8
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	b94b      	cbnz	r3, 800687e <__swsetup_r+0x7a>
 800686a:	89a3      	ldrh	r3, [r4, #12]
 800686c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006874:	d003      	beq.n	800687e <__swsetup_r+0x7a>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f9c1 	bl	8006c00 <__smakebuf_r>
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	f013 0201 	ands.w	r2, r3, #1
 8006886:	d00a      	beq.n	800689e <__swsetup_r+0x9a>
 8006888:	2200      	movs	r2, #0
 800688a:	60a2      	str	r2, [r4, #8]
 800688c:	6962      	ldr	r2, [r4, #20]
 800688e:	4252      	negs	r2, r2
 8006890:	61a2      	str	r2, [r4, #24]
 8006892:	6922      	ldr	r2, [r4, #16]
 8006894:	b942      	cbnz	r2, 80068a8 <__swsetup_r+0xa4>
 8006896:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800689a:	d1c5      	bne.n	8006828 <__swsetup_r+0x24>
 800689c:	bd38      	pop	{r3, r4, r5, pc}
 800689e:	0799      	lsls	r1, r3, #30
 80068a0:	bf58      	it	pl
 80068a2:	6962      	ldrpl	r2, [r4, #20]
 80068a4:	60a2      	str	r2, [r4, #8]
 80068a6:	e7f4      	b.n	8006892 <__swsetup_r+0x8e>
 80068a8:	2000      	movs	r0, #0
 80068aa:	e7f7      	b.n	800689c <__swsetup_r+0x98>
 80068ac:	20000018 	.word	0x20000018

080068b0 <memset>:
 80068b0:	4402      	add	r2, r0
 80068b2:	4603      	mov	r3, r0
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d100      	bne.n	80068ba <memset+0xa>
 80068b8:	4770      	bx	lr
 80068ba:	f803 1b01 	strb.w	r1, [r3], #1
 80068be:	e7f9      	b.n	80068b4 <memset+0x4>

080068c0 <_close_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4d06      	ldr	r5, [pc, #24]	@ (80068dc <_close_r+0x1c>)
 80068c4:	2300      	movs	r3, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	4608      	mov	r0, r1
 80068ca:	602b      	str	r3, [r5, #0]
 80068cc:	f7fa fd75 	bl	80013ba <_close>
 80068d0:	1c43      	adds	r3, r0, #1
 80068d2:	d102      	bne.n	80068da <_close_r+0x1a>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	b103      	cbz	r3, 80068da <_close_r+0x1a>
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	bd38      	pop	{r3, r4, r5, pc}
 80068dc:	20000404 	.word	0x20000404

080068e0 <_lseek_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d07      	ldr	r5, [pc, #28]	@ (8006900 <_lseek_r+0x20>)
 80068e4:	4604      	mov	r4, r0
 80068e6:	4608      	mov	r0, r1
 80068e8:	4611      	mov	r1, r2
 80068ea:	2200      	movs	r2, #0
 80068ec:	602a      	str	r2, [r5, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	f7fa fd8a 	bl	8001408 <_lseek>
 80068f4:	1c43      	adds	r3, r0, #1
 80068f6:	d102      	bne.n	80068fe <_lseek_r+0x1e>
 80068f8:	682b      	ldr	r3, [r5, #0]
 80068fa:	b103      	cbz	r3, 80068fe <_lseek_r+0x1e>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	bd38      	pop	{r3, r4, r5, pc}
 8006900:	20000404 	.word	0x20000404

08006904 <_read_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	@ (8006924 <_read_r+0x20>)
 8006908:	4604      	mov	r4, r0
 800690a:	4608      	mov	r0, r1
 800690c:	4611      	mov	r1, r2
 800690e:	2200      	movs	r2, #0
 8006910:	602a      	str	r2, [r5, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f7fa fd18 	bl	8001348 <_read>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_read_r+0x1e>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_read_r+0x1e>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	20000404 	.word	0x20000404

08006928 <_sbrk_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d06      	ldr	r5, [pc, #24]	@ (8006944 <_sbrk_r+0x1c>)
 800692c:	2300      	movs	r3, #0
 800692e:	4604      	mov	r4, r0
 8006930:	4608      	mov	r0, r1
 8006932:	602b      	str	r3, [r5, #0]
 8006934:	f7fa fd76 	bl	8001424 <_sbrk>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d102      	bne.n	8006942 <_sbrk_r+0x1a>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	b103      	cbz	r3, 8006942 <_sbrk_r+0x1a>
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	bd38      	pop	{r3, r4, r5, pc}
 8006944:	20000404 	.word	0x20000404

08006948 <_write_r>:
 8006948:	b538      	push	{r3, r4, r5, lr}
 800694a:	4d07      	ldr	r5, [pc, #28]	@ (8006968 <_write_r+0x20>)
 800694c:	4604      	mov	r4, r0
 800694e:	4608      	mov	r0, r1
 8006950:	4611      	mov	r1, r2
 8006952:	2200      	movs	r2, #0
 8006954:	602a      	str	r2, [r5, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f7fa fd13 	bl	8001382 <_write>
 800695c:	1c43      	adds	r3, r0, #1
 800695e:	d102      	bne.n	8006966 <_write_r+0x1e>
 8006960:	682b      	ldr	r3, [r5, #0]
 8006962:	b103      	cbz	r3, 8006966 <_write_r+0x1e>
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	bd38      	pop	{r3, r4, r5, pc}
 8006968:	20000404 	.word	0x20000404

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	@ (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	20000018 	.word	0x20000018

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4d0d      	ldr	r5, [pc, #52]	@ (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	@ (80069b4 <__libc_init_array+0x3c>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2600      	movs	r6, #0
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4d0b      	ldr	r5, [pc, #44]	@ (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	@ (80069bc <__libc_init_array+0x44>)
 800698c:	f000 fb96 	bl	80070bc <_init>
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2600      	movs	r6, #0
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	08007298 	.word	0x08007298
 80069b4:	08007298 	.word	0x08007298
 80069b8:	08007298 	.word	0x08007298
 80069bc:	0800729c 	.word	0x0800729c

080069c0 <__retarget_lock_init_recursive>:
 80069c0:	4770      	bx	lr

080069c2 <__retarget_lock_acquire_recursive>:
 80069c2:	4770      	bx	lr

080069c4 <__retarget_lock_release_recursive>:
 80069c4:	4770      	bx	lr
	...

080069c8 <_free_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4605      	mov	r5, r0
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d041      	beq.n	8006a54 <_free_r+0x8c>
 80069d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d4:	1f0c      	subs	r4, r1, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfb8      	it	lt
 80069da:	18e4      	addlt	r4, r4, r3
 80069dc:	f7ff fd64 	bl	80064a8 <__malloc_lock>
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <_free_r+0x90>)
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	b933      	cbnz	r3, 80069f4 <_free_r+0x2c>
 80069e6:	6063      	str	r3, [r4, #4]
 80069e8:	6014      	str	r4, [r2, #0]
 80069ea:	4628      	mov	r0, r5
 80069ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f0:	f7ff bd60 	b.w	80064b4 <__malloc_unlock>
 80069f4:	42a3      	cmp	r3, r4
 80069f6:	d908      	bls.n	8006a0a <_free_r+0x42>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	1821      	adds	r1, r4, r0
 80069fc:	428b      	cmp	r3, r1
 80069fe:	bf01      	itttt	eq
 8006a00:	6819      	ldreq	r1, [r3, #0]
 8006a02:	685b      	ldreq	r3, [r3, #4]
 8006a04:	1809      	addeq	r1, r1, r0
 8006a06:	6021      	streq	r1, [r4, #0]
 8006a08:	e7ed      	b.n	80069e6 <_free_r+0x1e>
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	b10b      	cbz	r3, 8006a14 <_free_r+0x4c>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d9fa      	bls.n	8006a0a <_free_r+0x42>
 8006a14:	6811      	ldr	r1, [r2, #0]
 8006a16:	1850      	adds	r0, r2, r1
 8006a18:	42a0      	cmp	r0, r4
 8006a1a:	d10b      	bne.n	8006a34 <_free_r+0x6c>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	4401      	add	r1, r0
 8006a20:	1850      	adds	r0, r2, r1
 8006a22:	4283      	cmp	r3, r0
 8006a24:	6011      	str	r1, [r2, #0]
 8006a26:	d1e0      	bne.n	80069ea <_free_r+0x22>
 8006a28:	6818      	ldr	r0, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	6053      	str	r3, [r2, #4]
 8006a2e:	4408      	add	r0, r1
 8006a30:	6010      	str	r0, [r2, #0]
 8006a32:	e7da      	b.n	80069ea <_free_r+0x22>
 8006a34:	d902      	bls.n	8006a3c <_free_r+0x74>
 8006a36:	230c      	movs	r3, #12
 8006a38:	602b      	str	r3, [r5, #0]
 8006a3a:	e7d6      	b.n	80069ea <_free_r+0x22>
 8006a3c:	6820      	ldr	r0, [r4, #0]
 8006a3e:	1821      	adds	r1, r4, r0
 8006a40:	428b      	cmp	r3, r1
 8006a42:	bf04      	itt	eq
 8006a44:	6819      	ldreq	r1, [r3, #0]
 8006a46:	685b      	ldreq	r3, [r3, #4]
 8006a48:	6063      	str	r3, [r4, #4]
 8006a4a:	bf04      	itt	eq
 8006a4c:	1809      	addeq	r1, r1, r0
 8006a4e:	6021      	streq	r1, [r4, #0]
 8006a50:	6054      	str	r4, [r2, #4]
 8006a52:	e7ca      	b.n	80069ea <_free_r+0x22>
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	200002c4 	.word	0x200002c4

08006a5c <__sflush_r>:
 8006a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	0716      	lsls	r6, r2, #28
 8006a66:	4605      	mov	r5, r0
 8006a68:	460c      	mov	r4, r1
 8006a6a:	d454      	bmi.n	8006b16 <__sflush_r+0xba>
 8006a6c:	684b      	ldr	r3, [r1, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	dc02      	bgt.n	8006a78 <__sflush_r+0x1c>
 8006a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd48      	ble.n	8006b0a <__sflush_r+0xae>
 8006a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a7a:	2e00      	cmp	r6, #0
 8006a7c:	d045      	beq.n	8006b0a <__sflush_r+0xae>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a84:	682f      	ldr	r7, [r5, #0]
 8006a86:	6a21      	ldr	r1, [r4, #32]
 8006a88:	602b      	str	r3, [r5, #0]
 8006a8a:	d030      	beq.n	8006aee <__sflush_r+0x92>
 8006a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	0759      	lsls	r1, r3, #29
 8006a92:	d505      	bpl.n	8006aa0 <__sflush_r+0x44>
 8006a94:	6863      	ldr	r3, [r4, #4]
 8006a96:	1ad2      	subs	r2, r2, r3
 8006a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a9a:	b10b      	cbz	r3, 8006aa0 <__sflush_r+0x44>
 8006a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a9e:	1ad2      	subs	r2, r2, r3
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006aa4:	6a21      	ldr	r1, [r4, #32]
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b0      	blx	r6
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	d106      	bne.n	8006abe <__sflush_r+0x62>
 8006ab0:	6829      	ldr	r1, [r5, #0]
 8006ab2:	291d      	cmp	r1, #29
 8006ab4:	d82b      	bhi.n	8006b0e <__sflush_r+0xb2>
 8006ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b60 <__sflush_r+0x104>)
 8006ab8:	410a      	asrs	r2, r1
 8006aba:	07d6      	lsls	r6, r2, #31
 8006abc:	d427      	bmi.n	8006b0e <__sflush_r+0xb2>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	6062      	str	r2, [r4, #4]
 8006ac2:	04d9      	lsls	r1, r3, #19
 8006ac4:	6922      	ldr	r2, [r4, #16]
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	d504      	bpl.n	8006ad4 <__sflush_r+0x78>
 8006aca:	1c42      	adds	r2, r0, #1
 8006acc:	d101      	bne.n	8006ad2 <__sflush_r+0x76>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	b903      	cbnz	r3, 8006ad4 <__sflush_r+0x78>
 8006ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ad6:	602f      	str	r7, [r5, #0]
 8006ad8:	b1b9      	cbz	r1, 8006b0a <__sflush_r+0xae>
 8006ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ade:	4299      	cmp	r1, r3
 8006ae0:	d002      	beq.n	8006ae8 <__sflush_r+0x8c>
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	f7ff ff70 	bl	80069c8 <_free_r>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8006aec:	e00d      	b.n	8006b0a <__sflush_r+0xae>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b0      	blx	r6
 8006af4:	4602      	mov	r2, r0
 8006af6:	1c50      	adds	r0, r2, #1
 8006af8:	d1c9      	bne.n	8006a8e <__sflush_r+0x32>
 8006afa:	682b      	ldr	r3, [r5, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0c6      	beq.n	8006a8e <__sflush_r+0x32>
 8006b00:	2b1d      	cmp	r3, #29
 8006b02:	d001      	beq.n	8006b08 <__sflush_r+0xac>
 8006b04:	2b16      	cmp	r3, #22
 8006b06:	d11e      	bne.n	8006b46 <__sflush_r+0xea>
 8006b08:	602f      	str	r7, [r5, #0]
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e022      	b.n	8006b54 <__sflush_r+0xf8>
 8006b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b12:	b21b      	sxth	r3, r3
 8006b14:	e01b      	b.n	8006b4e <__sflush_r+0xf2>
 8006b16:	690f      	ldr	r7, [r1, #16]
 8006b18:	2f00      	cmp	r7, #0
 8006b1a:	d0f6      	beq.n	8006b0a <__sflush_r+0xae>
 8006b1c:	0793      	lsls	r3, r2, #30
 8006b1e:	680e      	ldr	r6, [r1, #0]
 8006b20:	bf08      	it	eq
 8006b22:	694b      	ldreq	r3, [r1, #20]
 8006b24:	600f      	str	r7, [r1, #0]
 8006b26:	bf18      	it	ne
 8006b28:	2300      	movne	r3, #0
 8006b2a:	eba6 0807 	sub.w	r8, r6, r7
 8006b2e:	608b      	str	r3, [r1, #8]
 8006b30:	f1b8 0f00 	cmp.w	r8, #0
 8006b34:	dde9      	ble.n	8006b0a <__sflush_r+0xae>
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006b3a:	4643      	mov	r3, r8
 8006b3c:	463a      	mov	r2, r7
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b0      	blx	r6
 8006b42:	2800      	cmp	r0, #0
 8006b44:	dc08      	bgt.n	8006b58 <__sflush_r+0xfc>
 8006b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b58:	4407      	add	r7, r0
 8006b5a:	eba8 0800 	sub.w	r8, r8, r0
 8006b5e:	e7e7      	b.n	8006b30 <__sflush_r+0xd4>
 8006b60:	dfbffffe 	.word	0xdfbffffe

08006b64 <_fflush_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	690b      	ldr	r3, [r1, #16]
 8006b68:	4605      	mov	r5, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	b913      	cbnz	r3, 8006b74 <_fflush_r+0x10>
 8006b6e:	2500      	movs	r5, #0
 8006b70:	4628      	mov	r0, r5
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	b118      	cbz	r0, 8006b7e <_fflush_r+0x1a>
 8006b76:	6a03      	ldr	r3, [r0, #32]
 8006b78:	b90b      	cbnz	r3, 8006b7e <_fflush_r+0x1a>
 8006b7a:	f7ff fd2d 	bl	80065d8 <__sinit>
 8006b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f3      	beq.n	8006b6e <_fflush_r+0xa>
 8006b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b88:	07d0      	lsls	r0, r2, #31
 8006b8a:	d404      	bmi.n	8006b96 <_fflush_r+0x32>
 8006b8c:	0599      	lsls	r1, r3, #22
 8006b8e:	d402      	bmi.n	8006b96 <_fflush_r+0x32>
 8006b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b92:	f7ff ff16 	bl	80069c2 <__retarget_lock_acquire_recursive>
 8006b96:	4628      	mov	r0, r5
 8006b98:	4621      	mov	r1, r4
 8006b9a:	f7ff ff5f 	bl	8006a5c <__sflush_r>
 8006b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ba0:	07da      	lsls	r2, r3, #31
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	d4e4      	bmi.n	8006b70 <_fflush_r+0xc>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	059b      	lsls	r3, r3, #22
 8006baa:	d4e1      	bmi.n	8006b70 <_fflush_r+0xc>
 8006bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bae:	f7ff ff09 	bl	80069c4 <__retarget_lock_release_recursive>
 8006bb2:	e7dd      	b.n	8006b70 <_fflush_r+0xc>

08006bb4 <__swhatbuf_r>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	b096      	sub	sp, #88	@ 0x58
 8006bc0:	4615      	mov	r5, r2
 8006bc2:	461e      	mov	r6, r3
 8006bc4:	da0d      	bge.n	8006be2 <__swhatbuf_r+0x2e>
 8006bc6:	89a3      	ldrh	r3, [r4, #12]
 8006bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006bcc:	f04f 0100 	mov.w	r1, #0
 8006bd0:	bf14      	ite	ne
 8006bd2:	2340      	movne	r3, #64	@ 0x40
 8006bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006bd8:	2000      	movs	r0, #0
 8006bda:	6031      	str	r1, [r6, #0]
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	b016      	add	sp, #88	@ 0x58
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
 8006be2:	466a      	mov	r2, sp
 8006be4:	f000 f848 	bl	8006c78 <_fstat_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	dbec      	blt.n	8006bc6 <__swhatbuf_r+0x12>
 8006bec:	9901      	ldr	r1, [sp, #4]
 8006bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bf6:	4259      	negs	r1, r3
 8006bf8:	4159      	adcs	r1, r3
 8006bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bfe:	e7eb      	b.n	8006bd8 <__swhatbuf_r+0x24>

08006c00 <__smakebuf_r>:
 8006c00:	898b      	ldrh	r3, [r1, #12]
 8006c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c04:	079d      	lsls	r5, r3, #30
 8006c06:	4606      	mov	r6, r0
 8006c08:	460c      	mov	r4, r1
 8006c0a:	d507      	bpl.n	8006c1c <__smakebuf_r+0x1c>
 8006c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	2301      	movs	r3, #1
 8006c16:	6163      	str	r3, [r4, #20]
 8006c18:	b003      	add	sp, #12
 8006c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1c:	ab01      	add	r3, sp, #4
 8006c1e:	466a      	mov	r2, sp
 8006c20:	f7ff ffc8 	bl	8006bb4 <__swhatbuf_r>
 8006c24:	9f00      	ldr	r7, [sp, #0]
 8006c26:	4605      	mov	r5, r0
 8006c28:	4639      	mov	r1, r7
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff fbbc 	bl	80063a8 <_malloc_r>
 8006c30:	b948      	cbnz	r0, 8006c46 <__smakebuf_r+0x46>
 8006c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c36:	059a      	lsls	r2, r3, #22
 8006c38:	d4ee      	bmi.n	8006c18 <__smakebuf_r+0x18>
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	f043 0302 	orr.w	r3, r3, #2
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	e7e2      	b.n	8006c0c <__smakebuf_r+0xc>
 8006c46:	89a3      	ldrh	r3, [r4, #12]
 8006c48:	6020      	str	r0, [r4, #0]
 8006c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	9b01      	ldr	r3, [sp, #4]
 8006c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c56:	b15b      	cbz	r3, 8006c70 <__smakebuf_r+0x70>
 8006c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f000 f81d 	bl	8006c9c <_isatty_r>
 8006c62:	b128      	cbz	r0, 8006c70 <__smakebuf_r+0x70>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	f043 0301 	orr.w	r3, r3, #1
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	431d      	orrs	r5, r3
 8006c74:	81a5      	strh	r5, [r4, #12]
 8006c76:	e7cf      	b.n	8006c18 <__smakebuf_r+0x18>

08006c78 <_fstat_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d07      	ldr	r5, [pc, #28]	@ (8006c98 <_fstat_r+0x20>)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	f7fa fba4 	bl	80013d2 <_fstat>
 8006c8a:	1c43      	adds	r3, r0, #1
 8006c8c:	d102      	bne.n	8006c94 <_fstat_r+0x1c>
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	b103      	cbz	r3, 8006c94 <_fstat_r+0x1c>
 8006c92:	6023      	str	r3, [r4, #0]
 8006c94:	bd38      	pop	{r3, r4, r5, pc}
 8006c96:	bf00      	nop
 8006c98:	20000404 	.word	0x20000404

08006c9c <_isatty_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	@ (8006cb8 <_isatty_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7fa fba3 	bl	80013f2 <_isatty>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_isatty_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_isatty_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	20000404 	.word	0x20000404
 8006cbc:	00000000 	.word	0x00000000

08006cc0 <log>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	ed2d 8b02 	vpush	{d8}
 8006cc6:	ec55 4b10 	vmov	r4, r5, d0
 8006cca:	f000 f841 	bl	8006d50 <__ieee754_log>
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8006cda:	eef0 8a60 	vmov.f32	s17, s1
 8006cde:	f7f9 fed1 	bl	8000a84 <__aeabi_dcmpun>
 8006ce2:	b998      	cbnz	r0, 8006d0c <log+0x4c>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4629      	mov	r1, r5
 8006cec:	f7f9 fec0 	bl	8000a70 <__aeabi_dcmpgt>
 8006cf0:	b960      	cbnz	r0, 8006d0c <log+0x4c>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fe91 	bl	8000a20 <__aeabi_dcmpeq>
 8006cfe:	b160      	cbz	r0, 8006d1a <log+0x5a>
 8006d00:	f7ff fe34 	bl	800696c <__errno>
 8006d04:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8006d30 <log+0x70>
 8006d08:	2322      	movs	r3, #34	@ 0x22
 8006d0a:	6003      	str	r3, [r0, #0]
 8006d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8006d10:	eef0 0a68 	vmov.f32	s1, s17
 8006d14:	ecbd 8b02 	vpop	{d8}
 8006d18:	bd38      	pop	{r3, r4, r5, pc}
 8006d1a:	f7ff fe27 	bl	800696c <__errno>
 8006d1e:	ecbd 8b02 	vpop	{d8}
 8006d22:	2321      	movs	r3, #33	@ 0x21
 8006d24:	6003      	str	r3, [r0, #0]
 8006d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d2a:	4803      	ldr	r0, [pc, #12]	@ (8006d38 <log+0x78>)
 8006d2c:	f000 b808 	b.w	8006d40 <nan>
 8006d30:	00000000 	.word	0x00000000
 8006d34:	fff00000 	.word	0xfff00000
 8006d38:	0800728e 	.word	0x0800728e
 8006d3c:	00000000 	.word	0x00000000

08006d40 <nan>:
 8006d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006d48 <nan+0x8>
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	00000000 	.word	0x00000000
 8006d4c:	7ff80000 	.word	0x7ff80000

08006d50 <__ieee754_log>:
 8006d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	ec51 0b10 	vmov	r0, r1, d0
 8006d58:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	460d      	mov	r5, r1
 8006d60:	da26      	bge.n	8006db0 <__ieee754_log+0x60>
 8006d62:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d66:	4303      	orrs	r3, r0
 8006d68:	4602      	mov	r2, r0
 8006d6a:	d10a      	bne.n	8006d82 <__ieee754_log+0x32>
 8006d6c:	49ce      	ldr	r1, [pc, #824]	@ (80070a8 <__ieee754_log+0x358>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	2300      	movs	r3, #0
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7f9 fd16 	bl	80007a4 <__aeabi_ddiv>
 8006d78:	ec41 0b10 	vmov	d0, r0, r1
 8006d7c:	b007      	add	sp, #28
 8006d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d82:	2900      	cmp	r1, #0
 8006d84:	da05      	bge.n	8006d92 <__ieee754_log+0x42>
 8006d86:	460b      	mov	r3, r1
 8006d88:	f7f9 fa2a 	bl	80001e0 <__aeabi_dsub>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e7f0      	b.n	8006d74 <__ieee754_log+0x24>
 8006d92:	4bc6      	ldr	r3, [pc, #792]	@ (80070ac <__ieee754_log+0x35c>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	f7f9 fbdb 	bl	8000550 <__aeabi_dmul>
 8006d9a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8006d9e:	460d      	mov	r5, r1
 8006da0:	4ac3      	ldr	r2, [pc, #780]	@ (80070b0 <__ieee754_log+0x360>)
 8006da2:	4295      	cmp	r5, r2
 8006da4:	dd06      	ble.n	8006db4 <__ieee754_log+0x64>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	f7f9 fa1b 	bl	80001e4 <__adddf3>
 8006dae:	e7e3      	b.n	8006d78 <__ieee754_log+0x28>
 8006db0:	2300      	movs	r3, #0
 8006db2:	e7f5      	b.n	8006da0 <__ieee754_log+0x50>
 8006db4:	152c      	asrs	r4, r5, #20
 8006db6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 8006dba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006dbe:	441c      	add	r4, r3
 8006dc0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 8006dc4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 8006dc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dcc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 8006dd0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 8006dd4:	ea42 0105 	orr.w	r1, r2, r5
 8006dd8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006ddc:	2200      	movs	r2, #0
 8006dde:	4bb5      	ldr	r3, [pc, #724]	@ (80070b4 <__ieee754_log+0x364>)
 8006de0:	f7f9 f9fe 	bl	80001e0 <__aeabi_dsub>
 8006de4:	1cab      	adds	r3, r5, #2
 8006de6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	4682      	mov	sl, r0
 8006dee:	468b      	mov	fp, r1
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	dc53      	bgt.n	8006e9e <__ieee754_log+0x14e>
 8006df6:	2300      	movs	r3, #0
 8006df8:	f7f9 fe12 	bl	8000a20 <__aeabi_dcmpeq>
 8006dfc:	b1d0      	cbz	r0, 8006e34 <__ieee754_log+0xe4>
 8006dfe:	2c00      	cmp	r4, #0
 8006e00:	f000 8120 	beq.w	8007044 <__ieee754_log+0x2f4>
 8006e04:	4620      	mov	r0, r4
 8006e06:	f7f9 fb39 	bl	800047c <__aeabi_i2d>
 8006e0a:	a391      	add	r3, pc, #580	@ (adr r3, 8007050 <__ieee754_log+0x300>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	4606      	mov	r6, r0
 8006e12:	460f      	mov	r7, r1
 8006e14:	f7f9 fb9c 	bl	8000550 <__aeabi_dmul>
 8006e18:	a38f      	add	r3, pc, #572	@ (adr r3, 8007058 <__ieee754_log+0x308>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	4604      	mov	r4, r0
 8006e20:	460d      	mov	r5, r1
 8006e22:	4630      	mov	r0, r6
 8006e24:	4639      	mov	r1, r7
 8006e26:	f7f9 fb93 	bl	8000550 <__aeabi_dmul>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	e7ba      	b.n	8006daa <__ieee754_log+0x5a>
 8006e34:	a38a      	add	r3, pc, #552	@ (adr r3, 8007060 <__ieee754_log+0x310>)
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	4650      	mov	r0, sl
 8006e3c:	4659      	mov	r1, fp
 8006e3e:	f7f9 fb87 	bl	8000550 <__aeabi_dmul>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	2000      	movs	r0, #0
 8006e48:	499b      	ldr	r1, [pc, #620]	@ (80070b8 <__ieee754_log+0x368>)
 8006e4a:	f7f9 f9c9 	bl	80001e0 <__aeabi_dsub>
 8006e4e:	4652      	mov	r2, sl
 8006e50:	4606      	mov	r6, r0
 8006e52:	460f      	mov	r7, r1
 8006e54:	465b      	mov	r3, fp
 8006e56:	4650      	mov	r0, sl
 8006e58:	4659      	mov	r1, fp
 8006e5a:	f7f9 fb79 	bl	8000550 <__aeabi_dmul>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 fb73 	bl	8000550 <__aeabi_dmul>
 8006e6a:	4606      	mov	r6, r0
 8006e6c:	460f      	mov	r7, r1
 8006e6e:	b914      	cbnz	r4, 8006e76 <__ieee754_log+0x126>
 8006e70:	4632      	mov	r2, r6
 8006e72:	463b      	mov	r3, r7
 8006e74:	e0a0      	b.n	8006fb8 <__ieee754_log+0x268>
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7f9 fb00 	bl	800047c <__aeabi_i2d>
 8006e7c:	a374      	add	r3, pc, #464	@ (adr r3, 8007050 <__ieee754_log+0x300>)
 8006e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e82:	4680      	mov	r8, r0
 8006e84:	4689      	mov	r9, r1
 8006e86:	f7f9 fb63 	bl	8000550 <__aeabi_dmul>
 8006e8a:	a373      	add	r3, pc, #460	@ (adr r3, 8007058 <__ieee754_log+0x308>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	4604      	mov	r4, r0
 8006e92:	460d      	mov	r5, r1
 8006e94:	4640      	mov	r0, r8
 8006e96:	4649      	mov	r1, r9
 8006e98:	f7f9 fb5a 	bl	8000550 <__aeabi_dmul>
 8006e9c:	e0a5      	b.n	8006fea <__ieee754_log+0x29a>
 8006e9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006ea2:	f7f9 f99f 	bl	80001e4 <__adddf3>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4650      	mov	r0, sl
 8006eac:	4659      	mov	r1, fp
 8006eae:	f7f9 fc79 	bl	80007a4 <__aeabi_ddiv>
 8006eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f7f9 fae0 	bl	800047c <__aeabi_i2d>
 8006ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ec0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	f7f9 fb42 	bl	8000550 <__aeabi_dmul>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ed4:	f7f9 fb3c 	bl	8000550 <__aeabi_dmul>
 8006ed8:	a363      	add	r3, pc, #396	@ (adr r3, 8007068 <__ieee754_log+0x318>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	4680      	mov	r8, r0
 8006ee0:	4689      	mov	r9, r1
 8006ee2:	f7f9 fb35 	bl	8000550 <__aeabi_dmul>
 8006ee6:	a362      	add	r3, pc, #392	@ (adr r3, 8007070 <__ieee754_log+0x320>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 f97a 	bl	80001e4 <__adddf3>
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	f7f9 fb2c 	bl	8000550 <__aeabi_dmul>
 8006ef8:	a35f      	add	r3, pc, #380	@ (adr r3, 8007078 <__ieee754_log+0x328>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	f7f9 f971 	bl	80001e4 <__adddf3>
 8006f02:	4642      	mov	r2, r8
 8006f04:	464b      	mov	r3, r9
 8006f06:	f7f9 fb23 	bl	8000550 <__aeabi_dmul>
 8006f0a:	a35d      	add	r3, pc, #372	@ (adr r3, 8007080 <__ieee754_log+0x330>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 f968 	bl	80001e4 <__adddf3>
 8006f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f18:	f7f9 fb1a 	bl	8000550 <__aeabi_dmul>
 8006f1c:	a35a      	add	r3, pc, #360	@ (adr r3, 8007088 <__ieee754_log+0x338>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fb11 	bl	8000550 <__aeabi_dmul>
 8006f2e:	a358      	add	r3, pc, #352	@ (adr r3, 8007090 <__ieee754_log+0x340>)
 8006f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f34:	f7f9 f956 	bl	80001e4 <__adddf3>
 8006f38:	4642      	mov	r2, r8
 8006f3a:	464b      	mov	r3, r9
 8006f3c:	f7f9 fb08 	bl	8000550 <__aeabi_dmul>
 8006f40:	a355      	add	r3, pc, #340	@ (adr r3, 8007098 <__ieee754_log+0x348>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	f7f9 f94d 	bl	80001e4 <__adddf3>
 8006f4a:	4642      	mov	r2, r8
 8006f4c:	464b      	mov	r3, r9
 8006f4e:	f7f9 faff 	bl	8000550 <__aeabi_dmul>
 8006f52:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 8006f5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f62:	f7f9 f93f 	bl	80001e4 <__adddf3>
 8006f66:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8006f6a:	3551      	adds	r5, #81	@ 0x51
 8006f6c:	4335      	orrs	r5, r6
 8006f6e:	2d00      	cmp	r5, #0
 8006f70:	4680      	mov	r8, r0
 8006f72:	4689      	mov	r9, r1
 8006f74:	dd48      	ble.n	8007008 <__ieee754_log+0x2b8>
 8006f76:	4b50      	ldr	r3, [pc, #320]	@ (80070b8 <__ieee754_log+0x368>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	4650      	mov	r0, sl
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	f7f9 fae7 	bl	8000550 <__aeabi_dmul>
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	f7f9 fae3 	bl	8000550 <__aeabi_dmul>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4606      	mov	r6, r0
 8006f90:	460f      	mov	r7, r1
 8006f92:	4640      	mov	r0, r8
 8006f94:	4649      	mov	r1, r9
 8006f96:	f7f9 f925 	bl	80001e4 <__adddf3>
 8006f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f9e:	f7f9 fad7 	bl	8000550 <__aeabi_dmul>
 8006fa2:	4680      	mov	r8, r0
 8006fa4:	4689      	mov	r9, r1
 8006fa6:	b964      	cbnz	r4, 8006fc2 <__ieee754_log+0x272>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4630      	mov	r0, r6
 8006fae:	4639      	mov	r1, r7
 8006fb0:	f7f9 f916 	bl	80001e0 <__aeabi_dsub>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4650      	mov	r0, sl
 8006fba:	4659      	mov	r1, fp
 8006fbc:	f7f9 f910 	bl	80001e0 <__aeabi_dsub>
 8006fc0:	e6da      	b.n	8006d78 <__ieee754_log+0x28>
 8006fc2:	a323      	add	r3, pc, #140	@ (adr r3, 8007050 <__ieee754_log+0x300>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fcc:	f7f9 fac0 	bl	8000550 <__aeabi_dmul>
 8006fd0:	a321      	add	r3, pc, #132	@ (adr r3, 8007058 <__ieee754_log+0x308>)
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	4604      	mov	r4, r0
 8006fd8:	460d      	mov	r5, r1
 8006fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fde:	f7f9 fab7 	bl	8000550 <__aeabi_dmul>
 8006fe2:	4642      	mov	r2, r8
 8006fe4:	464b      	mov	r3, r9
 8006fe6:	f7f9 f8fd 	bl	80001e4 <__adddf3>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4630      	mov	r0, r6
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	f7f9 f8f5 	bl	80001e0 <__aeabi_dsub>
 8006ff6:	4652      	mov	r2, sl
 8006ff8:	465b      	mov	r3, fp
 8006ffa:	f7f9 f8f1 	bl	80001e0 <__aeabi_dsub>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	e7d9      	b.n	8006fbc <__ieee754_log+0x26c>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4650      	mov	r0, sl
 800700e:	4659      	mov	r1, fp
 8007010:	f7f9 f8e6 	bl	80001e0 <__aeabi_dsub>
 8007014:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007018:	f7f9 fa9a 	bl	8000550 <__aeabi_dmul>
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	2c00      	cmp	r4, #0
 8007022:	f43f af25 	beq.w	8006e70 <__ieee754_log+0x120>
 8007026:	a30a      	add	r3, pc, #40	@ (adr r3, 8007050 <__ieee754_log+0x300>)
 8007028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007030:	f7f9 fa8e 	bl	8000550 <__aeabi_dmul>
 8007034:	a308      	add	r3, pc, #32	@ (adr r3, 8007058 <__ieee754_log+0x308>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	4604      	mov	r4, r0
 800703c:	460d      	mov	r5, r1
 800703e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007042:	e729      	b.n	8006e98 <__ieee754_log+0x148>
 8007044:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 80070a0 <__ieee754_log+0x350>
 8007048:	e698      	b.n	8006d7c <__ieee754_log+0x2c>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	fee00000 	.word	0xfee00000
 8007054:	3fe62e42 	.word	0x3fe62e42
 8007058:	35793c76 	.word	0x35793c76
 800705c:	3dea39ef 	.word	0x3dea39ef
 8007060:	55555555 	.word	0x55555555
 8007064:	3fd55555 	.word	0x3fd55555
 8007068:	df3e5244 	.word	0xdf3e5244
 800706c:	3fc2f112 	.word	0x3fc2f112
 8007070:	96cb03de 	.word	0x96cb03de
 8007074:	3fc74664 	.word	0x3fc74664
 8007078:	94229359 	.word	0x94229359
 800707c:	3fd24924 	.word	0x3fd24924
 8007080:	55555593 	.word	0x55555593
 8007084:	3fe55555 	.word	0x3fe55555
 8007088:	d078c69f 	.word	0xd078c69f
 800708c:	3fc39a09 	.word	0x3fc39a09
 8007090:	1d8e78af 	.word	0x1d8e78af
 8007094:	3fcc71c5 	.word	0x3fcc71c5
 8007098:	9997fa04 	.word	0x9997fa04
 800709c:	3fd99999 	.word	0x3fd99999
	...
 80070a8:	c3500000 	.word	0xc3500000
 80070ac:	43500000 	.word	0x43500000
 80070b0:	7fefffff 	.word	0x7fefffff
 80070b4:	3ff00000 	.word	0x3ff00000
 80070b8:	3fe00000 	.word	0x3fe00000

080070bc <_init>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr

080070c8 <_fini>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr
